
Analyzing loop at compiler-optimizations.cpp:4
compiler-optimizations.cpp:4:22: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:4:22: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:4:22: note: === get_loop_niters ===
compiler-optimizations.cpp:4:22: note: Symbolic number of iterations is (unsigned int) n_24(D)
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_6 = _8;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_9 = _11;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_12 = _14;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _16 = *_15;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_15 = _17;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _19 = *_18;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_18 = _20;
vector(4) int
compiler-optimizations.cpp:4:22: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:4:22: note: Analyze phi: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:4:22: note: step: 1,  init: 0
compiler-optimizations.cpp:4:22: note: Detected induction.
compiler-optimizations.cpp:4:22: note: Analyze phi: .MEM_40 = PHI <.MEM_23(D)(5), .MEM_36(6)>
compiler-optimizations.cpp:4:22: note: === vect_pattern_recog ===
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:4:22: note: def_stmt: _1 = (long unsigned int) i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:4:22: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:4:22: note: init: phi relevant? i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: init: phi relevant? .MEM_40 = PHI <.MEM_23(D)(5), .MEM_36(6)>
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _1 = (long unsigned int) i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _3 = a_25(D) + _2;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _5 = _4 + i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? *_3 = _5;
compiler-optimizations.cpp:4:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: *_3 = _5;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _6 = b_27(D) + _2;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _7 = *_6;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _8 = _7 + i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? *_6 = _8;
compiler-optimizations.cpp:4:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: *_6 = _8;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _9 = c_29(D) + _2;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _10 = *_9;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _11 = _10 + i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? *_9 = _11;
compiler-optimizations.cpp:4:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: *_9 = _11;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _12 = x_31(D) + _2;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _13 = *_12;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _14 = _13 + i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? *_12 = _14;
compiler-optimizations.cpp:4:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: *_12 = _14;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _15 = y_33(D) + _2;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _16 = *_15;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _17 = _16 + i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? *_15 = _17;
compiler-optimizations.cpp:4:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: *_15 = _17;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _18 = z_35(D) + _2;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _19 = *_18;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? _20 = _19 + i_41;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? *_18 = _20;
compiler-optimizations.cpp:4:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: *_18 = _20;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? i_37 = i_41 + 1;
compiler-optimizations.cpp:4:22: note: init: stmt relevant? if (n_24(D) <= i_37)
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: *_18 = _20;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _20
compiler-optimizations.cpp:4:22: note: def_stmt: _20 = _19 + i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _20 = _19 + i_41;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _20 = _19 + i_41;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _19
compiler-optimizations.cpp:4:22: note: def_stmt: _19 = *_18;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _19 = *_18;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_37
compiler-optimizations.cpp:4:22: note: def_stmt: i_37 = i_41 + 1;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: induction value on backedge.
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _19 = *_18;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: *_15 = _17;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:4:22: note: def_stmt: _17 = _16 + i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _17 = _16 + i_41;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _17 = _16 + i_41;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:4:22: note: def_stmt: _16 = *_15;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _16 = *_15;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: already marked relevant/live.
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _16 = *_15;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: *_12 = _14;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:4:22: note: def_stmt: _14 = _13 + i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _14 = _13 + i_41;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _14 = _13 + i_41;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:4:22: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _13 = *_12;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: already marked relevant/live.
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _13 = *_12;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: *_9 = _11;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:4:22: note: def_stmt: _11 = _10 + i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _11 = _10 + i_41;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _11 = _10 + i_41;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:4:22: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _10 = *_9;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: already marked relevant/live.
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _10 = *_9;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: *_6 = _8;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:4:22: note: def_stmt: _8 = _7 + i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _8 = _7 + i_41;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _8 = _7 + i_41;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:4:22: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _7 = *_6;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: already marked relevant/live.
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _7 = *_6;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: *_3 = _5;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:4:22: note: def_stmt: _5 = _4 + i_41;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _5 = _4 + i_41;
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _5 = _4 + i_41;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:4:22: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:4:22: note: type of def: internal
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:4:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:4:22: note: def_stmt: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: type of def: induction
compiler-optimizations.cpp:4:22: note: mark relevant 5, live 0: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: already marked relevant/live.
compiler-optimizations.cpp:4:22: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:4:22: note: dependence distance  = 0.
compiler-optimizations.cpp:4:22: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_18
consider run-time aliasing test between *_3 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_18
consider run-time aliasing test between *_3 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_3 and *_18
consider run-time aliasing test between *_3 and *_18
compiler-optimizations.cpp:4:22: note: dependence distance  = 0.
compiler-optimizations.cpp:4:22: note: dependence distance == 0 between *_6 and *_6
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_18
consider run-time aliasing test between *_6 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_18
consider run-time aliasing test between *_6 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_6 and *_18
consider run-time aliasing test between *_6 and *_18
compiler-optimizations.cpp:4:22: note: dependence distance  = 0.
compiler-optimizations.cpp:4:22: note: dependence distance == 0 between *_9 and *_9
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_18
consider run-time aliasing test between *_9 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_18
consider run-time aliasing test between *_9 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_9 and *_18
consider run-time aliasing test between *_9 and *_18
compiler-optimizations.cpp:4:22: note: dependence distance  = 0.
compiler-optimizations.cpp:4:22: note: dependence distance == 0 between *_12 and *_12
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_12 and *_18
consider run-time aliasing test between *_12 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_12 and *_18
consider run-time aliasing test between *_12 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_12 and *_18
consider run-time aliasing test between *_12 and *_18
compiler-optimizations.cpp:4:22: note: dependence distance  = 0.
compiler-optimizations.cpp:4:22: note: dependence distance == 0 between *_15 and *_15
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_15 and *_18
consider run-time aliasing test between *_15 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_15 and *_18
consider run-time aliasing test between *_15 and *_18
compiler-optimizations.cpp:4:22: note: versioning for alias required: can't determine dependence between *_15 and *_18
consider run-time aliasing test between *_15 and *_18
compiler-optimizations.cpp:4:22: note: dependence distance  = 0.
compiler-optimizations.cpp:4:22: note: dependence distance == 0 between *_18 and *_18
compiler-optimizations.cpp:4:22: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:4:22: note: ==> examining phi: i_41 = PHI <0(5), i_37(6)>
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining phi: .MEM_40 = PHI <.MEM_23(D)(5), .MEM_36(6)>
compiler-optimizations.cpp:4:22: note: ==> examining statement: _1 = (long unsigned int) i_41;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _3 = a_25(D) + _2;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _5 = _4 + i_41;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: *_3 = _5;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _6 = b_27(D) + _2;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _7 = *_6;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _8 = _7 + i_41;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: *_6 = _8;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _9 = c_29(D) + _2;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _10 = *_9;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _11 = _10 + i_41;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: *_9 = _11;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _12 = x_31(D) + _2;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _14 = _13 + i_41;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: *_12 = _14;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _15 = y_33(D) + _2;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _16 = *_15;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _17 = _16 + i_41;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: *_15 = _17;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _18 = z_35(D) + _2;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: _19 = *_18;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: _20 = _19 + i_41;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: *_18 = _20;
compiler-optimizations.cpp:4:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:4:22: note: vectype: vector(4) int
compiler-optimizations.cpp:4:22: note: nunits = 4
compiler-optimizations.cpp:4:22: note: ==> examining statement: i_37 = i_41 + 1;
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: ==> examining statement: if (n_24(D) <= i_37)
compiler-optimizations.cpp:4:22: note: skip.
compiler-optimizations.cpp:4:22: note: vectorization factor = 4
compiler-optimizations.cpp:4:22: note: === vect_analyze_slp ===
compiler-optimizations.cpp:4:22: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:4:22: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:4:22: note: accesses have the same alignment: *_6 and *_6
compiler-optimizations.cpp:4:22: note: accesses have the same alignment: *_9 and *_9
compiler-optimizations.cpp:4:22: note: accesses have the same alignment: *_12 and *_12
compiler-optimizations.cpp:4:22: note: accesses have the same alignment: *_15 and *_15
compiler-optimizations.cpp:4:22: note: accesses have the same alignment: *_18 and *_18
compiler-optimizations.cpp:4:22: note: recording new base alignment for a_25(D)
compiler-optimizations.cpp:4:22: note:   alignment:    4
compiler-optimizations.cpp:4:22: note:   misalignment: 0
compiler-optimizations.cpp:4:22: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:4:22: note: recording new base alignment for b_27(D)
compiler-optimizations.cpp:4:22: note:   alignment:    4
compiler-optimizations.cpp:4:22: note:   misalignment: 0
compiler-optimizations.cpp:4:22: note:   based on:     _7 = *_6;
compiler-optimizations.cpp:4:22: note: recording new base alignment for c_29(D)
compiler-optimizations.cpp:4:22: note:   alignment:    4
compiler-optimizations.cpp:4:22: note:   misalignment: 0
compiler-optimizations.cpp:4:22: note:   based on:     _10 = *_9;
compiler-optimizations.cpp:4:22: note: recording new base alignment for x_31(D)
compiler-optimizations.cpp:4:22: note:   alignment:    4
compiler-optimizations.cpp:4:22: note:   misalignment: 0
compiler-optimizations.cpp:4:22: note:   based on:     _13 = *_12;
compiler-optimizations.cpp:4:22: note: recording new base alignment for y_33(D)
compiler-optimizations.cpp:4:22: note:   alignment:    4
compiler-optimizations.cpp:4:22: note:   misalignment: 0
compiler-optimizations.cpp:4:22: note:   based on:     _16 = *_15;
compiler-optimizations.cpp:4:22: note: recording new base alignment for z_35(D)
compiler-optimizations.cpp:4:22: note:   alignment:    4
compiler-optimizations.cpp:4:22: note:   misalignment: 0
compiler-optimizations.cpp:4:22: note:   based on:     _19 = *_18;
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_15
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_15
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_18
compiler-optimizations.cpp:4:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:4:22: note: can't force alignment of ref: *_18
compiler-optimizations.cpp:4:22: note: === vect_prune_runtime_alias_test_list ===
found equal ranges *_3, *_6 and *_3, *_6
found equal ranges *_3, *_6 and *_3, *_6
found equal ranges *_3, *_9 and *_3, *_9
found equal ranges *_3, *_9 and *_3, *_9
found equal ranges *_3, *_12 and *_3, *_12
found equal ranges *_3, *_12 and *_3, *_12
found equal ranges *_3, *_15 and *_3, *_15
found equal ranges *_3, *_15 and *_3, *_15
found equal ranges *_3, *_18 and *_3, *_18
found equal ranges *_3, *_18 and *_3, *_18
found equal ranges *_6, *_9 and *_6, *_9
found equal ranges *_6, *_9 and *_6, *_9
found equal ranges *_6, *_12 and *_6, *_12
found equal ranges *_6, *_12 and *_6, *_12
found equal ranges *_6, *_15 and *_6, *_15
found equal ranges *_6, *_15 and *_6, *_15
found equal ranges *_6, *_18 and *_6, *_18
found equal ranges *_6, *_18 and *_6, *_18
found equal ranges *_9, *_12 and *_9, *_12
found equal ranges *_9, *_12 and *_9, *_12
found equal ranges *_9, *_15 and *_9, *_15
found equal ranges *_9, *_15 and *_9, *_15
found equal ranges *_9, *_18 and *_9, *_18
found equal ranges *_9, *_18 and *_9, *_18
found equal ranges *_12, *_15 and *_12, *_15
found equal ranges *_12, *_15 and *_12, *_15
found equal ranges *_12, *_18 and *_12, *_18
found equal ranges *_12, *_18 and *_12, *_18
found equal ranges *_15, *_18 and *_15, *_18
found equal ranges *_15, *_18 and *_15, *_18
compiler-optimizations.cpp:4:22: note: improved number of alias checks from 45 to 15
compiler-optimizations.cpp:4:22: note: number of versioning for alias run-time tests exceeds 10 (--param vect-max-version-for-alias-checks)
compiler-optimizations.cpp:3:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:3:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:4:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:4:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:4:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_6 = _8;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_9 = _11;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_12 = _14;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _16 = *_15;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_15 = _17;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: _19 = *_18;
vector(4) int
compiler-optimizations.cpp:4:22: note: got vectype for stmt: *_18 = _20;
vector(4) int
compiler-optimizations.cpp:4:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:4:22: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:4:22: note: not consecutive access *_3 = _5;
compiler-optimizations.cpp:4:22: note: not consecutive access _7 = *_6;
compiler-optimizations.cpp:4:22: note: not consecutive access *_6 = _8;
compiler-optimizations.cpp:4:22: note: not consecutive access _10 = *_9;
compiler-optimizations.cpp:4:22: note: not consecutive access *_9 = _11;
compiler-optimizations.cpp:4:22: note: not consecutive access _13 = *_12;
compiler-optimizations.cpp:4:22: note: not consecutive access *_12 = _14;
compiler-optimizations.cpp:4:22: note: not consecutive access _16 = *_15;
compiler-optimizations.cpp:4:22: note: not consecutive access *_15 = _17;
compiler-optimizations.cpp:4:22: note: not consecutive access _19 = *_18;
compiler-optimizations.cpp:4:22: note: not consecutive access *_18 = _20;
compiler-optimizations.cpp:4:22: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:4:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:4:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:12:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:12:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_15 and *_26
consider run-time aliasing test between *_3 and *_26
consider run-time aliasing test between *_6 and *_26
consider run-time aliasing test between *_9 and *_26
consider run-time aliasing test between *_12 and *_26
consider run-time aliasing test between *_3 and *_26
consider run-time aliasing test between *_3 and *_15
consider run-time aliasing test between *_3 and *_6
consider run-time aliasing test between *_3 and *_9
consider run-time aliasing test between *_3 and *_12
consider run-time aliasing test between *_3 and *_26
consider run-time aliasing test between *_3 and *_26
consider run-time aliasing test between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
consider run-time aliasing test between *_6 and *_15
consider run-time aliasing test between *_6 and *_3
consider run-time aliasing test between *_6 and *_9
consider run-time aliasing test between *_6 and *_12
consider run-time aliasing test between *_6 and *_26
consider run-time aliasing test between *_6 and *_26
consider run-time aliasing test between *_6 and *_26
consider run-time aliasing test between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
consider run-time aliasing test between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
consider run-time aliasing test between *_15 and *_3
consider run-time aliasing test between *_15 and *_6
consider run-time aliasing test between *_15 and *_9
consider run-time aliasing test between *_15 and *_12
consider run-time aliasing test between *_15 and *_26
consider run-time aliasing test between *_15 and *_26
consider run-time aliasing test between *_15 and *_26
consider run-time aliasing test between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
consider run-time aliasing test between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
consider run-time aliasing test between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
consider run-time aliasing test between *_12 and *_3
consider run-time aliasing test between *_12 and *_6
consider run-time aliasing test between *_12 and *_9
consider run-time aliasing test between *_12 and *_26
consider run-time aliasing test between *_12 and *_26
consider run-time aliasing test between *_12 and *_26
consider run-time aliasing test between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
consider run-time aliasing test between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
consider run-time aliasing test between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
consider run-time aliasing test between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
consider run-time aliasing test between *_9 and *_3
consider run-time aliasing test between *_9 and *_6
consider run-time aliasing test between *_9 and *_12
consider run-time aliasing test between *_9 and *_26
consider run-time aliasing test between *_9 and *_26
consider run-time aliasing test between *_9 and *_26

Analyzing loop at compiler-optimizations.cpp:15
compiler-optimizations.cpp:15:22: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:15:22: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:15:22: note: === get_loop_niters ===
compiler-optimizations.cpp:15:22: note: Symbolic number of iterations is (unsigned int) n_32(D)
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_6 = _8;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_9 = _11;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_12 = _14;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _16 = *_15;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_15 = _17;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _18 = *_3;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _19 = *_6;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _21 = *_9;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _23 = *_12;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _27 = *_26;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_26 = _28;
vector(4) int
compiler-optimizations.cpp:15:22: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:15:22: note: Analyze phi: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:15:22: note: step: 1,  init: 0
compiler-optimizations.cpp:15:22: note: Detected induction.
compiler-optimizations.cpp:15:22: note: Analyze phi: .MEM_48 = PHI <.MEM_31(D)(5), .MEM_44(6)>
compiler-optimizations.cpp:15:22: note: === vect_pattern_recog ===
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:15:22: note: def_stmt: _1 = (long unsigned int) i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_49
compiler-optimizations.cpp:15:22: note: def_stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: type of def: induction
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:15:22: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:15:22: note: init: phi relevant? i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: init: phi relevant? .MEM_48 = PHI <.MEM_31(D)(5), .MEM_44(6)>
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _1 = (long unsigned int) i_49;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _3 = a_33(D) + _2;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _5 = _4 + i_49;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? *_3 = _5;
compiler-optimizations.cpp:15:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: *_3 = _5;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _6 = b_35(D) + _2;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _7 = *_6;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _8 = _7 + i_49;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? *_6 = _8;
compiler-optimizations.cpp:15:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: *_6 = _8;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _9 = c_37(D) + _2;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _10 = *_9;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _11 = _10 + i_49;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? *_9 = _11;
compiler-optimizations.cpp:15:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: *_9 = _11;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _12 = x_39(D) + _2;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _13 = *_12;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _14 = _13 + i_49;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? *_12 = _14;
compiler-optimizations.cpp:15:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: *_12 = _14;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _15 = y_41(D) + _2;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _16 = *_15;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? *_15 = _17;
compiler-optimizations.cpp:15:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: *_15 = _17;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _18 = *_3;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _19 = *_6;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _20 = _18 + _19;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _21 = *_9;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _22 = _20 + _21;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _23 = *_12;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _24 = _22 + _23;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _25 = _17 + _24;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _26 = z_43(D) + _2;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _27 = *_26;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? _28 = _25 + _27;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? *_26 = _28;
compiler-optimizations.cpp:15:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: *_26 = _28;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? i_45 = i_49 + 1;
compiler-optimizations.cpp:15:22: note: init: stmt relevant? if (n_32(D) <= i_45)
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: *_26 = _28;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _28
compiler-optimizations.cpp:15:22: note: def_stmt: _28 = _25 + _27;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _28 = _25 + _27;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _28 = _25 + _27;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _25
compiler-optimizations.cpp:15:22: note: def_stmt: _25 = _17 + _24;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _25 = _17 + _24;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _27
compiler-optimizations.cpp:15:22: note: def_stmt: _27 = *_26;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _27 = *_26;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _27 = *_26;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _25 = _17 + _24;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:15:22: note: def_stmt: _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _24
compiler-optimizations.cpp:15:22: note: def_stmt: _24 = _22 + _23;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _24 = _22 + _23;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _24 = _22 + _23;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _22
compiler-optimizations.cpp:15:22: note: def_stmt: _22 = _20 + _21;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _22 = _20 + _21;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _23
compiler-optimizations.cpp:15:22: note: def_stmt: _23 = *_12;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _23 = *_12;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _23 = *_12;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _22 = _20 + _21;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _20
compiler-optimizations.cpp:15:22: note: def_stmt: _20 = _18 + _19;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _20 = _18 + _19;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _21
compiler-optimizations.cpp:15:22: note: def_stmt: _21 = *_9;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _21 = *_9;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _21 = *_9;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _20 = _18 + _19;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:15:22: note: def_stmt: _18 = *_3;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _18 = *_3;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _19
compiler-optimizations.cpp:15:22: note: def_stmt: _19 = *_6;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _19 = *_6;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _19 = *_6;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _18 = *_3;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:15:22: note: def_stmt: _16 = *_15;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _16 = *_15;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_49
compiler-optimizations.cpp:15:22: note: def_stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: type of def: induction
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:15:22: note: def_stmt: i_45 = i_49 + 1;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: induction value on backedge.
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _16 = *_15;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: *_15 = _17;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:15:22: note: def_stmt: _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: already marked relevant/live.
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: *_12 = _14;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:15:22: note: def_stmt: _14 = _13 + i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _14 = _13 + i_49;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _14 = _13 + i_49;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:15:22: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _13 = *_12;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_49
compiler-optimizations.cpp:15:22: note: def_stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: type of def: induction
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: already marked relevant/live.
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _13 = *_12;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: *_9 = _11;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:15:22: note: def_stmt: _11 = _10 + i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _11 = _10 + i_49;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _11 = _10 + i_49;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:15:22: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _10 = *_9;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_49
compiler-optimizations.cpp:15:22: note: def_stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: type of def: induction
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: already marked relevant/live.
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _10 = *_9;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: *_6 = _8;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:15:22: note: def_stmt: _8 = _7 + i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _8 = _7 + i_49;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _8 = _7 + i_49;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:15:22: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _7 = *_6;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_49
compiler-optimizations.cpp:15:22: note: def_stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: type of def: induction
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: already marked relevant/live.
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _7 = *_6;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: *_3 = _5;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:15:22: note: def_stmt: _5 = _4 + i_49;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _5 = _4 + i_49;
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _5 = _4 + i_49;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:15:22: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:15:22: note: type of def: internal
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:15:22: note: vect_is_simple_use: operand i_49
compiler-optimizations.cpp:15:22: note: def_stmt: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: type of def: induction
compiler-optimizations.cpp:15:22: note: mark relevant 5, live 0: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: already marked relevant/live.
compiler-optimizations.cpp:15:22: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_26
consider run-time aliasing test between *_3 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_15
consider run-time aliasing test between *_3 and *_15
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_6
consider run-time aliasing test between *_3 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_9
consider run-time aliasing test between *_3 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_26
consider run-time aliasing test between *_3 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_26
consider run-time aliasing test between *_3 and *_26
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_6 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_26
consider run-time aliasing test between *_6 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_15
consider run-time aliasing test between *_6 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_3
consider run-time aliasing test between *_6 and *_3
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_6 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_9
consider run-time aliasing test between *_6 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_12
consider run-time aliasing test between *_6 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_26
consider run-time aliasing test between *_6 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_26
consider run-time aliasing test between *_6 and *_26
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_9 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_26
consider run-time aliasing test between *_9 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_15
consider run-time aliasing test between *_9 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_3
consider run-time aliasing test between *_9 and *_3
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_6
consider run-time aliasing test between *_9 and *_6
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_9 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_12
consider run-time aliasing test between *_9 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_26
consider run-time aliasing test between *_9 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_26
consider run-time aliasing test between *_9 and *_26
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_12 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_26
consider run-time aliasing test between *_12 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_15
consider run-time aliasing test between *_12 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_3
consider run-time aliasing test between *_12 and *_3
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_6
consider run-time aliasing test between *_12 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_9
consider run-time aliasing test between *_12 and *_9
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_12 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_26
consider run-time aliasing test between *_12 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_26
consider run-time aliasing test between *_12 and *_26
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_15 and *_15
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_26
consider run-time aliasing test between *_15 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_3
consider run-time aliasing test between *_15 and *_3
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_6
consider run-time aliasing test between *_15 and *_6
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_9
consider run-time aliasing test between *_15 and *_9
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_12
consider run-time aliasing test between *_15 and *_12
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_26
consider run-time aliasing test between *_15 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_15 and *_26
consider run-time aliasing test between *_15 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_3 and *_26
consider run-time aliasing test between *_3 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_6 and *_26
consider run-time aliasing test between *_6 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_9 and *_26
consider run-time aliasing test between *_9 and *_26
compiler-optimizations.cpp:15:22: note: versioning for alias required: can't determine dependence between *_12 and *_26
consider run-time aliasing test between *_12 and *_26
compiler-optimizations.cpp:15:22: note: dependence distance  = 0.
compiler-optimizations.cpp:15:22: note: dependence distance == 0 between *_26 and *_26
compiler-optimizations.cpp:15:22: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:15:22: note: ==> examining phi: i_49 = PHI <0(5), i_45(6)>
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining phi: .MEM_48 = PHI <.MEM_31(D)(5), .MEM_44(6)>
compiler-optimizations.cpp:15:22: note: ==> examining statement: _1 = (long unsigned int) i_49;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _3 = a_33(D) + _2;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _5 = _4 + i_49;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: *_3 = _5;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _6 = b_35(D) + _2;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _7 = *_6;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _8 = _7 + i_49;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: *_6 = _8;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _9 = c_37(D) + _2;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _10 = *_9;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _11 = _10 + i_49;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: *_9 = _11;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _12 = x_39(D) + _2;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _14 = _13 + i_49;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: *_12 = _14;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _15 = y_41(D) + _2;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _16 = *_15;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _17 = _16 + i_49;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: *_15 = _17;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _18 = *_3;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _19 = *_6;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _20 = _18 + _19;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _21 = *_9;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _22 = _20 + _21;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _23 = *_12;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _24 = _22 + _23;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _25 = _17 + _24;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _26 = z_43(D) + _2;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: _27 = *_26;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: _28 = _25 + _27;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: *_26 = _28;
compiler-optimizations.cpp:15:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:15:22: note: vectype: vector(4) int
compiler-optimizations.cpp:15:22: note: nunits = 4
compiler-optimizations.cpp:15:22: note: ==> examining statement: i_45 = i_49 + 1;
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: ==> examining statement: if (n_32(D) <= i_45)
compiler-optimizations.cpp:15:22: note: skip.
compiler-optimizations.cpp:15:22: note: vectorization factor = 4
compiler-optimizations.cpp:15:22: note: === vect_analyze_slp ===
compiler-optimizations.cpp:15:22: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_6 and *_6
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_6 and *_6
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_6 and *_6
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_9 and *_9
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_9 and *_9
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_9 and *_9
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_12 and *_12
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_12 and *_12
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_12 and *_12
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_15 and *_15
compiler-optimizations.cpp:15:22: note: accesses have the same alignment: *_26 and *_26
compiler-optimizations.cpp:15:22: note: recording new base alignment for a_33(D)
compiler-optimizations.cpp:15:22: note:   alignment:    4
compiler-optimizations.cpp:15:22: note:   misalignment: 0
compiler-optimizations.cpp:15:22: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:15:22: note: recording new base alignment for b_35(D)
compiler-optimizations.cpp:15:22: note:   alignment:    4
compiler-optimizations.cpp:15:22: note:   misalignment: 0
compiler-optimizations.cpp:15:22: note:   based on:     _7 = *_6;
compiler-optimizations.cpp:15:22: note: recording new base alignment for c_37(D)
compiler-optimizations.cpp:15:22: note:   alignment:    4
compiler-optimizations.cpp:15:22: note:   misalignment: 0
compiler-optimizations.cpp:15:22: note:   based on:     _10 = *_9;
compiler-optimizations.cpp:15:22: note: recording new base alignment for x_39(D)
compiler-optimizations.cpp:15:22: note:   alignment:    4
compiler-optimizations.cpp:15:22: note:   misalignment: 0
compiler-optimizations.cpp:15:22: note:   based on:     _13 = *_12;
compiler-optimizations.cpp:15:22: note: recording new base alignment for y_41(D)
compiler-optimizations.cpp:15:22: note:   alignment:    4
compiler-optimizations.cpp:15:22: note:   misalignment: 0
compiler-optimizations.cpp:15:22: note:   based on:     _16 = *_15;
compiler-optimizations.cpp:15:22: note: recording new base alignment for z_43(D)
compiler-optimizations.cpp:15:22: note:   alignment:    4
compiler-optimizations.cpp:15:22: note:   misalignment: 0
compiler-optimizations.cpp:15:22: note:   based on:     _27 = *_26;
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_15
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_15
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_26
compiler-optimizations.cpp:15:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:15:22: note: can't force alignment of ref: *_26
compiler-optimizations.cpp:15:22: note: === vect_prune_runtime_alias_test_list ===
found equal ranges *_3, *_6 and *_3, *_6
found equal ranges *_3, *_6 and *_3, *_6
found equal ranges *_3, *_6 and *_3, *_6
found equal ranges *_3, *_6 and *_3, *_6
found equal ranges *_3, *_9 and *_3, *_9
found equal ranges *_3, *_9 and *_3, *_9
found equal ranges *_3, *_9 and *_3, *_9
found equal ranges *_3, *_9 and *_3, *_9
found equal ranges *_3, *_12 and *_3, *_12
found equal ranges *_3, *_12 and *_3, *_12
found equal ranges *_3, *_12 and *_3, *_12
found equal ranges *_3, *_12 and *_3, *_12
found equal ranges *_3, *_15 and *_3, *_15
found equal ranges *_3, *_15 and *_3, *_15
found equal ranges *_3, *_15 and *_3, *_15
found equal ranges *_3, *_26 and *_3, *_26
found equal ranges *_3, *_26 and *_3, *_26
found equal ranges *_3, *_26 and *_3, *_26
found equal ranges *_6, *_9 and *_6, *_9
found equal ranges *_6, *_9 and *_6, *_9
found equal ranges *_6, *_9 and *_6, *_9
found equal ranges *_6, *_9 and *_6, *_9
found equal ranges *_6, *_12 and *_6, *_12
found equal ranges *_6, *_12 and *_6, *_12
found equal ranges *_6, *_12 and *_6, *_12
found equal ranges *_6, *_12 and *_6, *_12
found equal ranges *_6, *_15 and *_6, *_15
found equal ranges *_6, *_15 and *_6, *_15
found equal ranges *_6, *_15 and *_6, *_15
found equal ranges *_6, *_26 and *_6, *_26
found equal ranges *_6, *_26 and *_6, *_26
found equal ranges *_6, *_26 and *_6, *_26
found equal ranges *_9, *_12 and *_9, *_12
found equal ranges *_9, *_12 and *_9, *_12
found equal ranges *_9, *_12 and *_9, *_12
found equal ranges *_9, *_12 and *_9, *_12
found equal ranges *_9, *_15 and *_9, *_15
found equal ranges *_9, *_15 and *_9, *_15
found equal ranges *_9, *_15 and *_9, *_15
found equal ranges *_9, *_26 and *_9, *_26
found equal ranges *_9, *_26 and *_9, *_26
found equal ranges *_9, *_26 and *_9, *_26
found equal ranges *_12, *_15 and *_12, *_15
found equal ranges *_12, *_15 and *_12, *_15
found equal ranges *_12, *_15 and *_12, *_15
found equal ranges *_12, *_26 and *_12, *_26
found equal ranges *_12, *_26 and *_12, *_26
found equal ranges *_12, *_26 and *_12, *_26
found equal ranges *_15, *_26 and *_15, *_26
found equal ranges *_15, *_26 and *_15, *_26
compiler-optimizations.cpp:15:22: note: improved number of alias checks from 65 to 15
compiler-optimizations.cpp:15:22: note: number of versioning for alias run-time tests exceeds 10 (--param vect-max-version-for-alias-checks)
compiler-optimizations.cpp:14:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:14:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:15:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:15:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:15:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_6 = _8;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_9 = _11;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_12 = _14;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _16 = *_15;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_15 = _17;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _18 = *_3;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _19 = *_6;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _21 = *_9;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _23 = *_12;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: _27 = *_26;
vector(4) int
compiler-optimizations.cpp:15:22: note: got vectype for stmt: *_26 = _28;
vector(4) int
compiler-optimizations.cpp:15:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:15:22: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:15:22: note: not consecutive access _18 = *_3;
compiler-optimizations.cpp:15:22: note: not consecutive access *_3 = _5;
compiler-optimizations.cpp:15:22: note: not consecutive access _7 = *_6;
compiler-optimizations.cpp:15:22: note: not consecutive access _19 = *_6;
compiler-optimizations.cpp:15:22: note: not consecutive access *_6 = _8;
compiler-optimizations.cpp:15:22: note: not consecutive access _10 = *_9;
compiler-optimizations.cpp:15:22: note: not consecutive access _21 = *_9;
compiler-optimizations.cpp:15:22: note: not consecutive access *_9 = _11;
compiler-optimizations.cpp:15:22: note: not consecutive access _13 = *_12;
compiler-optimizations.cpp:15:22: note: not consecutive access _23 = *_12;
compiler-optimizations.cpp:15:22: note: not consecutive access *_12 = _14;
compiler-optimizations.cpp:15:22: note: not consecutive access _16 = *_15;
compiler-optimizations.cpp:15:22: note: not consecutive access *_15 = _17;
compiler-optimizations.cpp:15:22: note: not consecutive access _27 = *_26;
compiler-optimizations.cpp:15:22: note: not consecutive access *_26 = _28;
compiler-optimizations.cpp:15:22: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:15:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:15:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:23:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:23:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:26
compiler-optimizations.cpp:26:22: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:26:22: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:26:22: note: === get_loop_niters ===
compiler-optimizations.cpp:26:22: note: Symbolic number of iterations is (unsigned int) n_28(D)
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_6 = _8;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_9 = _11;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_12 = _14;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _16 = *_15;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_15 = _17;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _23 = *_22;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_22 = _24;
vector(4) int
compiler-optimizations.cpp:26:22: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:26:22: note: Analyze phi: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:26:22: note: step: 1,  init: 0
compiler-optimizations.cpp:26:22: note: Detected induction.
compiler-optimizations.cpp:26:22: note: Analyze phi: .MEM_44 = PHI <.MEM_27(D)(5), .MEM_40(6)>
compiler-optimizations.cpp:26:22: note: === vect_pattern_recog ===
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:26:22: note: def_stmt: _1 = (long unsigned int) i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:26:22: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:26:22: note: init: phi relevant? i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: init: phi relevant? .MEM_44 = PHI <.MEM_27(D)(5), .MEM_40(6)>
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _1 = (long unsigned int) i_45;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _3 = a_29(D) + _2;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? *_3 = _5;
compiler-optimizations.cpp:26:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: *_3 = _5;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _6 = b_31(D) + _2;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _7 = *_6;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? *_6 = _8;
compiler-optimizations.cpp:26:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: *_6 = _8;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _9 = c_33(D) + _2;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _10 = *_9;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? *_9 = _11;
compiler-optimizations.cpp:26:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: *_9 = _11;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _12 = x_35(D) + _2;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _13 = *_12;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? *_12 = _14;
compiler-optimizations.cpp:26:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: *_12 = _14;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _15 = y_37(D) + _2;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _16 = *_15;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? *_15 = _17;
compiler-optimizations.cpp:26:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: *_15 = _17;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _22 = z_39(D) + _2;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _23 = *_22;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? *_22 = _24;
compiler-optimizations.cpp:26:22: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: *_22 = _24;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? i_41 = i_45 + 1;
compiler-optimizations.cpp:26:22: note: init: stmt relevant? if (n_28(D) <= i_41)
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: *_22 = _24;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _24
compiler-optimizations.cpp:26:22: note: def_stmt: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _21
compiler-optimizations.cpp:26:22: note: def_stmt: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _23
compiler-optimizations.cpp:26:22: note: def_stmt: _23 = *_22;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _23 = *_22;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _23 = *_22;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _20
compiler-optimizations.cpp:26:22: note: def_stmt: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _19
compiler-optimizations.cpp:26:22: note: def_stmt: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:26:22: note: def_stmt: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:26:22: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _7 = *_6;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_41
compiler-optimizations.cpp:26:22: note: def_stmt: i_41 = i_45 + 1;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: induction value on backedge.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _7 = *_6;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:26:22: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:26:22: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _10 = *_9;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _10 = *_9;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:26:22: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _13 = *_12;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _13 = *_12;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:26:22: note: def_stmt: _16 = *_15;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _16 = *_15;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: _16 = *_15;
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: *_15 = _17;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: *_12 = _14;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: *_9 = _11;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: *_6 = _8;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: worklist: examine stmt: *_3 = _5;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: mark relevant 5, live 0: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: already marked relevant/live.
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:26:22: note: dependence distance  = 0.
compiler-optimizations.cpp:26:22: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:26:22: note: dependence distance  = 0.
compiler-optimizations.cpp:26:22: note: dependence distance == 0 between *_6 and *_6
compiler-optimizations.cpp:26:22: note: dependence distance  = 0.
compiler-optimizations.cpp:26:22: note: dependence distance == 0 between *_9 and *_9
compiler-optimizations.cpp:26:22: note: dependence distance  = 0.
compiler-optimizations.cpp:26:22: note: dependence distance == 0 between *_12 and *_12
compiler-optimizations.cpp:26:22: note: dependence distance  = 0.
compiler-optimizations.cpp:26:22: note: dependence distance == 0 between *_15 and *_15
compiler-optimizations.cpp:26:22: note: dependence distance  = 0.
compiler-optimizations.cpp:26:22: note: dependence distance == 0 between *_22 and *_22
compiler-optimizations.cpp:26:22: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:26:22: note: ==> examining phi: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining phi: .MEM_44 = PHI <.MEM_27(D)(5), .MEM_40(6)>
compiler-optimizations.cpp:26:22: note: ==> examining statement: _1 = (long unsigned int) i_45;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _3 = a_29(D) + _2;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_3 = _5;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _6 = b_31(D) + _2;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _7 = *_6;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_6 = _8;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _9 = c_33(D) + _2;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _10 = *_9;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_9 = _11;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _12 = x_35(D) + _2;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_12 = _14;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _15 = y_37(D) + _2;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _16 = *_15;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_15 = _17;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _22 = z_39(D) + _2;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _23 = *_22;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_22 = _24;
compiler-optimizations.cpp:26:22: note: get vectype for scalar type:  int
compiler-optimizations.cpp:26:22: note: vectype: vector(4) int
compiler-optimizations.cpp:26:22: note: nunits = 4
compiler-optimizations.cpp:26:22: note: ==> examining statement: i_41 = i_45 + 1;
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: ==> examining statement: if (n_28(D) <= i_41)
compiler-optimizations.cpp:26:22: note: skip.
compiler-optimizations.cpp:26:22: note: vectorization factor = 4
compiler-optimizations.cpp:26:22: note: === vect_analyze_slp ===
compiler-optimizations.cpp:26:22: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:26:22: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:26:22: note: accesses have the same alignment: *_6 and *_6
compiler-optimizations.cpp:26:22: note: accesses have the same alignment: *_9 and *_9
compiler-optimizations.cpp:26:22: note: accesses have the same alignment: *_12 and *_12
compiler-optimizations.cpp:26:22: note: accesses have the same alignment: *_15 and *_15
compiler-optimizations.cpp:26:22: note: accesses have the same alignment: *_22 and *_22
compiler-optimizations.cpp:26:22: note: recording new base alignment for a_29(D)
compiler-optimizations.cpp:26:22: note:   alignment:    4
compiler-optimizations.cpp:26:22: note:   misalignment: 0
compiler-optimizations.cpp:26:22: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:26:22: note: recording new base alignment for b_31(D)
compiler-optimizations.cpp:26:22: note:   alignment:    4
compiler-optimizations.cpp:26:22: note:   misalignment: 0
compiler-optimizations.cpp:26:22: note:   based on:     _7 = *_6;
compiler-optimizations.cpp:26:22: note: recording new base alignment for c_33(D)
compiler-optimizations.cpp:26:22: note:   alignment:    4
compiler-optimizations.cpp:26:22: note:   misalignment: 0
compiler-optimizations.cpp:26:22: note:   based on:     _10 = *_9;
compiler-optimizations.cpp:26:22: note: recording new base alignment for x_35(D)
compiler-optimizations.cpp:26:22: note:   alignment:    4
compiler-optimizations.cpp:26:22: note:   misalignment: 0
compiler-optimizations.cpp:26:22: note:   based on:     _13 = *_12;
compiler-optimizations.cpp:26:22: note: recording new base alignment for y_37(D)
compiler-optimizations.cpp:26:22: note:   alignment:    4
compiler-optimizations.cpp:26:22: note:   misalignment: 0
compiler-optimizations.cpp:26:22: note:   based on:     _16 = *_15;
compiler-optimizations.cpp:26:22: note: recording new base alignment for z_39(D)
compiler-optimizations.cpp:26:22: note:   alignment:    4
compiler-optimizations.cpp:26:22: note:   misalignment: 0
compiler-optimizations.cpp:26:22: note:   based on:     _23 = *_22;
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_6
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_15
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_15
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_22
compiler-optimizations.cpp:26:22: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:26:22: note: can't force alignment of ref: *_22
compiler-optimizations.cpp:26:22: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:26:22: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:26:22: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:26:22: note: Analyze phi: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: Analyze phi: .MEM_44 = PHI <.MEM_27(D)(5), .MEM_40(6)>
compiler-optimizations.cpp:26:22: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 48, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 72, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 84, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 96, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 108, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 132, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 144, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 48, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 72, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 84, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 96, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 108, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 132, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 144, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 48, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 72, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 84, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 96, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 108, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 132, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_get_data_access_cost: inside_cost = 144, outside_cost = 0.
compiler-optimizations.cpp:26:22: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:26:22: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:26:22: note: examining phi: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: === vectorizable_induction ===
compiler-optimizations.cpp:26:22: note: vect_model_induction_cost: inside_cost = 4, prologue_cost = 8 .
compiler-optimizations.cpp:26:22: note: examining phi: .MEM_44 = PHI <.MEM_27(D)(5), .MEM_40(6)>
compiler-optimizations.cpp:26:22: note: ==> examining statement: _1 = (long unsigned int) i_45;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _3 = a_29(D) + _2;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:26:22: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_3 = _5;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _6 = b_31(D) + _2;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _7 = *_6;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_6
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_6
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:26:22: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_6 = _8;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _9 = c_33(D) + _2;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _10 = *_9;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_9
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_9
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:26:22: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_9 = _11;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _12 = x_35(D) + _2;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_12
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_12
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:26:22: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_12 = _14;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _15 = y_37(D) + _2;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _16 = *_15;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_15
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_15
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:26:22: note: def_stmt: _16 = *_15;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_15 = _17;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:26:22: note: def_stmt: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _19
compiler-optimizations.cpp:26:22: note: def_stmt: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _20
compiler-optimizations.cpp:26:22: note: def_stmt: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _22 = z_39(D) + _2;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: _23 = *_22;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_22
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand *_22
compiler-optimizations.cpp:26:22: note: not ssa-name.
compiler-optimizations.cpp:26:22: note: use not simple.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _21
compiler-optimizations.cpp:26:22: note: def_stmt: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _23
compiler-optimizations.cpp:26:22: note: def_stmt: _23 = *_22;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: === vectorizable_operation ===
compiler-optimizations.cpp:26:22: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: *_22 = _24;
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _24
compiler-optimizations.cpp:26:22: note: def_stmt: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:26:22: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:26:22: note: ==> examining statement: i_41 = i_45 + 1;
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: ==> examining statement: if (n_28(D) <= i_41)
compiler-optimizations.cpp:26:22: note: irrelevant.
compiler-optimizations.cpp:26:22: note: not using a fully-masked loop.
compiler-optimizations.cpp:26:22: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:26:22: note: Cost model analysis: 
  Vector inside of loop cost: 188
  Vector prologue cost: 40
  Vector epilogue cost: 368
  Scalar iteration cost: 184
  Scalar outside cost: 32
  Vector outside cost: 408
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 3
compiler-optimizations.cpp:26:22: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:26:22: note:   Static estimate profitability threshold = 4
compiler-optimizations.cpp:26:22: note: epilog loop required
compiler-optimizations.cpp:26:22: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:26:22: note: Analyze phi: i_45 = PHI <0(5), i_41(6)>
compiler-optimizations.cpp:26:22: note: Analyze phi: .MEM_44 = PHI <.MEM_27(D)(5), .MEM_40(6)>
compiler-optimizations.cpp:26:22: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:26:22: note: loop vectorized
compiler-optimizations.cpp:26:22: note: === vec_transform_loop ===
compiler-optimizations.cpp:26:22: note: Profitability threshold is 4 loop iterations.
split exit edge
compiler-optimizations.cpp:26:22: note: vect_update_ivs_after_vectorizer: phi: i_45 = PHI <i_41(6), 0(9)>
compiler-optimizations.cpp:26:22: note: vect_update_ivs_after_vectorizer: phi: .MEM_44 = PHI <.MEM_40(6), .MEM_27(D)(9)>
compiler-optimizations.cpp:26:22: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:26:22: note: ------>vectorizing phi: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: transform phi.
compiler-optimizations.cpp:26:22: note: transform induction phi.
compiler-optimizations.cpp:26:22: note: created new init_stmt: vect_cst__87 = { 4, 4, 4, 4 };
compiler-optimizations.cpp:26:22: note: transform induction: created def-use cycle: vect_vec_iv_.39_88 = PHI <vect_vec_iv_.39_89(6), { 0, 1, 2, 3 }(16)>
vect_vec_iv_.39_89 = vect_vec_iv_.39_88 + vect_cst__87;
compiler-optimizations.cpp:26:22: note: ------>vectorizing phi: .MEM_44 = PHI <.MEM_40(6), .MEM_27(D)(16)>
compiler-optimizations.cpp:26:22: note: ------>vectorizing phi: vect_vec_iv_.39_88 = PHI <vect_vec_iv_.39_89(6), { 0, 1, 2, 3 }(16)>
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vect_vec_iv_.39_89 = vect_vec_iv_.39_88 + vect_cst__87;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _1 = (long unsigned int) i_45;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _3 = a_29(D) + _2;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _4 = *_3;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: transform load. ncopies = 1
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_29(D)
compiler-optimizations.cpp:26:22: note: created a_29(D)
compiler-optimizations.cpp:26:22: note: add new stmt: vect__4.42_92 = MEM[(int *)vectp_a.40_90];
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:26:22: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:26:22: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: i_45
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note:   def_stmt =  i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: add new stmt: vect__5.43_93 = vect__4.42_92 + vect_vec_iv_.39_88;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: *_3 = _5;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform store. ncopies = 1
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _5
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_29(D)
compiler-optimizations.cpp:26:22: note: created a_29(D)
compiler-optimizations.cpp:26:22: note: add new stmt: MEM[(int *)vectp_a.44_94] = vect__5.43_93;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _6 = b_31(D) + _2;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _7 = *_6;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: transform load. ncopies = 1
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_31(D)
compiler-optimizations.cpp:26:22: note: created b_31(D)
compiler-optimizations.cpp:26:22: note: add new stmt: vect__7.48_99 = MEM[(int *)vectp_b.46_97];
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:26:22: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _7
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:26:22: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _7 = *_6;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: i_45
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note:   def_stmt =  i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: add new stmt: vect__8.49_100 = vect__7.48_99 + vect_vec_iv_.39_88;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: *_6 = _8;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform store. ncopies = 1
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _8
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_31(D)
compiler-optimizations.cpp:26:22: note: created b_31(D)
compiler-optimizations.cpp:26:22: note: add new stmt: MEM[(int *)vectp_b.50_101] = vect__8.49_100;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _9 = c_33(D) + _2;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _10 = *_9;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: transform load. ncopies = 1
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_33(D)
compiler-optimizations.cpp:26:22: note: created c_33(D)
compiler-optimizations.cpp:26:22: note: add new stmt: vect__10.54_106 = MEM[(int *)vectp_c.52_104];
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:26:22: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _10
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:26:22: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _10 = *_9;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: i_45
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note:   def_stmt =  i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: add new stmt: vect__11.55_107 = vect__10.54_106 + vect_vec_iv_.39_88;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: *_9 = _11;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform store. ncopies = 1
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _11
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_33(D)
compiler-optimizations.cpp:26:22: note: created c_33(D)
compiler-optimizations.cpp:26:22: note: add new stmt: MEM[(int *)vectp_c.56_108] = vect__11.55_107;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _12 = x_35(D) + _2;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _13 = *_12;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: transform load. ncopies = 1
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *x_35(D)
compiler-optimizations.cpp:26:22: note: created x_35(D)
compiler-optimizations.cpp:26:22: note: add new stmt: vect__13.60_113 = MEM[(int *)vectp_x.58_111];
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:26:22: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _13
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:26:22: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _13 = *_12;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: i_45
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note:   def_stmt =  i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: add new stmt: vect__14.61_114 = vect__13.60_113 + vect_vec_iv_.39_88;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: *_12 = _14;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform store. ncopies = 1
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _14
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *x_35(D)
compiler-optimizations.cpp:26:22: note: created x_35(D)
compiler-optimizations.cpp:26:22: note: add new stmt: MEM[(int *)vectp_x.62_115] = vect__14.61_114;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _15 = y_37(D) + _2;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _16 = *_15;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: transform load. ncopies = 1
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *y_37(D)
compiler-optimizations.cpp:26:22: note: created y_37(D)
compiler-optimizations.cpp:26:22: note: add new stmt: vect__16.66_120 = MEM[(int *)vectp_y.64_118];
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:26:22: note: def_stmt: _16 = *_15;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _16
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:26:22: note: def_stmt: _16 = *_15;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _16 = *_15;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: i_45
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand i_45
compiler-optimizations.cpp:26:22: note: def_stmt: i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: type of def: induction
compiler-optimizations.cpp:26:22: note:   def_stmt =  i_45 = PHI <i_41(6), 0(16)>
compiler-optimizations.cpp:26:22: note: add new stmt: vect__17.67_121 = vect__16.66_120 + vect_vec_iv_.39_88;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: *_15 = _17;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform store. ncopies = 1
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _17
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *y_37(D)
compiler-optimizations.cpp:26:22: note: created y_37(D)
compiler-optimizations.cpp:26:22: note: add new stmt: MEM[(int *)vectp_y.68_122] = vect__17.67_121;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _5
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:26:22: note: def_stmt: _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _5 = _4 + i_45;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _8
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:26:22: note: def_stmt: _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _8 = _7 + i_45;
compiler-optimizations.cpp:26:22: note: add new stmt: vect__18.70_125 = vect__5.43_93 + vect__8.49_100;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:26:22: note: def_stmt: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _11
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:26:22: note: def_stmt: _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _11 = _10 + i_45;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _18
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:26:22: note: def_stmt: _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _18 = _5 + _8;
compiler-optimizations.cpp:26:22: note: add new stmt: vect__19.71_126 = vect__11.55_107 + vect__18.70_125;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _19
compiler-optimizations.cpp:26:22: note: def_stmt: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _14
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:26:22: note: def_stmt: _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _14 = _13 + i_45;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _19
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _19
compiler-optimizations.cpp:26:22: note: def_stmt: _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _19 = _11 + _18;
compiler-optimizations.cpp:26:22: note: add new stmt: vect__20.72_127 = vect__14.61_114 + vect__19.71_126;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _20
compiler-optimizations.cpp:26:22: note: def_stmt: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _17
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:26:22: note: def_stmt: _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _17 = _16 + i_45;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _20
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _20
compiler-optimizations.cpp:26:22: note: def_stmt: _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _20 = _14 + _19;
compiler-optimizations.cpp:26:22: note: add new stmt: vect__21.73_128 = vect__17.67_121 + vect__20.72_127;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _22 = z_39(D) + _2;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _23 = *_22;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: transform load. ncopies = 1
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *z_39(D)
compiler-optimizations.cpp:26:22: note: created z_39(D)
compiler-optimizations.cpp:26:22: note: add new stmt: vect__23.76_131 = MEM[(int *)vectp_z.74_129];
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _21
compiler-optimizations.cpp:26:22: note: def_stmt: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _23
compiler-optimizations.cpp:26:22: note: def_stmt: _23 = *_22;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform binary/unary operation.
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _21
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _21
compiler-optimizations.cpp:26:22: note: def_stmt: _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _21 = _17 + _20;
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _23
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _23
compiler-optimizations.cpp:26:22: note: def_stmt: _23 = *_22;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _23 = *_22;
compiler-optimizations.cpp:26:22: note: add new stmt: vect__24.77_132 = vect__21.73_128 + vect__23.76_131;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: *_22 = _24;
compiler-optimizations.cpp:26:22: note: transform statement.
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _24
compiler-optimizations.cpp:26:22: note: def_stmt: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note: transform store. ncopies = 1
compiler-optimizations.cpp:26:22: note: vect_get_vec_def_for_operand: _24
compiler-optimizations.cpp:26:22: note: vect_is_simple_use: operand _24
compiler-optimizations.cpp:26:22: note: def_stmt: _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: type of def: internal
compiler-optimizations.cpp:26:22: note:   def_stmt =  _24 = _21 + _23;
compiler-optimizations.cpp:26:22: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *z_39(D)
compiler-optimizations.cpp:26:22: note: created z_39(D)
compiler-optimizations.cpp:26:22: note: add new stmt: MEM[(int *)vectp_z.78_133] = vect__24.77_132;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: i_41 = i_45 + 1;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_a.40_91 = vectp_a.40_90 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_a.44_95 = vectp_a.44_94 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_b.46_98 = vectp_b.46_97 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_b.50_102 = vectp_b.50_101 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_c.52_105 = vectp_c.52_104 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_c.56_109 = vectp_c.56_108 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_x.58_112 = vectp_x.58_111 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_x.62_116 = vectp_x.62_115 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_y.64_119 = vectp_y.64_118 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_y.68_123 = vectp_y.68_122 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_z.74_130 = vectp_z.74_129 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: vectp_z.78_134 = vectp_z.78_133 + 16;
compiler-optimizations.cpp:26:22: note: ------>vectorizing statement: if (n_28(D) <= i_41)
compiler-optimizations.cpp:26:22: note: New loop exit condition: if (ivtmp_137 >= bnd.36_81)
compiler-optimizations.cpp:26:22: note: LOOP VECTORIZED

compiler-optimizations.cpp:25:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:26:22: note: loop with 2 iterations completely unrolled (header execution count 64530389)
compiler-optimizations.cpp:25:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:26:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:26:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:26:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:32:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: vect__4.42_92 = MEM[(int *)vectp_a.40_90];
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.44_94] = vect__5.43_93;
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: vect__7.48_99 = MEM[(int *)vectp_b.46_97];
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_b.50_101] = vect__8.49_100;
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: vect__10.54_106 = MEM[(int *)vectp_c.52_104];
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_c.56_108] = vect__11.55_107;
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: vect__13.60_113 = MEM[(int *)vectp_x.58_111];
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_x.62_115] = vect__14.61_114;
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: vect__16.66_120 = MEM[(int *)vectp_y.64_118];
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_y.68_122] = vect__17.67_121;
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: vect__23.76_131 = MEM[(int *)vectp_z.74_129];
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_z.78_133] = vect__24.77_132;
 scalar_type: vector(4) int
compiler-optimizations.cpp:32:14: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:32:14: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:32:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:32:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:32:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:32:14: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:32:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _8 = *_7;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_7 = _9;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _12 = *_11;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_11 = _13;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _16 = *_15;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_15 = _17;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _20 = *_19;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_19 = _21;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _38 = *_40;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_40 = _36;
vector(4) int
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:26:22: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:26:22: note: not consecutive access *_3 = _5;
compiler-optimizations.cpp:26:22: note: not consecutive access _8 = *_7;
compiler-optimizations.cpp:26:22: note: not consecutive access *_7 = _9;
compiler-optimizations.cpp:26:22: note: not consecutive access _12 = *_11;
compiler-optimizations.cpp:26:22: note: not consecutive access *_11 = _13;
compiler-optimizations.cpp:26:22: note: not consecutive access _16 = *_15;
compiler-optimizations.cpp:26:22: note: not consecutive access *_15 = _17;
compiler-optimizations.cpp:26:22: note: not consecutive access _20 = *_19;
compiler-optimizations.cpp:26:22: note: not consecutive access *_19 = _21;
compiler-optimizations.cpp:26:22: note: not consecutive access _38 = *_40;
compiler-optimizations.cpp:26:22: note: not consecutive access *_40 = _36;
compiler-optimizations.cpp:26:22: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:26:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _142 = *_141;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_141 = _143;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _146 = *_145;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_145 = _147;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _150 = *_149;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_149 = _151;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _154 = *_153;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_153 = _155;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _158 = *_157;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_157 = _159;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: _166 = *_165;
vector(4) int
compiler-optimizations.cpp:26:22: note: got vectype for stmt: *_165 = _167;
vector(4) int
compiler-optimizations.cpp:26:22: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:26:22: note: not consecutive access _142 = *_141;
compiler-optimizations.cpp:26:22: note: not consecutive access *_141 = _143;
compiler-optimizations.cpp:26:22: note: not consecutive access _146 = *_145;
compiler-optimizations.cpp:26:22: note: not consecutive access *_145 = _147;
compiler-optimizations.cpp:26:22: note: not consecutive access _150 = *_149;
compiler-optimizations.cpp:26:22: note: not consecutive access *_149 = _151;
compiler-optimizations.cpp:26:22: note: not consecutive access _154 = *_153;
compiler-optimizations.cpp:26:22: note: not consecutive access *_153 = _155;
compiler-optimizations.cpp:26:22: note: not consecutive access _158 = *_157;
compiler-optimizations.cpp:26:22: note: not consecutive access *_157 = _159;
compiler-optimizations.cpp:26:22: note: not consecutive access _166 = *_165;
compiler-optimizations.cpp:26:22: note: not consecutive access *_165 = _167;
compiler-optimizations.cpp:26:22: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:26:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:26:5: note: got vectype for stmt: _70 = *_71;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: *_71 = _69;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: _66 = *_67;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: *_67 = _65;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: _62 = *_63;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: *_63 = _61;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: _58 = *_59;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: *_59 = _57;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: _54 = *_55;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: *_55 = _53;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: _46 = *_47;
vector(4) int
compiler-optimizations.cpp:26:5: note: got vectype for stmt: *_47 = _42;
vector(4) int
compiler-optimizations.cpp:26:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:26:5: note: not consecutive access _70 = *_71;
compiler-optimizations.cpp:26:5: note: not consecutive access *_71 = _69;
compiler-optimizations.cpp:26:5: note: not consecutive access _66 = *_67;
compiler-optimizations.cpp:26:5: note: not consecutive access *_67 = _65;
compiler-optimizations.cpp:26:5: note: not consecutive access _62 = *_63;
compiler-optimizations.cpp:26:5: note: not consecutive access *_63 = _61;
compiler-optimizations.cpp:26:5: note: not consecutive access _58 = *_59;
compiler-optimizations.cpp:26:5: note: not consecutive access *_59 = _57;
compiler-optimizations.cpp:26:5: note: not consecutive access _54 = *_55;
compiler-optimizations.cpp:26:5: note: not consecutive access *_55 = _53;
compiler-optimizations.cpp:26:5: note: not consecutive access _46 = *_47;
compiler-optimizations.cpp:26:5: note: not consecutive access *_47 = _42;
compiler-optimizations.cpp:26:5: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:26:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:26:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:34:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:34:1: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:34:1: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:38:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:38:5: note: got vectype for stmt: _4 = *_3;
vector(2) double
compiler-optimizations.cpp:38:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:38:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:38:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:38:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:38:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:38:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:38:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:44:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:44:5: note: got vectype for stmt: _4 = *_3;
vector(2) double
compiler-optimizations.cpp:44:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:44:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:44:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:45:13: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:45:13: note: got vectype for stmt: *_3 = _6;
vector(2) double
compiler-optimizations.cpp:45:13: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:45:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:47:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:47:1: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:47:1: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:50:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:50:5: note: got vectype for stmt: _3 = *_2;
vector(16) char
compiler-optimizations.cpp:50:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:50:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:50:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:50:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:50:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:50:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:50:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:56:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:56:5: note: got vectype for stmt: _3 = *_2;
vector(16) char
compiler-optimizations.cpp:56:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:56:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:56:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:57:13: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:57:13: note: got vectype for stmt: *_2 = _7;
vector(16) char
compiler-optimizations.cpp:57:13: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:57:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:59:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:59:1: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:59:1: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:63:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:63:5: note: got vectype for stmt: _1 = *a_7(D);
vector(4) int
compiler-optimizations.cpp:63:5: note: got vectype for stmt: *a_7(D) = _2;
vector(4) int
compiler-optimizations.cpp:63:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:63:5: note: not consecutive access _1 = *a_7(D);
compiler-optimizations.cpp:63:5: note: not consecutive access *a_7(D) = _2;
compiler-optimizations.cpp:63:5: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:63:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:63:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:63:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:63:16: note: got vectype for stmt: _3 = *b_9(D);
vector(4) int
compiler-optimizations.cpp:63:16: note: got vectype for stmt: *b_9(D) = _4;
vector(4) int
compiler-optimizations.cpp:63:16: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:63:16: note: not consecutive access _3 = *b_9(D);
compiler-optimizations.cpp:63:16: note: not consecutive access *b_9(D) = _4;
compiler-optimizations.cpp:63:16: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:63:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:64:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:64:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:68
compiler-optimizations.cpp:68:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:68:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:68:23: note: === get_loop_niters ===
compiler-optimizations.cpp:68:23: note: Symbolic number of iterations is (unsigned int) n_7(D)
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:23: note: got vectype for stmt: _10 = *_3;
vector(4) int
compiler-optimizations.cpp:68:23: note: got vectype for stmt: *_3 = _11;
vector(4) int
compiler-optimizations.cpp:68:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:68:23: note: Analyze phi: i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:68:23: note: step: 1,  init: 0
compiler-optimizations.cpp:68:23: note: Detected induction.
compiler-optimizations.cpp:68:23: note: Analyze phi: .MEM_16 = PHI <.MEM_6(D)(5), .MEM_12(6)>
compiler-optimizations.cpp:68:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:68:23: note: def_stmt: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand i_15
compiler-optimizations.cpp:68:23: note: def_stmt: i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: type of def: induction
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:68:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:68:23: note: init: phi relevant? i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: init: phi relevant? .MEM_16 = PHI <.MEM_6(D)(5), .MEM_12(6)>
compiler-optimizations.cpp:68:23: note: init: stmt relevant? _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? _3 = a_8(D) + _2;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? _10 = *_3;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? *_3 = _11;
compiler-optimizations.cpp:68:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:68:23: note: mark relevant 5, live 0: *_3 = _11;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? i_9 = i_15 + 1;
compiler-optimizations.cpp:68:23: note: init: stmt relevant? if (n_7(D) <= i_9)
compiler-optimizations.cpp:68:23: note: worklist: examine stmt: *_3 = _11;
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:68:23: note: def_stmt: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: mark relevant 5, live 0: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: worklist: examine stmt: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:68:23: note: def_stmt: _10 = *_3;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: mark relevant 5, live 0: _10 = *_3;
compiler-optimizations.cpp:68:23: note: worklist: examine stmt: _10 = *_3;
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:68:23: note: dependence distance  = 0.
compiler-optimizations.cpp:68:23: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:68:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:68:23: note: ==> examining phi: i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: ==> examining phi: .MEM_16 = PHI <.MEM_6(D)(5), .MEM_12(6)>
compiler-optimizations.cpp:68:23: note: ==> examining statement: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:68:23: note: skip.
compiler-optimizations.cpp:68:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:68:23: note: skip.
compiler-optimizations.cpp:68:23: note: ==> examining statement: _3 = a_8(D) + _2;
compiler-optimizations.cpp:68:23: note: skip.
compiler-optimizations.cpp:68:23: note: ==> examining statement: _10 = *_3;
compiler-optimizations.cpp:68:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:68:23: note: vectype: vector(4) int
compiler-optimizations.cpp:68:23: note: nunits = 4
compiler-optimizations.cpp:68:23: note: ==> examining statement: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:68:23: note: vectype: vector(4) int
compiler-optimizations.cpp:68:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:68:23: note: vectype: vector(4) int
compiler-optimizations.cpp:68:23: note: nunits = 4
compiler-optimizations.cpp:68:23: note: ==> examining statement: *_3 = _11;
compiler-optimizations.cpp:68:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:68:23: note: vectype: vector(4) int
compiler-optimizations.cpp:68:23: note: nunits = 4
compiler-optimizations.cpp:68:23: note: ==> examining statement: i_9 = i_15 + 1;
compiler-optimizations.cpp:68:23: note: skip.
compiler-optimizations.cpp:68:23: note: ==> examining statement: if (n_7(D) <= i_9)
compiler-optimizations.cpp:68:23: note: skip.
compiler-optimizations.cpp:68:23: note: vectorization factor = 4
compiler-optimizations.cpp:68:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:68:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:68:23: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:68:23: note: recording new base alignment for a_8(D)
compiler-optimizations.cpp:68:23: note:   alignment:    4
compiler-optimizations.cpp:68:23: note:   misalignment: 0
compiler-optimizations.cpp:68:23: note:   based on:     _10 = *_3;
compiler-optimizations.cpp:68:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:68:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:68:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:68:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:68:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:68:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:68:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:68:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:68:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:68:23: note: Analyze phi: i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: Analyze phi: .MEM_16 = PHI <.MEM_6(D)(5), .MEM_12(6)>
compiler-optimizations.cpp:68:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:68:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:68:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:68:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:68:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:68:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:68:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:68:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:68:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:68:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:68:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:68:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:68:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:68:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:68:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:68:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:68:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:68:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:68:23: note: examining phi: i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: examining phi: .MEM_16 = PHI <.MEM_6(D)(5), .MEM_12(6)>
compiler-optimizations.cpp:68:23: note: ==> examining statement: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:68:23: note: irrelevant.
compiler-optimizations.cpp:68:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:68:23: note: irrelevant.
compiler-optimizations.cpp:68:23: note: ==> examining statement: _3 = a_8(D) + _2;
compiler-optimizations.cpp:68:23: note: irrelevant.
compiler-optimizations.cpp:68:23: note: ==> examining statement: _10 = *_3;
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:68:23: note: not ssa-name.
compiler-optimizations.cpp:68:23: note: use not simple.
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:68:23: note: not ssa-name.
compiler-optimizations.cpp:68:23: note: use not simple.
compiler-optimizations.cpp:68:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:68:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:68:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:68:23: note: ==> examining statement: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:68:23: note: def_stmt: _10 = *_3;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:68:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:68:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
compiler-optimizations.cpp:68:23: note: ==> examining statement: *_3 = _11;
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:68:23: note: def_stmt: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:68:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:68:23: note: ==> examining statement: i_9 = i_15 + 1;
compiler-optimizations.cpp:68:23: note: irrelevant.
compiler-optimizations.cpp:68:23: note: ==> examining statement: if (n_7(D) <= i_9)
compiler-optimizations.cpp:68:23: note: irrelevant.
compiler-optimizations.cpp:68:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:68:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:68:23: note: Cost model analysis: 
  Vector inside of loop cost: 28
  Vector prologue cost: 36
  Vector epilogue cost: 56
  Scalar iteration cost: 28
  Scalar outside cost: 32
  Vector outside cost: 92
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 3
compiler-optimizations.cpp:68:23: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:68:23: note:   Static estimate profitability threshold = 5
compiler-optimizations.cpp:68:23: note: epilog loop required
compiler-optimizations.cpp:68:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:68:23: note: Analyze phi: i_15 = PHI <0(5), i_9(6)>
compiler-optimizations.cpp:68:23: note: Analyze phi: .MEM_16 = PHI <.MEM_6(D)(5), .MEM_12(6)>
compiler-optimizations.cpp:68:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:68:23: note: loop vectorized
compiler-optimizations.cpp:68:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:68:23: note: Profitability threshold is 4 loop iterations.
split exit edge
compiler-optimizations.cpp:68:23: note: vect_update_ivs_after_vectorizer: phi: i_15 = PHI <i_9(6), 0(9)>
compiler-optimizations.cpp:68:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_16 = PHI <.MEM_12(6), .MEM_6(D)(9)>
compiler-optimizations.cpp:68:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:68:23: note: ------>vectorizing phi: i_15 = PHI <i_9(6), 0(16)>
compiler-optimizations.cpp:68:23: note: ------>vectorizing phi: .MEM_16 = PHI <.MEM_12(6), .MEM_6(D)(16)>
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: _3 = a_8(D) + _2;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: _10 = *_3;
compiler-optimizations.cpp:68:23: note: transform statement.
compiler-optimizations.cpp:68:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:68:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_8(D)
compiler-optimizations.cpp:68:23: note: created a_8(D)
compiler-optimizations.cpp:68:23: note: add new stmt: vect__10.102_36 = MEM[(int *)vectp_a.100_34];
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: transform statement.
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:68:23: note: def_stmt: _10 = *_3;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:68:23: note: transform binary/unary operation.
compiler-optimizations.cpp:68:23: note: vect_get_vec_def_for_operand: _10
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:68:23: note: def_stmt: _10 = *_3;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note:   def_stmt =  _10 = *_3;
compiler-optimizations.cpp:68:23: note: vect_get_vec_def_for_operand: 1
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:68:23: note: created new init_stmt: vect_cst__37 = { 1, 1, 1, 1 };
compiler-optimizations.cpp:68:23: note: add new stmt: vect__11.103_38 = vect__10.102_36 + vect_cst__37;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: *_3 = _11;
compiler-optimizations.cpp:68:23: note: transform statement.
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:68:23: note: def_stmt: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:68:23: note: vect_get_vec_def_for_operand: _11
compiler-optimizations.cpp:68:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:68:23: note: def_stmt: _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: type of def: internal
compiler-optimizations.cpp:68:23: note:   def_stmt =  _11 = _10 + 1;
compiler-optimizations.cpp:68:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_8(D)
compiler-optimizations.cpp:68:23: note: created a_8(D)
compiler-optimizations.cpp:68:23: note: add new stmt: MEM[(int *)vectp_a.104_39] = vect__11.103_38;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: i_9 = i_15 + 1;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: vectp_a.100_35 = vectp_a.100_34 + 16;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: vectp_a.104_40 = vectp_a.104_39 + 16;
compiler-optimizations.cpp:68:23: note: ------>vectorizing statement: if (n_7(D) <= i_9)
compiler-optimizations.cpp:68:23: note: New loop exit condition: if (ivtmp_43 >= bnd.97_30)
compiler-optimizations.cpp:68:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:67:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:68:23: note: loop with 2 iterations completely unrolled (header execution count 64530389)
compiler-optimizations.cpp:67:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:68:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:68:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:68:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:62:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:62:9: note: not vectorized: no vectype for stmt: vect__10.102_36 = MEM[(int *)vectp_a.100_34];
 scalar_type: vector(4) int
compiler-optimizations.cpp:62:9: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.104_39] = vect__11.103_38;
 scalar_type: vector(4) int
compiler-optimizations.cpp:62:9: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:62:9: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:62:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:62:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:62:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:62:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:62:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:23: note: got vectype for stmt: _10 = *_3;
vector(4) int
compiler-optimizations.cpp:68:23: note: got vectype for stmt: *_3 = _11;
vector(4) int
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:68:23: note: not consecutive access _10 = *_3;
compiler-optimizations.cpp:68:23: note: not consecutive access *_3 = _11;
compiler-optimizations.cpp:68:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:68:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:23: note: got vectype for stmt: _48 = *_47;
vector(4) int
compiler-optimizations.cpp:68:23: note: got vectype for stmt: *_47 = _49;
vector(4) int
compiler-optimizations.cpp:68:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:68:23: note: not consecutive access _48 = *_47;
compiler-optimizations.cpp:68:23: note: not consecutive access *_47 = _49;
compiler-optimizations.cpp:68:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:68:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:68:5: note: got vectype for stmt: _22 = *_4;
vector(4) int
compiler-optimizations.cpp:68:5: note: got vectype for stmt: *_4 = _19;
vector(4) int
compiler-optimizations.cpp:68:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:68:5: note: not consecutive access _22 = *_4;
compiler-optimizations.cpp:68:5: note: not consecutive access *_4 = _19;
compiler-optimizations.cpp:68:5: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:68:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:68:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:71:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:71:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:79
compiler-optimizations.cpp:79:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:79:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:79:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:79:23: note: bad loop form.
compiler-optimizations.cpp:78:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:78:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:79:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:79:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:79:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:85:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:85:1: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:85:1: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:82:32: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:82:32: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:82:32: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:80:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:80:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:80:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:81:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:81:27: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:81:27: note: got vectype for stmt: *_3 = _6;
vector(4) int
compiler-optimizations.cpp:81:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:81:27: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:81:27: note: not consecutive access *_3 = _6;
compiler-optimizations.cpp:81:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:81:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:82:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:82:27: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:82:27: note: got vectype for stmt: *_9 = _12;
vector(4) int
compiler-optimizations.cpp:82:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:82:27: note: not consecutive access _10 = *_9;
compiler-optimizations.cpp:82:27: note: not consecutive access *_9 = _12;
compiler-optimizations.cpp:82:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:82:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:79:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:79:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:79:23: note: ===vect_slp_analyze_bb===

Analyzing loop at compiler-optimizations.cpp:91
compiler-optimizations.cpp:91:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:91:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:91:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:91:23: note: bad loop form.
compiler-optimizations.cpp:89:5: note: vectorized 0 loops in function.
compiler-optimizations.cpp:89:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:91:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:91:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:91:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:91:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:92:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:92:9: note: got vectype for stmt: _3 = *_2;
vector(16) char
compiler-optimizations.cpp:92:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:92:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:93:13: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:93:13: note: got vectype for stmt: _4 = *debug_14(D);
vector(16) unsigned char
compiler-optimizations.cpp:93:13: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:93:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:94:26: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:96:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:96:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:96:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:91:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:91:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:91:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:91:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:91:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:99:12: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:99:12: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:106
compiler-optimizations.cpp:106:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:106:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:106:23: note: === get_loop_niters ===
compiler-optimizations.cpp:106:23: note: Symbolic number of iterations is (unsigned int) n_13(D)
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: got vectype for stmt: _26 = *_18;
vector(16) char
compiler-optimizations.cpp:106:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:106:23: note: Analyze phi: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: Access function of PHI: {0, +, _ifc__43}_2
compiler-optimizations.cpp:106:23: note: step: _ifc__43,  init: 0
compiler-optimizations.cpp:106:23: note: step unknown.
compiler-optimizations.cpp:106:23: note: Analyze phi: i_4 = PHI <i_32(22), 0(33)>
compiler-optimizations.cpp:106:23: note: Access function of PHI: {0, +, 1}_2
compiler-optimizations.cpp:106:23: note: step: 1,  init: 0
compiler-optimizations.cpp:106:23: note: Detected induction.
compiler-optimizations.cpp:106:23: note: Analyze phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(33)>
compiler-optimizations.cpp:106:23: note: Analyze phi: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: detected reduction: need to swap operands: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: Detected reduction.
compiler-optimizations.cpp:106:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:106:23: note: vect_recog_mixed_size_cond_pattern: detected:
compiler-optimizations.cpp:106:23: note: mixed_size_cond pattern recognized: patt_44 = (int) patt_28;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:106:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:106:23: note: init: phi relevant? error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: init: phi relevant? i_4 = PHI <i_32(22), 0(33)>
compiler-optimizations.cpp:106:23: note: init: phi relevant? .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(33)>
compiler-optimizations.cpp:106:23: note: init: stmt relevant? _19 = (sizetype) i_4;
compiler-optimizations.cpp:106:23: note: init: stmt relevant? _18 = a_14(D) + _19;
compiler-optimizations.cpp:106:23: note: init: stmt relevant? _26 = *_18;
compiler-optimizations.cpp:106:23: note: init: stmt relevant? _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: init: stmt relevant? error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: vec_stmt_relevant_p: used out of loop.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand error_cnt_6
compiler-optimizations.cpp:106:23: note: def_stmt: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: type of def: reduction
compiler-optimizations.cpp:106:23: note: vec_stmt_relevant_p: stmt live but not relevant.
compiler-optimizations.cpp:106:23: note: mark relevant 1, live 1: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: init: stmt relevant? i_32 = i_4 + 1;
compiler-optimizations.cpp:106:23: note: init: stmt relevant? if (n_13(D) <= i_32)
compiler-optimizations.cpp:106:23: note: worklist: examine stmt: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand error_cnt_6
compiler-optimizations.cpp:106:23: note: def_stmt: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: type of def: reduction
compiler-optimizations.cpp:106:23: note: mark relevant 1, live 0: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: mark relevant 1, live 0: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: last stmt in pattern. don't mark relevant/live.
compiler-optimizations.cpp:106:23: note: worklist: examine stmt: patt_44 = (int) patt_28;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand patt_28
compiler-optimizations.cpp:106:23: note: def_stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: mark relevant 1, live 0: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: worklist: examine stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _26
compiler-optimizations.cpp:106:23: note: def_stmt: _26 = *_18;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: mark relevant 1, live 0: _26 = *_18;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: worklist: examine stmt: _26 = *_18;
compiler-optimizations.cpp:106:23: note: worklist: examine stmt: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand error_cnt_30
compiler-optimizations.cpp:106:23: note: def_stmt: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: type of def: reduction
compiler-optimizations.cpp:106:23: note: reduc-stmt defining reduc-phi in the same nest.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:106:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:106:23: note: ==> examining phi: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:106:23: note: vectype: vector(4) int
compiler-optimizations.cpp:106:23: note: nunits = 4
compiler-optimizations.cpp:106:23: note: ==> examining phi: i_4 = PHI <i_32(22), 0(33)>
compiler-optimizations.cpp:106:23: note: ==> examining phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(33)>
compiler-optimizations.cpp:106:23: note: ==> examining statement: _19 = (sizetype) i_4;
compiler-optimizations.cpp:106:23: note: skip.
compiler-optimizations.cpp:106:23: note: ==> examining statement: _18 = a_14(D) + _19;
compiler-optimizations.cpp:106:23: note: skip.
compiler-optimizations.cpp:106:23: note: ==> examining statement: _26 = *_18;
compiler-optimizations.cpp:106:23: note: get vectype for scalar type:  char
compiler-optimizations.cpp:106:23: note: vectype: vector(16) char
compiler-optimizations.cpp:106:23: note: nunits = 16
compiler-optimizations.cpp:106:23: note: ==> examining statement: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: ==> examining pattern statement: patt_44 = (int) patt_28;
compiler-optimizations.cpp:106:23: note: ==> examining pattern def stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: get vectype for scalar type:  signed char
compiler-optimizations.cpp:106:23: note: vectype: vector(16) signed char
compiler-optimizations.cpp:106:23: note: nunits = 16
compiler-optimizations.cpp:106:23: note: ==> examining statement: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: ==> examining pattern statement: patt_44 = (int) patt_28;
compiler-optimizations.cpp:106:23: note: get vectype for scalar type:  signed char
compiler-optimizations.cpp:106:23: note: vectype: vector(16) signed char
compiler-optimizations.cpp:106:23: note: nunits = 16
compiler-optimizations.cpp:106:23: note: ==> examining statement: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:106:23: note: vectype: vector(4) int
compiler-optimizations.cpp:106:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:106:23: note: vectype: vector(4) int
compiler-optimizations.cpp:106:23: note: nunits = 4
compiler-optimizations.cpp:106:23: note: ==> examining statement: i_32 = i_4 + 1;
compiler-optimizations.cpp:106:23: note: skip.
compiler-optimizations.cpp:106:23: note: ==> examining statement: if (n_13(D) <= i_32)
compiler-optimizations.cpp:106:23: note: skip.
compiler-optimizations.cpp:106:23: note: vectorization factor = 16
compiler-optimizations.cpp:106:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:106:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:106:23: note: recording new base alignment for a_14(D)
compiler-optimizations.cpp:106:23: note:   alignment:    1
compiler-optimizations.cpp:106:23: note:   misalignment: 0
compiler-optimizations.cpp:106:23: note:   based on:     _26 = *_18;
compiler-optimizations.cpp:106:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:106:23: note: can't force alignment of ref: *_18
compiler-optimizations.cpp:106:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:106:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:106:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:106:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:106:23: note: Analyze phi: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:106:23: note: Analyze phi: i_4 = PHI <i_32(22), 0(33)>
compiler-optimizations.cpp:106:23: note: Analyze phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(33)>
compiler-optimizations.cpp:106:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:106:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:106:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:106:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:106:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:106:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:106:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:106:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:106:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:106:23: note: examining phi: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: examining phi: i_4 = PHI <i_32(22), 0(33)>
compiler-optimizations.cpp:106:23: note: examining phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(33)>
compiler-optimizations.cpp:106:23: note: ==> examining statement: _19 = (sizetype) i_4;
compiler-optimizations.cpp:106:23: note: irrelevant.
compiler-optimizations.cpp:106:23: note: ==> examining statement: _18 = a_14(D) + _19;
compiler-optimizations.cpp:106:23: note: irrelevant.
compiler-optimizations.cpp:106:23: note: ==> examining statement: _26 = *_18;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand *_18
compiler-optimizations.cpp:106:23: note: not ssa-name.
compiler-optimizations.cpp:106:23: note: use not simple.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand *_18
compiler-optimizations.cpp:106:23: note: not ssa-name.
compiler-optimizations.cpp:106:23: note: use not simple.
compiler-optimizations.cpp:106:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:106:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:106:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:106:23: note: ==> examining statement: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: ==> examining pattern statement: patt_44 = (int) patt_28;
compiler-optimizations.cpp:106:23: note: ==> examining pattern def statement: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: ==> examining statement: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _26 != 0
compiler-optimizations.cpp:106:23: note: not ssa-name.
compiler-optimizations.cpp:106:23: note: use not simple.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _26
compiler-optimizations.cpp:106:23: note: def_stmt: _26 = *_18;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 12 .
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand patt_28
compiler-optimizations.cpp:106:23: note: def_stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: === vectorizable_conversion ===
compiler-optimizations.cpp:106:23: note: vect_model_promotion_demotion_cost: inside_cost = 24, prologue_cost = 0 .
compiler-optimizations.cpp:106:23: note: ==> examining statement: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand error_cnt_6
compiler-optimizations.cpp:106:23: note: def_stmt: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: type of def: reduction
compiler-optimizations.cpp:106:23: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 16, prologue_cost = 4, epilogue_cost = 20 .
compiler-optimizations.cpp:106:23: note: ==> examining statement: i_32 = i_4 + 1;
compiler-optimizations.cpp:106:23: note: irrelevant.
compiler-optimizations.cpp:106:23: note: ==> examining statement: if (n_13(D) <= i_32)
compiler-optimizations.cpp:106:23: note: irrelevant.
compiler-optimizations.cpp:106:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:106:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:106:23: note: Cost model analysis: 
  Vector inside of loop cost: 56
  Vector prologue cost: 48
  Vector epilogue cost: 180
  Scalar iteration cost: 20
  Scalar outside cost: 32
  Vector outside cost: 228
  prologue iterations: 0
  epilogue iterations: 8
  Calculated minimum iters for profitability: 11
compiler-optimizations.cpp:106:23: note:   Runtime profitability threshold = 16
compiler-optimizations.cpp:106:23: note:   Static estimate profitability threshold = 16
compiler-optimizations.cpp:106:23: note: epilog loop required
compiler-optimizations.cpp:106:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:106:23: note: Analyze phi: error_cnt_6 = PHI <error_cnt_30(22), 0(33)>
compiler-optimizations.cpp:106:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:106:23: note: Analyze phi: i_4 = PHI <i_32(22), 0(33)>
compiler-optimizations.cpp:106:23: note: Analyze phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(33)>
compiler-optimizations.cpp:106:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:106:23: note: loop vectorized
compiler-optimizations.cpp:106:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:106:23: note: Profitability threshold is 16 loop iterations.
split exit edge
split exit edge of scalar loop
compiler-optimizations.cpp:106:23: note: vect_update_ivs_after_vectorizer: phi: error_cnt_6 = PHI <error_cnt_30(22), 0(37)>
compiler-optimizations.cpp:106:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:106:23: note: vect_update_ivs_after_vectorizer: phi: i_4 = PHI <i_32(22), 0(37)>
compiler-optimizations.cpp:106:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(37)>
compiler-optimizations.cpp:106:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:106:23: note: ------>vectorizing phi: error_cnt_6 = PHI <error_cnt_30(22), 0(46)>
compiler-optimizations.cpp:106:23: note: multiple-types.
compiler-optimizations.cpp:106:23: note: transform phi.
compiler-optimizations.cpp:106:23: note: ------>vectorizing phi: i_4 = PHI <i_32(22), 0(46)>
compiler-optimizations.cpp:106:23: note: ------>vectorizing phi: .MEM_20 = PHI <.MEM_20(22), .MEM_10(D)(46)>
compiler-optimizations.cpp:106:23: note: ------>vectorizing phi: vect_error_cnt_30.126_71 = PHI <(22), (46)>
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: _19 = (sizetype) i_4;
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: _18 = a_14(D) + _19;
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: _26 = *_18;
compiler-optimizations.cpp:106:23: note: transform statement.
compiler-optimizations.cpp:106:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:106:23: note: create vector_type-pointer variable to type: vector(16) char  vectorizing a pointer ref: *a_14(D)
compiler-optimizations.cpp:106:23: note: created a_14(D)
compiler-optimizations.cpp:106:23: note: add new stmt: vect__26.129_74 = MEM[(char *)vectp_a.127_72];
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: ==> vectorizing pattern def stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: transform statement.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _26
compiler-optimizations.cpp:106:23: note: def_stmt: _26 = *_18;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: _26
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _26
compiler-optimizations.cpp:106:23: note: def_stmt: _26 = *_18;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note:   def_stmt =  _26 = *_18;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _26
compiler-optimizations.cpp:106:23: note: def_stmt: _26 = *_18;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: 0
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: created new init_stmt: vect_cst__75 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: 1
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:106:23: note: created new init_stmt: vect_cst__76 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: 0
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: created new init_stmt: vect_cst__77 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_28.130_78 = VEC_COND_EXPR <vect__26.129_74 != vect_cst__75, vect_cst__76, vect_cst__77>;
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: multiple-types.
compiler-optimizations.cpp:106:23: note: transform statement.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand patt_28
compiler-optimizations.cpp:106:23: note: def_stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: transform conversion. ncopies = 1.
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: patt_28
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand patt_28
compiler-optimizations.cpp:106:23: note: def_stmt: patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note:   def_stmt =  patt_28 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_44.132_79 = [vec_unpack_lo_expr] vect_patt_28.130_78;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_44.132_80 = [vec_unpack_hi_expr] vect_patt_28.130_78;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_44.131_81 = [vec_unpack_lo_expr] vect_patt_44.132_79;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_44.131_82 = [vec_unpack_hi_expr] vect_patt_44.132_79;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_44.131_83 = [vec_unpack_lo_expr] vect_patt_44.132_80;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_patt_44.131_84 = [vec_unpack_hi_expr] vect_patt_44.132_80;
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: error_cnt_30 = _ifc__43 + error_cnt_6;
compiler-optimizations.cpp:106:23: note: multiple-types.
compiler-optimizations.cpp:106:23: note: transform statement.
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand error_cnt_6
compiler-optimizations.cpp:106:23: note: def_stmt: error_cnt_6 = PHI <error_cnt_30(22), 0(46)>
compiler-optimizations.cpp:106:23: note: type of def: reduction
compiler-optimizations.cpp:106:23: note: reduc op not supported by target.
compiler-optimizations.cpp:106:23: note: transform reduction.
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: _ifc__43
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand _ifc__43
compiler-optimizations.cpp:106:23: note: def_stmt: _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: type of def: internal
compiler-optimizations.cpp:106:23: note:   def_stmt =  _ifc__43 = _26 != 0 ? 1 : 0;
compiler-optimizations.cpp:106:23: note: vect_get_vec_def_for_operand: error_cnt_6
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand error_cnt_6
compiler-optimizations.cpp:106:23: note: def_stmt: error_cnt_6 = PHI <error_cnt_30(22), 0(46)>
compiler-optimizations.cpp:106:23: note: type of def: reduction
compiler-optimizations.cpp:106:23: note:   def_stmt =  error_cnt_6 = PHI <error_cnt_30(22), 0(46)>
compiler-optimizations.cpp:106:23: note: add new stmt: vect_error_cnt_30.133_85 = vect_patt_44.131_81 + vect_error_cnt_30.126_71;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_error_cnt_30.133_86 = vect_patt_44.131_82 + vect_error_cnt_30.133_85;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_error_cnt_30.133_87 = vect_patt_44.131_83 + vect_error_cnt_30.133_86;
compiler-optimizations.cpp:106:23: note: add new stmt: vect_error_cnt_30.133_88 = vect_patt_44.131_84 + vect_error_cnt_30.133_87;
compiler-optimizations.cpp:106:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:106:23: note: transform reduction: created def-use cycle: vect_error_cnt_30.126_71 = PHI <vect_error_cnt_30.133_88(22), { 0, 0, 0, 0 }(46)>
vect_error_cnt_30.133_88 = vect_patt_44.131_84 + vect_error_cnt_30.133_87;
compiler-optimizations.cpp:106:23: note: Reduce using vector shifts
compiler-optimizations.cpp:106:23: note: extract scalar result
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: i_32 = i_4 + 1;
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: vectp_a.127_73 = vectp_a.127_72 + 16;
compiler-optimizations.cpp:106:23: note: ------>vectorizing statement: if (n_13(D) <= i_32)
compiler-optimizations.cpp:106:23: note: New loop exit condition: if (ivtmp_97 >= bnd.123_66)
compiler-optimizations.cpp:106:23: note: LOOP VECTORIZED


Analyzing loop at compiler-optimizations.cpp:106
compiler-optimizations.cpp:106:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:106:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:106:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:106:23: note: bad loop form.
compiler-optimizations.cpp:103:5: note: vectorized 1 loops in function.
compiler-optimizations.cpp:106:23: note: loop with 14 iterations completely unrolled (header execution count 13003925)
compiler-optimizations.cpp:103:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: got vectype for stmt: debug_priv_12 = *debug_11(D);
vector(16) unsigned char
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:16: note: not vectorized: no vectype for stmt: vect__26.129_74 = MEM[(char *)vectp_a.127_72];
 scalar_type: vector(16) char
compiler-optimizations.cpp:107:16: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:16: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _19 = *_35;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _45 = *_46;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _39 = *_41;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _102 = *_101;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _111 = *_110;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _120 = *_119;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _129 = *_128;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _138 = *_137;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _147 = *_146;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _156 = *_155;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _165 = *_164;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _174 = *_173;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _183 = *_182;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _192 = *_191;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _55 = *_54;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:107:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:107:9: note: got vectype for stmt: _3 = *_2;
vector(16) char
compiler-optimizations.cpp:107:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:107:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:111:22: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:111:22: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:111:22: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:106:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:106:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:114:12: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:114:12: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_10 and *_5
consider run-time aliasing test between *_16 and *_5
consider run-time aliasing test between *_10 and *_5
consider run-time aliasing test between *_16 and *_5

Analyzing loop at compiler-optimizations.cpp:118
compiler-optimizations.cpp:118:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:118:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:118:23: note: not vectorized: multiple nested loops.
compiler-optimizations.cpp:118:23: note: bad loop form.

Analyzing loop at compiler-optimizations.cpp:119
compiler-optimizations.cpp:119:27: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:119:27: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:119:27: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:119:27: note: === get_loop_niters ===
compiler-optimizations.cpp:119:27: note: Considering outer-loop vectorization.
compiler-optimizations.cpp:119:27: note: === get_loop_niters ===
compiler-optimizations.cpp:119:27: note: Symbolic number of iterations is (unsigned int) n_27(D)
compiler-optimizations.cpp:119:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:119:27: note: got vectype for stmt: pretmp_98 = *_5;
vector(2) double
compiler-optimizations.cpp:119:27: note: analyze in outer loop: *(a_29(D) + (sizetype) ((long unsigned int) _1 * 8))
compiler-optimizations.cpp:119:27: note: 	outer base_address: a_29(D) + (sizetype) ((long unsigned int) _1 * 8)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: 0
	outer base alignment: 8

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 128
compiler-optimizations.cpp:119:27: note: got vectype for stmt: _11 = *_10;
vector(2) double
compiler-optimizations.cpp:119:27: note: analyze in outer loop: *(b_30(D) + (sizetype) ((long unsigned int) j_42 * 8))
compiler-optimizations.cpp:119:27: note: 	outer base_address: b_30(D)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: 8
	outer base alignment: 8

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 8
compiler-optimizations.cpp:119:27: note: got vectype for stmt: _17 = *_16;
vector(2) double
compiler-optimizations.cpp:119:27: note: not vectorized: not suitable for strided load _17 = *_16;
compiler-optimizations.cpp:119:27: note: bad data references.

Analyzing loop at compiler-optimizations.cpp:120
compiler-optimizations.cpp:120:31: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:120:31: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:120:31: note: === get_loop_niters ===
compiler-optimizations.cpp:120:31: note: Symbolic number of iterations is (unsigned int) n_27(D)
compiler-optimizations.cpp:120:31: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:120:31: note: got vectype for stmt: _11 = *_10;
vector(2) double
compiler-optimizations.cpp:120:31: note: got vectype for stmt: _17 = *_16;
vector(2) double
compiler-optimizations.cpp:120:31: note: got vectype for stmt: *_5 = _19;
vector(2) double
compiler-optimizations.cpp:120:31: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:120:31: note: Analyze phi: k_43 = PHI <0(5), k_32(12)>
compiler-optimizations.cpp:120:31: note: Access function of PHI: {0, +, 1}_3
compiler-optimizations.cpp:120:31: note: step: 1,  init: 0
compiler-optimizations.cpp:120:31: note: Detected induction.
compiler-optimizations.cpp:120:31: note: Analyze phi: .MEM_48 = PHI <.MEM_47(5), .MEM_31(12)>
compiler-optimizations.cpp:120:31: note: Analyze phi: prephitmp_99 = PHI <pretmp_98(5), _19(12)>
compiler-optimizations.cpp:120:31: note: Access function of PHI: {pretmp_98, +, _18}_3
compiler-optimizations.cpp:120:31: note: step: _18,  init: pretmp_98
compiler-optimizations.cpp:120:31: note: step unknown.
compiler-optimizations.cpp:120:31: note: Analyze phi: prephitmp_99 = PHI <pretmp_98(5), _19(12)>
compiler-optimizations.cpp:120:31: note: reduction used in loop.
compiler-optimizations.cpp:120:31: note: Unknown def-use cycle pattern.
compiler-optimizations.cpp:120:31: note: === vect_pattern_recog ===
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:120:31: note: def_stmt: _8 = (long unsigned int) _7;
compiler-optimizations.cpp:120:31: note: type of def: internal
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:120:31: note: def_stmt: _7 = _1 + k_43;
compiler-optimizations.cpp:120:31: note: type of def: internal
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand 8
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand n_27(D)
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:120:31: note: def_stmt: _14 = (long unsigned int) _13;
compiler-optimizations.cpp:120:31: note: type of def: internal
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:120:31: note: def_stmt: _13 = _12 + j_42;
compiler-optimizations.cpp:120:31: note: type of def: internal
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand 8
compiler-optimizations.cpp:120:31: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:120:31: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:120:31: note: type of def: internal
compiler-optimizations.cpp:120:31: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:120:31: note: not vectorized: complicated access pattern.
compiler-optimizations.cpp:120:31: note: bad data access.
compiler-optimizations.cpp:117:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:117:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:118:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:118:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:118:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:125:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:125:1: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:125:1: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:125:1: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:121:30: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:121:30: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:121:30: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:121:30: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:121:30: note: got vectype for stmt: pretmp_98 = *_5;
vector(2) double
compiler-optimizations.cpp:121:30: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:121:30: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:120:31: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:120:31: note: got vectype for stmt: _11 = *_10;
vector(2) double
compiler-optimizations.cpp:120:31: note: got vectype for stmt: _17 = *_16;
vector(2) double
compiler-optimizations.cpp:120:31: note: got vectype for stmt: *_5 = _19;
vector(2) double
compiler-optimizations.cpp:120:31: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:120:31: note: not consecutive access *_5 = _19;
compiler-optimizations.cpp:120:31: note: not consecutive access _17 = *_16;
compiler-optimizations.cpp:120:31: note: not consecutive access _11 = *_10;
compiler-optimizations.cpp:120:31: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:120:31: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:120:31: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:119:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:119:27: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:119:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:119:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:118:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:118:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:118:23: note: ===vect_slp_analyze_bb===
consider run-time aliasing test between *_10 and *_5
consider run-time aliasing test between *_16 and *_5

Analyzing loop at compiler-optimizations.cpp:128
compiler-optimizations.cpp:128:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:128:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:128:23: note: not vectorized: multiple nested loops.
compiler-optimizations.cpp:128:23: note: bad loop form.

Analyzing loop at compiler-optimizations.cpp:129
compiler-optimizations.cpp:129:27: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:129:27: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:129:27: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:129:27: note: === get_loop_niters ===
compiler-optimizations.cpp:129:27: note: Considering outer-loop vectorization.
compiler-optimizations.cpp:129:27: note: === get_loop_niters ===
compiler-optimizations.cpp:129:27: note: Symbolic number of iterations is (unsigned int) n_26(D)
compiler-optimizations.cpp:129:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:129:27: note: got vectype for stmt: tmp_28 = *_5;
vector(2) double
compiler-optimizations.cpp:129:27: note: analyze in outer loop: *(a_29(D) + (sizetype) ((long unsigned int) _1 * 8))
compiler-optimizations.cpp:129:27: note: 	outer base_address: a_29(D) + (sizetype) ((long unsigned int) _1 * 8)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: 0
	outer base alignment: 8

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 128
compiler-optimizations.cpp:129:27: note: got vectype for stmt: _11 = *_10;
vector(2) double
compiler-optimizations.cpp:129:27: note: analyze in outer loop: *(b_30(D) + (sizetype) ((long unsigned int) j_37 * 8))
compiler-optimizations.cpp:129:27: note: 	outer base_address: b_30(D)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: 8
	outer base alignment: 8

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 8
compiler-optimizations.cpp:129:27: note: got vectype for stmt: _17 = *_16;
vector(2) double
compiler-optimizations.cpp:129:27: note: not vectorized: not suitable for strided load _17 = *_16;
compiler-optimizations.cpp:129:27: note: bad data references.

Analyzing loop at compiler-optimizations.cpp:131
compiler-optimizations.cpp:131:31: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:131:31: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:131:31: note: === get_loop_niters ===
compiler-optimizations.cpp:131:31: note: Symbolic number of iterations is (unsigned int) n_26(D)
compiler-optimizations.cpp:131:31: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:131:31: note: got vectype for stmt: _11 = *_10;
vector(2) double
compiler-optimizations.cpp:131:31: note: got vectype for stmt: _17 = *_16;
vector(2) double
compiler-optimizations.cpp:131:31: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:131:31: note: Analyze phi: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: Access function of PHI: {tmp_28, +, _18}_3
compiler-optimizations.cpp:131:31: note: step: _18,  init: tmp_28
compiler-optimizations.cpp:131:31: note: step unknown.
compiler-optimizations.cpp:131:31: note: Analyze phi: k_45 = PHI <0(4), k_32(12)>
compiler-optimizations.cpp:131:31: note: Access function of PHI: {0, +, 1}_3
compiler-optimizations.cpp:131:31: note: step: 1,  init: 0
compiler-optimizations.cpp:131:31: note: Detected induction.
compiler-optimizations.cpp:131:31: note: Analyze phi: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: detected reduction: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: Detected reduction.
compiler-optimizations.cpp:131:31: note: === vect_pattern_recog ===
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:131:31: note: def_stmt: _8 = (long unsigned int) _7;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:131:31: note: def_stmt: _7 = _1 + k_45;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand 8
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand n_26(D)
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:131:31: note: def_stmt: _14 = (long unsigned int) _13;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:131:31: note: def_stmt: _13 = _12 + j_37;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand 8
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:131:31: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:131:31: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:131:31: note: init: phi relevant? tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: init: phi relevant? k_45 = PHI <0(4), k_32(12)>
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _7 = _1 + k_45;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _8 = (long unsigned int) _7;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _9 = _8 * 8;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _10 = a_29(D) + _9;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _11 = *_10;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _12 = n_26(D) * k_45;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _13 = _12 + j_37;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _14 = (long unsigned int) _13;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _15 = _14 * 8;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _16 = b_30(D) + _15;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _17 = *_16;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: vec_stmt_relevant_p: used out of loop.
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:131:31: note: def_stmt: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vec_stmt_relevant_p: stmt live but not relevant.
compiler-optimizations.cpp:131:31: note: mark relevant 1, live 1: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? k_32 = k_45 + 1;
compiler-optimizations.cpp:131:31: note: init: stmt relevant? if (n_26(D) <= k_32)
compiler-optimizations.cpp:131:31: note: worklist: examine stmt: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:131:31: note: def_stmt: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: mark relevant 1, live 0: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand tmp_43
compiler-optimizations.cpp:131:31: note: def_stmt: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: type of def: reduction
compiler-optimizations.cpp:131:31: note: mark relevant 1, live 0: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: worklist: examine stmt: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand tmp_28
compiler-optimizations.cpp:131:31: note: def_stmt: tmp_28 = *_5;
compiler-optimizations.cpp:131:31: note: type of def: external
compiler-optimizations.cpp:131:31: note: def_stmt is out of loop.
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand tmp_31
compiler-optimizations.cpp:131:31: note: def_stmt: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: type of def: reduction
compiler-optimizations.cpp:131:31: note: reduc-stmt defining reduc-phi in the same nest.
compiler-optimizations.cpp:131:31: note: worklist: examine stmt: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:131:31: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: mark relevant 1, live 0: _11 = *_10;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:131:31: note: def_stmt: _17 = *_16;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: mark relevant 1, live 0: _17 = *_16;
compiler-optimizations.cpp:131:31: note: worklist: examine stmt: _17 = *_16;
compiler-optimizations.cpp:131:31: note: worklist: examine stmt: _11 = *_10;
compiler-optimizations.cpp:131:31: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:131:31: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:131:31: note: ==> examining phi: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: nunits = 2
compiler-optimizations.cpp:131:31: note: ==> examining phi: k_45 = PHI <0(4), k_32(12)>
compiler-optimizations.cpp:131:31: note: ==> examining statement: _7 = _1 + k_45;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _8 = (long unsigned int) _7;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _9 = _8 * 8;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _10 = a_29(D) + _9;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _11 = *_10;
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: nunits = 2
compiler-optimizations.cpp:131:31: note: ==> examining statement: _12 = n_26(D) * k_45;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _13 = _12 + j_37;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _14 = (long unsigned int) _13;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _15 = _14 * 8;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _16 = b_30(D) + _15;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _17 = *_16;
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: nunits = 2
compiler-optimizations.cpp:131:31: note: ==> examining statement: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: nunits = 2
compiler-optimizations.cpp:131:31: note: ==> examining statement: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: get vectype for scalar type:  double
compiler-optimizations.cpp:131:31: note: vectype: vector(2) double
compiler-optimizations.cpp:131:31: note: nunits = 2
compiler-optimizations.cpp:131:31: note: ==> examining statement: k_32 = k_45 + 1;
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: ==> examining statement: if (n_26(D) <= k_32)
compiler-optimizations.cpp:131:31: note: skip.
compiler-optimizations.cpp:131:31: note: vectorization factor = 2
compiler-optimizations.cpp:131:31: note: === vect_analyze_slp ===
compiler-optimizations.cpp:131:31: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:131:31: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:131:31: note: recording new base alignment for a_29(D) + (sizetype) ((long unsigned int) _1 * 8)
compiler-optimizations.cpp:131:31: note:   alignment:    8
compiler-optimizations.cpp:131:31: note:   misalignment: 0
compiler-optimizations.cpp:131:31: note:   based on:     _11 = *_10;
compiler-optimizations.cpp:131:31: note: recording new base alignment for b_30(D) + (sizetype) ((long unsigned int) j_37 * 8)
compiler-optimizations.cpp:131:31: note:   alignment:    8
compiler-optimizations.cpp:131:31: note:   misalignment: 0
compiler-optimizations.cpp:131:31: note:   based on:     _17 = *_16;
compiler-optimizations.cpp:131:31: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:131:31: note: can't force alignment of ref: *_10
compiler-optimizations.cpp:131:31: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:131:31: note: Unknown alignment for access: *_16
compiler-optimizations.cpp:131:31: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:131:31: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:131:31: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:131:31: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:131:31: note: Analyze phi: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:131:31: note: Analyze phi: k_45 = PHI <0(4), k_32(12)>
compiler-optimizations.cpp:131:31: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:131:31: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:131:31: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:131:31: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:131:31: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:131:31: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:131:31: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:131:31: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:131:31: note: examining phi: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: examining phi: k_45 = PHI <0(4), k_32(12)>
compiler-optimizations.cpp:131:31: note: ==> examining statement: _7 = _1 + k_45;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _8 = (long unsigned int) _7;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _9 = _8 * 8;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _10 = a_29(D) + _9;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _11 = *_10;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand *_10
compiler-optimizations.cpp:131:31: note: not ssa-name.
compiler-optimizations.cpp:131:31: note: use not simple.
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand *_10
compiler-optimizations.cpp:131:31: note: not ssa-name.
compiler-optimizations.cpp:131:31: note: use not simple.
compiler-optimizations.cpp:131:31: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:131:31: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:131:31: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:131:31: note: ==> examining statement: _12 = n_26(D) * k_45;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _13 = _12 + j_37;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _14 = (long unsigned int) _13;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _15 = _14 * 8;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _16 = b_30(D) + _15;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: _17 = *_16;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand *_16
compiler-optimizations.cpp:131:31: note: not ssa-name.
compiler-optimizations.cpp:131:31: note: use not simple.
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand *_16
compiler-optimizations.cpp:131:31: note: not ssa-name.
compiler-optimizations.cpp:131:31: note: use not simple.
compiler-optimizations.cpp:131:31: note: cannot truncate variable step.
compiler-optimizations.cpp:131:31: note: vect_model_load_cost: inside_cost = 40, prologue_cost = 0 .
compiler-optimizations.cpp:131:31: note: ==> examining statement: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:131:31: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:131:31: note: def_stmt: _17 = *_16;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: === vectorizable_operation ===
compiler-optimizations.cpp:131:31: note: vect_model_simple_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:131:31: note: ==> examining statement: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:131:31: note: def_stmt: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand tmp_43
compiler-optimizations.cpp:131:31: note: def_stmt: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: type of def: reduction
compiler-optimizations.cpp:131:31: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 16, prologue_cost = 0, epilogue_cost = 0 .
compiler-optimizations.cpp:131:31: note: using an in-order (fold-left) reduction.
compiler-optimizations.cpp:131:31: note: ==> examining statement: k_32 = k_45 + 1;
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: ==> examining statement: if (n_26(D) <= k_32)
compiler-optimizations.cpp:131:31: note: irrelevant.
compiler-optimizations.cpp:131:31: note: not using a fully-masked loop.
compiler-optimizations.cpp:131:31: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:131:31: note: Cost model analysis: 
  Vector inside of loop cost: 88
  Vector prologue cost: 32
  Vector epilogue cost: 48
  Scalar iteration cost: 48
  Scalar outside cost: 32
  Vector outside cost: 80
  prologue iterations: 0
  epilogue iterations: 1
  Calculated minimum iters for profitability: 2
compiler-optimizations.cpp:131:31: note:   Runtime profitability threshold = 2
compiler-optimizations.cpp:131:31: note:   Static estimate profitability threshold = 17
compiler-optimizations.cpp:131:31: note: epilog loop required
compiler-optimizations.cpp:131:31: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:131:31: note: Analyze phi: tmp_43 = PHI <tmp_28(4), tmp_31(12)>
compiler-optimizations.cpp:131:31: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:131:31: note: Analyze phi: k_45 = PHI <0(4), k_32(12)>
compiler-optimizations.cpp:131:31: note: loop vectorized
compiler-optimizations.cpp:131:31: note: === vec_transform_loop ===
compiler-optimizations.cpp:131:31: note: Profitability threshold is 2 loop iterations.
compiler-optimizations.cpp:131:31: note: vect_update_ivs_after_vectorizer: phi: tmp_43 = PHI <tmp_31(12), tmp_28(14)>
compiler-optimizations.cpp:131:31: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:131:31: note: vect_update_ivs_after_vectorizer: phi: k_45 = PHI <k_32(12), 0(14)>
compiler-optimizations.cpp:131:31: note: ------>vectorizing phi: tmp_43 = PHI <tmp_31(12), tmp_28(21)>
compiler-optimizations.cpp:131:31: note: transform phi.
compiler-optimizations.cpp:131:31: note: ------>vectorizing phi: k_45 = PHI <k_32(12), 0(21)>
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _7 = _1 + k_45;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _8 = (long unsigned int) _7;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _9 = _8 * 8;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _10 = a_29(D) + _9;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _11 = *_10;
compiler-optimizations.cpp:131:31: note: transform statement.
compiler-optimizations.cpp:131:31: note: transform load. ncopies = 1
compiler-optimizations.cpp:131:31: note: create vector_type-pointer variable to type: vector(2) double  vectorizing a pointer ref: *a_29(D) + (sizetype) ((long unsigned int) _1 * 8)
compiler-optimizations.cpp:131:31: note: created vectp.176_73
compiler-optimizations.cpp:131:31: note: add new stmt: vect__11.177_68 = MEM[(double *)vectp.175_70];
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _12 = n_26(D) * k_45;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _13 = _12 + j_37;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _14 = (long unsigned int) _13;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _15 = _14 * 8;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _16 = b_30(D) + _15;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _17 = *_16;
compiler-optimizations.cpp:131:31: note: transform statement.
compiler-optimizations.cpp:131:31: note: cannot truncate variable step.
compiler-optimizations.cpp:131:31: note: transform load. ncopies = 1
compiler-optimizations.cpp:131:31: note: add new stmt: _58 = *ivtmp_62;
compiler-optimizations.cpp:131:31: note: add new stmt: ivtmp_57 = ivtmp_62 + _59;
compiler-optimizations.cpp:131:31: note: add new stmt: _56 = *ivtmp_57;
compiler-optimizations.cpp:131:31: note: add new stmt: ivtmp_55 = ivtmp_57 + _59;
compiler-optimizations.cpp:131:31: note: add new stmt: vect_cst__54 = {_58, _56};
compiler-optimizations.cpp:131:31: note: created new init_stmt: vect_cst__54 = {_58, _56};
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: transform statement.
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:131:31: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:131:31: note: def_stmt: _17 = *_16;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: transform binary/unary operation.
compiler-optimizations.cpp:131:31: note: vect_get_vec_def_for_operand: _11
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:131:31: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note:   def_stmt =  _11 = *_10;
compiler-optimizations.cpp:131:31: note: vect_get_vec_def_for_operand: _17
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _17
compiler-optimizations.cpp:131:31: note: def_stmt: _17 = *_16;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note:   def_stmt =  _17 = *_16;
compiler-optimizations.cpp:131:31: note: add new stmt: vect__18.178_53 = vect__11.177_68 * vect_cst__54;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: tmp_31 = _18 + tmp_43;
compiler-optimizations.cpp:131:31: note: transform statement.
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:131:31: note: def_stmt: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand tmp_43
compiler-optimizations.cpp:131:31: note: def_stmt: tmp_43 = PHI <tmp_31(12), tmp_28(21)>
compiler-optimizations.cpp:131:31: note: type of def: reduction
compiler-optimizations.cpp:131:31: note: reduc op not supported by target.
compiler-optimizations.cpp:131:31: note: transform reduction.
compiler-optimizations.cpp:131:31: note: vect_get_vec_def_for_operand: _18
compiler-optimizations.cpp:131:31: note: vect_is_simple_use: operand _18
compiler-optimizations.cpp:131:31: note: def_stmt: _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: type of def: internal
compiler-optimizations.cpp:131:31: note:   def_stmt =  _18 = _11 * _17;
compiler-optimizations.cpp:131:31: note: add new stmt: tmp_31 = stmp_tmp_31.179_51 + stmp_tmp_31.179_50;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: k_32 = k_45 + 1;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: vectp.175_69 = vectp.175_70 + 16;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: ivtmp_61 = ivtmp_62 + _63;
compiler-optimizations.cpp:131:31: note: ------>vectorizing statement: if (n_26(D) <= k_32)
compiler-optimizations.cpp:131:31: note: New loop exit condition: if (ivtmp_41 >= bnd.172_77)
compiler-optimizations.cpp:131:31: note: LOOP VECTORIZED

compiler-optimizations.cpp:127:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:131:31: note: loop turned into non-loop; it never loops
compiler-optimizations.cpp:127:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:128:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:128:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:128:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:128:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:130:28: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:130:28: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:130:28: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:130:18: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:130:18: note: got vectype for stmt: tmp_28 = *_5;
vector(2) double
compiler-optimizations.cpp:130:18: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:130:18: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:130:18: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:130:18: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:130:18: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:132:21: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:132:21: note: not vectorized: no vectype for stmt: vect__11.177_68 = MEM[(double *)vectp.175_70];
 scalar_type: vector(2) double
compiler-optimizations.cpp:132:21: note: got vectype for stmt: _58 = *ivtmp_62;
vector(2) double
compiler-optimizations.cpp:132:21: note: got vectype for stmt: _56 = *ivtmp_57;
vector(2) double
compiler-optimizations.cpp:132:21: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:132:21: note: not consecutive access _56 = *ivtmp_57;
compiler-optimizations.cpp:132:21: note: not consecutive access _58 = *ivtmp_62;
compiler-optimizations.cpp:132:21: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:132:21: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:132:21: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:132:21: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:132:21: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:132:21: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:131:13: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:131:13: note: got vectype for stmt: _105 = *_106;
vector(2) double
compiler-optimizations.cpp:131:13: note: got vectype for stmt: _84 = *_85;
vector(2) double
compiler-optimizations.cpp:131:13: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:131:13: note: not consecutive access _105 = *_106;
compiler-optimizations.cpp:131:13: note: not consecutive access _84 = *_85;
compiler-optimizations.cpp:131:13: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:131:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:129:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:129:27: note: got vectype for stmt: *_5 = tmp_74;
vector(2) double
compiler-optimizations.cpp:129:27: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:129:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:129:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:128:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:128:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:128:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:128:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:137:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:137:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_3 and *_5

Analyzing loop at compiler-optimizations.cpp:140
compiler-optimizations.cpp:140:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:140:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:140:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:140:23: note: bad loop form.
compiler-optimizations.cpp:139:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:139:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:140:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:140:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:140:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:140:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:141:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:141:9: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:141:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:141:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:142:18: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:142:18: note: got vectype for stmt: *_5 = _6;
vector(4) int
compiler-optimizations.cpp:142:18: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:142:18: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:140:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:140:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:140:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:140:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:145:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:145:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_4 and *_7
consider run-time aliasing test between *_7 and *_4
consider run-time aliasing test between *_4 and *_7
consider run-time aliasing test between *_7 and *_4
consider run-time aliasing test between *_7 and *_4

Analyzing loop at compiler-optimizations.cpp:148
compiler-optimizations.cpp:148:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:148:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:148:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:148:23: note: bad loop form.
compiler-optimizations.cpp:147:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:147:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:148:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:148:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:148:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:148:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:149:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:149:9: note: got vectype for stmt: _5 = *_4;
vector(4) int
compiler-optimizations.cpp:149:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:149:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:151:19: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:151:19: note: got vectype for stmt: _8 = *_7;
vector(4) int
compiler-optimizations.cpp:151:19: note: got vectype for stmt: *_7 = _9;
vector(4) int
compiler-optimizations.cpp:151:19: note: got vectype for stmt: _10 = *_4;
vector(4) int
compiler-optimizations.cpp:151:19: note: got vectype for stmt: *_4 = _11;
vector(4) int
compiler-optimizations.cpp:151:19: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:151:19: note: not consecutive access _10 = *_4;
compiler-optimizations.cpp:151:19: note: not consecutive access *_4 = _11;
compiler-optimizations.cpp:151:19: note: not consecutive access _8 = *_7;
compiler-optimizations.cpp:151:19: note: not consecutive access *_7 = _9;
compiler-optimizations.cpp:151:19: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:151:19: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:148:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:148:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:148:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:148:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:154:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:154:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_4 and *_6
consider run-time aliasing test between *_6 and *_4
consider run-time aliasing test between *_4 and *_6
consider run-time aliasing test between *_6 and *_4

Analyzing loop at compiler-optimizations.cpp:157
compiler-optimizations.cpp:157:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:157:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:157:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:157:23: note: bad loop form.
compiler-optimizations.cpp:156:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:156:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:157:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:157:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:157:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:157:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:159:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:159:9: note: got vectype for stmt: a_val_16 = *_4;
vector(4) int
compiler-optimizations.cpp:159:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:159:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:161:20: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:161:20: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:161:20: note: got vectype for stmt: *_6 = _8;
vector(4) int
compiler-optimizations.cpp:161:20: note: got vectype for stmt: *_4 = _9;
vector(4) int
compiler-optimizations.cpp:161:20: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:161:20: note: not consecutive access *_4 = _9;
compiler-optimizations.cpp:161:20: note: not consecutive access _7 = *_6;
compiler-optimizations.cpp:161:20: note: not consecutive access *_6 = _8;
compiler-optimizations.cpp:161:20: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:161:20: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:157:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:157:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:157:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:157:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:164:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:164:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:167
compiler-optimizations.cpp:167:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:167:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:167:23: note: === get_loop_niters ===
compiler-optimizations.cpp:167:23: note: Symbolic number of iterations is (unsigned int) n_11(D)
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:23: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:167:23: note: got vectype for stmt: *_3 = cstore_18;
vector(4) int
compiler-optimizations.cpp:167:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:167:23: note: Analyze phi: i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:167:23: note: step: 1,  init: 0
compiler-optimizations.cpp:167:23: note: Detected induction.
compiler-optimizations.cpp:167:23: note: Analyze phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(17)>
compiler-optimizations.cpp:167:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:167:23: note: def_stmt: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand i_16
compiler-optimizations.cpp:167:23: note: def_stmt: i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: type of def: induction
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:167:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:167:23: note: init: phi relevant? i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: init: phi relevant? .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(17)>
compiler-optimizations.cpp:167:23: note: init: stmt relevant? _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? _3 = a_12(D) + _2;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? *_3 = cstore_18;
compiler-optimizations.cpp:167:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: *_3 = cstore_18;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? i_15 = i_16 + 1;
compiler-optimizations.cpp:167:23: note: init: stmt relevant? if (n_11(D) <= i_15)
compiler-optimizations.cpp:167:23: note: worklist: examine stmt: *_3 = cstore_18;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand cstore_18
compiler-optimizations.cpp:167:23: note: def_stmt: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: worklist: examine stmt: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:167:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:167:23: note: def_stmt: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: worklist: examine stmt: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:167:23: note: already marked relevant/live.
compiler-optimizations.cpp:167:23: note: worklist: examine stmt: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:167:23: note: already marked relevant/live.
compiler-optimizations.cpp:167:23: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:167:23: note: dependence distance  = 0.
compiler-optimizations.cpp:167:23: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:167:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:167:23: note: ==> examining phi: i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: ==> examining phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(17)>
compiler-optimizations.cpp:167:23: note: ==> examining statement: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:167:23: note: skip.
compiler-optimizations.cpp:167:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:167:23: note: skip.
compiler-optimizations.cpp:167:23: note: ==> examining statement: _3 = a_12(D) + _2;
compiler-optimizations.cpp:167:23: note: skip.
compiler-optimizations.cpp:167:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: nunits = 4
compiler-optimizations.cpp:167:23: note: ==> examining statement: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: nunits = 4
compiler-optimizations.cpp:167:23: note: ==> examining statement: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: nunits = 4
compiler-optimizations.cpp:167:23: note: ==> examining statement: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: nunits = 4
compiler-optimizations.cpp:167:23: note: ==> examining statement: *_3 = cstore_18;
compiler-optimizations.cpp:167:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:167:23: note: vectype: vector(4) int
compiler-optimizations.cpp:167:23: note: nunits = 4
compiler-optimizations.cpp:167:23: note: ==> examining statement: i_15 = i_16 + 1;
compiler-optimizations.cpp:167:23: note: skip.
compiler-optimizations.cpp:167:23: note: ==> examining statement: if (n_11(D) <= i_15)
compiler-optimizations.cpp:167:23: note: skip.
compiler-optimizations.cpp:167:23: note: vectorization factor = 4
compiler-optimizations.cpp:167:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:167:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:167:23: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:167:23: note: recording new base alignment for a_12(D)
compiler-optimizations.cpp:167:23: note:   alignment:    4
compiler-optimizations.cpp:167:23: note:   misalignment: 0
compiler-optimizations.cpp:167:23: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:167:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:167:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:167:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:167:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:167:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:167:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:167:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:167:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:167:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:167:23: note: Analyze phi: i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: Analyze phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(17)>
compiler-optimizations.cpp:167:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:167:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:167:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:167:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:167:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:167:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:167:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:167:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:167:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:167:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:167:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:167:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:167:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:167:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:167:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:167:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:167:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:167:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:167:23: note: examining phi: i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: examining phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(17)>
compiler-optimizations.cpp:167:23: note: ==> examining statement: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:167:23: note: irrelevant.
compiler-optimizations.cpp:167:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:167:23: note: irrelevant.
compiler-optimizations.cpp:167:23: note: ==> examining statement: _3 = a_12(D) + _2;
compiler-optimizations.cpp:167:23: note: irrelevant.
compiler-optimizations.cpp:167:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:167:23: note: not ssa-name.
compiler-optimizations.cpp:167:23: note: use not simple.
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:167:23: note: not ssa-name.
compiler-optimizations.cpp:167:23: note: use not simple.
compiler-optimizations.cpp:167:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:167:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:167:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:167:23: note: ==> examining statement: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:167:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:167:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
compiler-optimizations.cpp:167:23: note: ==> examining statement: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand -1
compiler-optimizations.cpp:167:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:167:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
compiler-optimizations.cpp:167:23: note: ==> examining statement: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4 > 0
compiler-optimizations.cpp:167:23: note: not ssa-name.
compiler-optimizations.cpp:167:23: note: use not simple.
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:167:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:167:23: note: def_stmt: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
compiler-optimizations.cpp:167:23: note: ==> examining statement: *_3 = cstore_18;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand cstore_18
compiler-optimizations.cpp:167:23: note: def_stmt: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:167:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:167:23: note: ==> examining statement: i_15 = i_16 + 1;
compiler-optimizations.cpp:167:23: note: irrelevant.
compiler-optimizations.cpp:167:23: note: ==> examining statement: if (n_11(D) <= i_15)
compiler-optimizations.cpp:167:23: note: irrelevant.
compiler-optimizations.cpp:167:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:167:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:167:23: note: Cost model analysis: 
  Vector inside of loop cost: 36
  Vector prologue cost: 44
  Vector epilogue cost: 72
  Scalar iteration cost: 36
  Scalar outside cost: 32
  Vector outside cost: 116
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 3
compiler-optimizations.cpp:167:23: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:167:23: note:   Static estimate profitability threshold = 4
compiler-optimizations.cpp:167:23: note: epilog loop required
compiler-optimizations.cpp:167:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:167:23: note: Analyze phi: i_16 = PHI <i_15(9), 0(17)>
compiler-optimizations.cpp:167:23: note: Analyze phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(17)>
compiler-optimizations.cpp:167:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:167:23: note: loop vectorized
compiler-optimizations.cpp:167:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:167:23: note: Profitability threshold is 4 loop iterations.
split exit edge
split exit edge of scalar loop
compiler-optimizations.cpp:167:23: note: vect_update_ivs_after_vectorizer: phi: i_16 = PHI <i_15(9), 0(21)>
compiler-optimizations.cpp:167:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(21)>
compiler-optimizations.cpp:167:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:167:23: note: ------>vectorizing phi: i_16 = PHI <i_15(9), 0(31)>
compiler-optimizations.cpp:167:23: note: ------>vectorizing phi: .MEM_19 = PHI <.MEM_17(9), .MEM_10(D)(31)>
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: _3 = a_12(D) + _2;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: _4 = *_3;
compiler-optimizations.cpp:167:23: note: transform statement.
compiler-optimizations.cpp:167:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:167:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_12(D)
compiler-optimizations.cpp:167:23: note: created a_12(D)
compiler-optimizations.cpp:167:23: note: add new stmt: vect__4.233_53 = MEM[(int *)vectp_a.231_51];
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: transform statement.
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:167:23: note: transform binary/unary operation.
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: 1
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:167:23: note: created new init_stmt: vect_cst__54 = { 1, 1, 1, 1 };
compiler-optimizations.cpp:167:23: note: add new stmt: vect__5.234_55 = vect__4.233_53 + vect_cst__54;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: transform statement.
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand -1
compiler-optimizations.cpp:167:23: note: transform binary/unary operation.
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: -1
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand -1
compiler-optimizations.cpp:167:23: note: created new init_stmt: vect_cst__56 = { -1, -1, -1, -1 };
compiler-optimizations.cpp:167:23: note: add new stmt: vect__6.235_57 = vect__4.233_53 + vect_cst__56;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: transform statement.
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:167:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:167:23: note: def_stmt: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:167:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: 0
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:167:23: note: created new init_stmt: vect_cst__58 = { 0, 0, 0, 0 };
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: _5
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:167:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note:   def_stmt =  _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:167:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: _6
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:167:23: note: def_stmt: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note:   def_stmt =  _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:167:23: note: def_stmt: _6 = _4 + -1;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: add new stmt: vect_cstore_18.236_59 = VEC_COND_EXPR <vect__4.233_53 > vect_cst__58, vect__5.234_55, vect__6.235_57>;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: *_3 = cstore_18;
compiler-optimizations.cpp:167:23: note: transform statement.
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand cstore_18
compiler-optimizations.cpp:167:23: note: def_stmt: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:167:23: note: vect_get_vec_def_for_operand: cstore_18
compiler-optimizations.cpp:167:23: note: vect_is_simple_use: operand cstore_18
compiler-optimizations.cpp:167:23: note: def_stmt: cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: type of def: internal
compiler-optimizations.cpp:167:23: note:   def_stmt =  cstore_18 = _4 > 0 ? _5 : _6;
compiler-optimizations.cpp:167:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_12(D)
compiler-optimizations.cpp:167:23: note: created a_12(D)
compiler-optimizations.cpp:167:23: note: add new stmt: MEM[(int *)vectp_a.237_60] = vect_cstore_18.236_59;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: i_15 = i_16 + 1;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: vectp_a.231_52 = vectp_a.231_51 + 16;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: vectp_a.237_61 = vectp_a.237_60 + 16;
compiler-optimizations.cpp:167:23: note: ------>vectorizing statement: if (n_11(D) <= i_15)
compiler-optimizations.cpp:167:23: note: New loop exit condition: if (ivtmp_64 >= bnd.228_47)
compiler-optimizations.cpp:167:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:166:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:167:23: note: loop with 2 iterations completely unrolled (header execution count 64530392)
compiler-optimizations.cpp:166:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:167:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:167:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:167:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:171:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:171:17: note: not vectorized: no vectype for stmt: vect__4.233_53 = MEM[(int *)vectp_a.231_51];
 scalar_type: vector(4) int
compiler-optimizations.cpp:171:17: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.237_60] = vect_cstore_18.236_59;
 scalar_type: vector(4) int
compiler-optimizations.cpp:171:17: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:171:17: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:171:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:171:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:171:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:171:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:171:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:168:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:168:9: note: got vectype for stmt: _3 = *_2;
vector(4) int
compiler-optimizations.cpp:168:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:168:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:169:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:169:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:169:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:171:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:171:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:171:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:23: note: got vectype for stmt: *_2 = cstore_6;
vector(4) int
compiler-optimizations.cpp:167:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:167:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:168:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:168:9: note: got vectype for stmt: _22 = *_7;
vector(4) int
compiler-optimizations.cpp:168:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:168:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:169:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:169:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:169:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:171:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:171:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:171:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:167:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:23: note: got vectype for stmt: *_7 = cstore_26;
vector(4) int
compiler-optimizations.cpp:167:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:167:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:168:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:168:9: note: got vectype for stmt: _36 = *_35;
vector(4) int
compiler-optimizations.cpp:168:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:168:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:167:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:167:5: note: got vectype for stmt: *_35 = cstore_37;
vector(4) int
compiler-optimizations.cpp:167:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:167:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:171:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:171:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:171:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:169:17: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:169:17: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:169:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:169:17: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:174:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:174:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:177
compiler-optimizations.cpp:177:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:177:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:177:23: note: === get_loop_niters ===
compiler-optimizations.cpp:177:23: note: Symbolic number of iterations is (unsigned int) n_9(D)
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:23: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:177:23: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:177:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:177:23: note: Analyze phi: i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:177:23: note: step: 1,  init: 0
compiler-optimizations.cpp:177:23: note: Detected induction.
compiler-optimizations.cpp:177:23: note: Analyze phi: .MEM_16 = PHI <.MEM_8(D)(5), .MEM_11(6)>
compiler-optimizations.cpp:177:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:177:23: note: def_stmt: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand i_15
compiler-optimizations.cpp:177:23: note: def_stmt: i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: type of def: induction
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:177:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:177:23: note: init: phi relevant? i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: init: phi relevant? .MEM_16 = PHI <.MEM_8(D)(5), .MEM_11(6)>
compiler-optimizations.cpp:177:23: note: init: stmt relevant? _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? _3 = a_10(D) + _2;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? *_3 = _5;
compiler-optimizations.cpp:177:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:177:23: note: mark relevant 5, live 0: *_3 = _5;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? i_12 = i_15 + 1;
compiler-optimizations.cpp:177:23: note: init: stmt relevant? if (n_9(D) <= i_12)
compiler-optimizations.cpp:177:23: note: worklist: examine stmt: *_3 = _5;
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:177:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: mark relevant 5, live 0: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: worklist: examine stmt: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:177:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:177:23: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:177:23: note: dependence distance  = 0.
compiler-optimizations.cpp:177:23: note: dependence distance == 0 between *_3 and *_3
compiler-optimizations.cpp:177:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:177:23: note: ==> examining phi: i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: ==> examining phi: .MEM_16 = PHI <.MEM_8(D)(5), .MEM_11(6)>
compiler-optimizations.cpp:177:23: note: ==> examining statement: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:177:23: note: skip.
compiler-optimizations.cpp:177:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:177:23: note: skip.
compiler-optimizations.cpp:177:23: note: ==> examining statement: _3 = a_10(D) + _2;
compiler-optimizations.cpp:177:23: note: skip.
compiler-optimizations.cpp:177:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:177:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:177:23: note: vectype: vector(4) int
compiler-optimizations.cpp:177:23: note: nunits = 4
compiler-optimizations.cpp:177:23: note: ==> examining statement: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:177:23: note: vectype: vector(4) int
compiler-optimizations.cpp:177:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:177:23: note: vectype: vector(4) int
compiler-optimizations.cpp:177:23: note: nunits = 4
compiler-optimizations.cpp:177:23: note: ==> examining statement: *_3 = _5;
compiler-optimizations.cpp:177:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:177:23: note: vectype: vector(4) int
compiler-optimizations.cpp:177:23: note: nunits = 4
compiler-optimizations.cpp:177:23: note: ==> examining statement: i_12 = i_15 + 1;
compiler-optimizations.cpp:177:23: note: skip.
compiler-optimizations.cpp:177:23: note: ==> examining statement: if (n_9(D) <= i_12)
compiler-optimizations.cpp:177:23: note: skip.
compiler-optimizations.cpp:177:23: note: vectorization factor = 4
compiler-optimizations.cpp:177:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:177:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:177:23: note: accesses have the same alignment: *_3 and *_3
compiler-optimizations.cpp:177:23: note: recording new base alignment for a_10(D)
compiler-optimizations.cpp:177:23: note:   alignment:    4
compiler-optimizations.cpp:177:23: note:   misalignment: 0
compiler-optimizations.cpp:177:23: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:177:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:177:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:177:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:177:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:177:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:177:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:177:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:177:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:177:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:177:23: note: Analyze phi: i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: Analyze phi: .MEM_16 = PHI <.MEM_8(D)(5), .MEM_11(6)>
compiler-optimizations.cpp:177:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:177:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:177:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:177:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:177:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:177:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:177:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:177:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:177:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:177:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:177:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:177:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:177:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:177:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:177:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:177:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:177:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:177:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:177:23: note: examining phi: i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: examining phi: .MEM_16 = PHI <.MEM_8(D)(5), .MEM_11(6)>
compiler-optimizations.cpp:177:23: note: ==> examining statement: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:177:23: note: irrelevant.
compiler-optimizations.cpp:177:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:177:23: note: irrelevant.
compiler-optimizations.cpp:177:23: note: ==> examining statement: _3 = a_10(D) + _2;
compiler-optimizations.cpp:177:23: note: irrelevant.
compiler-optimizations.cpp:177:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:177:23: note: not ssa-name.
compiler-optimizations.cpp:177:23: note: use not simple.
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:177:23: note: not ssa-name.
compiler-optimizations.cpp:177:23: note: use not simple.
compiler-optimizations.cpp:177:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:177:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:177:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:177:23: note: ==> examining statement: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:177:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:177:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:177:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
compiler-optimizations.cpp:177:23: note: ==> examining statement: *_3 = _5;
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:177:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:177:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:177:23: note: ==> examining statement: i_12 = i_15 + 1;
compiler-optimizations.cpp:177:23: note: irrelevant.
compiler-optimizations.cpp:177:23: note: ==> examining statement: if (n_9(D) <= i_12)
compiler-optimizations.cpp:177:23: note: irrelevant.
compiler-optimizations.cpp:177:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:177:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:177:23: note: Cost model analysis: 
  Vector inside of loop cost: 28
  Vector prologue cost: 36
  Vector epilogue cost: 56
  Scalar iteration cost: 28
  Scalar outside cost: 32
  Vector outside cost: 92
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 3
compiler-optimizations.cpp:177:23: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:177:23: note:   Static estimate profitability threshold = 5
compiler-optimizations.cpp:177:23: note: epilog loop required
compiler-optimizations.cpp:177:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:177:23: note: Analyze phi: i_15 = PHI <0(5), i_12(6)>
compiler-optimizations.cpp:177:23: note: Analyze phi: .MEM_16 = PHI <.MEM_8(D)(5), .MEM_11(6)>
compiler-optimizations.cpp:177:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:177:23: note: loop vectorized
compiler-optimizations.cpp:177:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:177:23: note: Profitability threshold is 4 loop iterations.
split exit edge
compiler-optimizations.cpp:177:23: note: vect_update_ivs_after_vectorizer: phi: i_15 = PHI <i_12(6), 0(9)>
compiler-optimizations.cpp:177:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_16 = PHI <.MEM_11(6), .MEM_8(D)(9)>
compiler-optimizations.cpp:177:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:177:23: note: ------>vectorizing phi: i_15 = PHI <i_12(6), 0(16)>
compiler-optimizations.cpp:177:23: note: ------>vectorizing phi: .MEM_16 = PHI <.MEM_11(6), .MEM_8(D)(16)>
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_15;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: _3 = a_10(D) + _2;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: _4 = *_3;
compiler-optimizations.cpp:177:23: note: transform statement.
compiler-optimizations.cpp:177:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:177:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_10(D)
compiler-optimizations.cpp:177:23: note: created a_10(D)
compiler-optimizations.cpp:177:23: note: add new stmt: vect__4.251_36 = MEM[(int *)vectp_a.249_34];
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: transform statement.
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:177:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:177:23: note: transform binary/unary operation.
compiler-optimizations.cpp:177:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:177:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:177:23: note: vect_get_vec_def_for_operand: 1
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand 1
compiler-optimizations.cpp:177:23: note: created new init_stmt: vect_cst__37 = { 1, 1, 1, 1 };
compiler-optimizations.cpp:177:23: note: add new stmt: vect__5.252_38 = vect__4.251_36 + vect_cst__37;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: *_3 = _5;
compiler-optimizations.cpp:177:23: note: transform statement.
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:177:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:177:23: note: vect_get_vec_def_for_operand: _5
compiler-optimizations.cpp:177:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:177:23: note: def_stmt: _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: type of def: internal
compiler-optimizations.cpp:177:23: note:   def_stmt =  _5 = _4 + 1;
compiler-optimizations.cpp:177:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_10(D)
compiler-optimizations.cpp:177:23: note: created a_10(D)
compiler-optimizations.cpp:177:23: note: add new stmt: MEM[(int *)vectp_a.253_39] = vect__5.252_38;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: i_12 = i_15 + 1;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: vectp_a.249_35 = vectp_a.249_34 + 16;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: vectp_a.253_40 = vectp_a.253_39 + 16;
compiler-optimizations.cpp:177:23: note: ------>vectorizing statement: if (n_9(D) <= i_12)
compiler-optimizations.cpp:177:23: note: New loop exit condition: if (ivtmp_43 >= bnd.246_30)
compiler-optimizations.cpp:177:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:176:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:177:23: note: loop with 2 iterations completely unrolled (header execution count 64530389)
compiler-optimizations.cpp:176:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:177:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:177:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:177:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:178:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:178:14: note: not vectorized: no vectype for stmt: vect__4.251_36 = MEM[(int *)vectp_a.249_34];
 scalar_type: vector(4) int
compiler-optimizations.cpp:178:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.253_39] = vect__5.252_38;
 scalar_type: vector(4) int
compiler-optimizations.cpp:178:14: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:178:14: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:178:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:178:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:178:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:178:14: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:178:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:23: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:177:23: note: got vectype for stmt: *_3 = _5;
vector(4) int
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:177:23: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:177:23: note: not consecutive access *_3 = _5;
compiler-optimizations.cpp:177:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:177:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:23: note: got vectype for stmt: _48 = *_47;
vector(4) int
compiler-optimizations.cpp:177:23: note: got vectype for stmt: *_47 = _49;
vector(4) int
compiler-optimizations.cpp:177:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:177:23: note: not consecutive access _48 = *_47;
compiler-optimizations.cpp:177:23: note: not consecutive access *_47 = _49;
compiler-optimizations.cpp:177:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:177:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:177:5: note: got vectype for stmt: _22 = *_6;
vector(4) int
compiler-optimizations.cpp:177:5: note: got vectype for stmt: *_6 = _19;
vector(4) int
compiler-optimizations.cpp:177:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:177:5: note: not consecutive access _22 = *_6;
compiler-optimizations.cpp:177:5: note: not consecutive access *_6 = _19;
compiler-optimizations.cpp:177:5: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:177:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:177:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:180:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:180:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *pivot_13(D) and *_3

Analyzing loop at compiler-optimizations.cpp:183
compiler-optimizations.cpp:183:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:183:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:183:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:183:23: note: bad loop form.
compiler-optimizations.cpp:182:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:182:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:183:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:183:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:183:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:183:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:184:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:184:9: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:184:9: note: got vectype for stmt: _5 = *pivot_13(D);
vector(4) int
compiler-optimizations.cpp:184:9: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:184:9: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:184:9: note: not consecutive access _5 = *pivot_13(D);
compiler-optimizations.cpp:184:9: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:184:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:185:19: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:185:19: note: got vectype for stmt: *_3 = _6;
vector(4) int
compiler-optimizations.cpp:185:19: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:185:19: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:183:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:183:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:183:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:183:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:188:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:188:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:194
compiler-optimizations.cpp:194:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:194:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:194:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:194:23: note: bad loop form.
compiler-optimizations.cpp:192:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:192:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:194:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:194:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:194:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:195:20: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:195:20: note: got vectype for stmt: pivot.1_5 = pivot;
vector(4) int
compiler-optimizations.cpp:195:20: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:195:20: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:195:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:195:9: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:195:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:195:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:196:19: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:196:19: note: got vectype for stmt: *_3 = _6;
vector(4) int
compiler-optimizations.cpp:196:19: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:196:19: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:194:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:194:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:194:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:194:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:199:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:199:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:207
compiler-optimizations.cpp:207:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:207:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:207:23: note: === get_loop_niters ===
compiler-optimizations.cpp:207:23: note: not vectorized: number of iterations cannot be computed.
compiler-optimizations.cpp:207:23: note: bad loop form.
compiler-optimizations.cpp:206:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:206:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:207:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:207:23: note: got vectype for stmt: _13 = str_8(D)->n;
vector(4) int
compiler-optimizations.cpp:207:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:207:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:207:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:207:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:207:23: note: got vectype for stmt: _2 = str_8(D)->p;
vector(2) long unsigned int
compiler-optimizations.cpp:207:23: note: got vectype for stmt: *_4 = 0;
vector(16) char
compiler-optimizations.cpp:207:23: note: got vectype for stmt: _1 = str_8(D)->n;
vector(4) int
compiler-optimizations.cpp:207:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:207:23: note: not consecutive access *_4 = 0;
compiler-optimizations.cpp:207:23: note: not consecutive access _1 = str_8(D)->n;
compiler-optimizations.cpp:207:23: note: not consecutive access _2 = str_8(D)->p;
compiler-optimizations.cpp:207:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:207:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:207:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:210:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:210:1: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:215:23: note: Loop 1 distributed: split to 0 loops and 1 library calls.
compiler-optimizations.cpp:212:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:212:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:215:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:215:23: note: got vectype for stmt: n_7 = str_6(D)->n;
vector(4) int
compiler-optimizations.cpp:215:23: note: got vectype for stmt: p_8 = str_6(D)->p;
vector(2) long unsigned int
compiler-optimizations.cpp:215:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:215:23: note: not consecutive access n_7 = str_6(D)->n;
compiler-optimizations.cpp:215:23: note: not consecutive access p_8 = str_6(D)->p;
compiler-optimizations.cpp:215:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:215:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:216:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:216:14: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:216:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:218:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:218:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_4 and *_7

Analyzing loop at compiler-optimizations.cpp:221
compiler-optimizations.cpp:221:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:221:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:221:23: note: === get_loop_niters ===
compiler-optimizations.cpp:221:23: note: Symbolic number of iterations is (unsigned int) n_12(D)
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: got vectype for stmt: _8 = *_4;
vector(4) int
compiler-optimizations.cpp:221:23: note: got vectype for stmt: *_7 = _8;
vector(4) int
compiler-optimizations.cpp:221:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:221:23: note: Analyze phi: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:221:23: note: step: 1,  init: 0
compiler-optimizations.cpp:221:23: note: Detected induction.
compiler-optimizations.cpp:221:23: note: Analyze phi: .MEM_20 = PHI <.MEM_11(D)(5), .MEM_15(6)>
compiler-optimizations.cpp:221:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand i_19
compiler-optimizations.cpp:221:23: note: def_stmt: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: type of def: induction
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _2
compiler-optimizations.cpp:221:23: note: def_stmt: _2 = (long unsigned int) _1;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:221:23: note: def_stmt: _1 = i_19 * 2;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:221:23: note: def_stmt: _5 = (long unsigned int) i_19;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand i_19
compiler-optimizations.cpp:221:23: note: def_stmt: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: type of def: induction
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:221:23: note: Detected single element interleaving *_4 step 8
compiler-optimizations.cpp:221:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:221:23: note: init: phi relevant? i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: init: phi relevant? .MEM_20 = PHI <.MEM_11(D)(5), .MEM_15(6)>
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _1 = i_19 * 2;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _2 = (long unsigned int) _1;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _3 = _2 * 4;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _4 = v2_13(D) + _3;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _5 = (long unsigned int) i_19;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _6 = _5 * 4;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _7 = v1_14(D) + _6;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? _8 = *_4;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? *_7 = _8;
compiler-optimizations.cpp:221:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:221:23: note: mark relevant 5, live 0: *_7 = _8;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? i_16 = i_19 + 1;
compiler-optimizations.cpp:221:23: note: init: stmt relevant? if (n_12(D) <= i_16)
compiler-optimizations.cpp:221:23: note: worklist: examine stmt: *_7 = _8;
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:221:23: note: def_stmt: _8 = *_4;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note: mark relevant 5, live 0: _8 = *_4;
compiler-optimizations.cpp:221:23: note: worklist: examine stmt: _8 = *_4;
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:221:23: note: versioning for alias required: can't determine dependence between *_4 and *_7
consider run-time aliasing test between *_4 and *_7
compiler-optimizations.cpp:221:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:221:23: note: ==> examining phi: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: ==> examining phi: .MEM_20 = PHI <.MEM_11(D)(5), .MEM_15(6)>
compiler-optimizations.cpp:221:23: note: ==> examining statement: _1 = i_19 * 2;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _2 = (long unsigned int) _1;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _3 = _2 * 4;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _4 = v2_13(D) + _3;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _5 = (long unsigned int) i_19;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _6 = _5 * 4;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _7 = v1_14(D) + _6;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _8 = *_4;
compiler-optimizations.cpp:221:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:221:23: note: vectype: vector(4) int
compiler-optimizations.cpp:221:23: note: nunits = 4
compiler-optimizations.cpp:221:23: note: ==> examining statement: *_7 = _8;
compiler-optimizations.cpp:221:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:221:23: note: vectype: vector(4) int
compiler-optimizations.cpp:221:23: note: nunits = 4
compiler-optimizations.cpp:221:23: note: ==> examining statement: i_16 = i_19 + 1;
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: ==> examining statement: if (n_12(D) <= i_16)
compiler-optimizations.cpp:221:23: note: skip.
compiler-optimizations.cpp:221:23: note: vectorization factor = 4
compiler-optimizations.cpp:221:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:221:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:221:23: note: recording new base alignment for v2_13(D)
compiler-optimizations.cpp:221:23: note:   alignment:    4
compiler-optimizations.cpp:221:23: note:   misalignment: 0
compiler-optimizations.cpp:221:23: note:   based on:     _8 = *_4;
compiler-optimizations.cpp:221:23: note: recording new base alignment for v1_14(D)
compiler-optimizations.cpp:221:23: note:   alignment:    4
compiler-optimizations.cpp:221:23: note:   misalignment: 0
compiler-optimizations.cpp:221:23: note:   based on:     *_7 = _8;
compiler-optimizations.cpp:221:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:221:23: note: can't force alignment of ref: *_4
compiler-optimizations.cpp:221:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:221:23: note: can't force alignment of ref: *_7
compiler-optimizations.cpp:221:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:221:23: note: improved number of alias checks from 1 to 1
compiler-optimizations.cpp:221:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:221:23: note: vector alignment may not be reachable
compiler-optimizations.cpp:221:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:221:23: note: Analyze phi: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: Analyze phi: .MEM_20 = PHI <.MEM_11(D)(5), .MEM_15(6)>
compiler-optimizations.cpp:221:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:221:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:221:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:221:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:221:23: note: examining phi: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: examining phi: .MEM_20 = PHI <.MEM_11(D)(5), .MEM_15(6)>
compiler-optimizations.cpp:221:23: note: ==> examining statement: _1 = i_19 * 2;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _2 = (long unsigned int) _1;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _3 = _2 * 4;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _4 = v2_13(D) + _3;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _5 = (long unsigned int) i_19;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _6 = _5 * 4;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _7 = v1_14(D) + _6;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: _8 = *_4;
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand *_4
compiler-optimizations.cpp:221:23: note: not ssa-name.
compiler-optimizations.cpp:221:23: note: use not simple.
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand *_4
compiler-optimizations.cpp:221:23: note: not ssa-name.
compiler-optimizations.cpp:221:23: note: use not simple.
compiler-optimizations.cpp:221:23: note: no array mode for V4SI[2]
compiler-optimizations.cpp:221:23: note: Data access with gaps requires scalar epilogue loop
compiler-optimizations.cpp:221:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:221:23: note: vect_model_load_cost: strided group_size = 2 .
compiler-optimizations.cpp:221:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:221:23: note: vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:221:23: note: ==> examining statement: *_7 = _8;
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:221:23: note: def_stmt: _8 = *_4;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:221:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:221:23: note: ==> examining statement: i_16 = i_19 + 1;
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: ==> examining statement: if (n_12(D) <= i_16)
compiler-optimizations.cpp:221:23: note: irrelevant.
compiler-optimizations.cpp:221:23: note: not using a fully-masked loop.
cost model: Adding cost of checks for loop versioning aliasing.
compiler-optimizations.cpp:221:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:221:23: note: Cost model analysis: 
  Vector inside of loop cost: 32
  Vector prologue cost: 52
  Vector epilogue cost: 48
  Scalar iteration cost: 24
  Scalar outside cost: 8
  Vector outside cost: 100
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5
compiler-optimizations.cpp:221:23: note:   Runtime profitability threshold = 5
compiler-optimizations.cpp:221:23: note:   Static estimate profitability threshold = 5
compiler-optimizations.cpp:221:23: note: epilog loop required
compiler-optimizations.cpp:221:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:221:23: note: Analyze phi: i_19 = PHI <0(5), i_16(6)>
compiler-optimizations.cpp:221:23: note: Analyze phi: .MEM_20 = PHI <.MEM_11(D)(5), .MEM_15(6)>
compiler-optimizations.cpp:221:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:221:23: note: loop vectorized
compiler-optimizations.cpp:221:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:221:23: note: Profitability threshold is 5 loop iterations.
split exit edge
create runtime check for data references *_4 and *_7
compiler-optimizations.cpp:221:23: note: created 1 versioning for alias checks.
compiler-optimizations.cpp:221:23: note: loop versioned for vectorization because of possible aliasing
compiler-optimizations.cpp:221:23: note: vect_update_ivs_after_vectorizer: phi: i_19 = PHI <i_16(6), 0(12)>
compiler-optimizations.cpp:221:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_20 = PHI <.MEM_15(6), .MEM_11(D)(12)>
compiler-optimizations.cpp:221:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:221:23: note: ------>vectorizing phi: i_19 = PHI <i_16(6), 0(19)>
compiler-optimizations.cpp:221:23: note: ------>vectorizing phi: .MEM_20 = PHI <.MEM_15(6), .MEM_11(D)(19)>
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _1 = i_19 * 2;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _2 = (long unsigned int) _1;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _3 = _2 * 4;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _4 = v2_13(D) + _3;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _5 = (long unsigned int) i_19;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _6 = _5 * 4;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _7 = v1_14(D) + _6;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: _8 = *_4;
compiler-optimizations.cpp:221:23: note: transform statement.
compiler-optimizations.cpp:221:23: note: no array mode for V4SI[2]
compiler-optimizations.cpp:221:23: note: Data access with gaps requires scalar epilogue loop
compiler-optimizations.cpp:221:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:221:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *v2_13(D)
compiler-optimizations.cpp:221:23: note: created v2_13(D)
compiler-optimizations.cpp:221:23: note: add new stmt: vect__8.281_68 = MEM[(int *)vectp_v2.279_66];
compiler-optimizations.cpp:221:23: note: add new stmt: vectp_v2.279_69 = vectp_v2.279_66 + 16;
compiler-optimizations.cpp:221:23: note: add new stmt: vect__8.282_70 = MEM[(int *)vectp_v2.279_69];
compiler-optimizations.cpp:221:23: note: add new stmt: vect_perm_even_71 = VEC_PERM_EXPR <vect__8.281_68, vect__8.282_70, { 0, 2, 4, 6 }>;
compiler-optimizations.cpp:221:23: note: add new stmt: vect_perm_odd_72 = VEC_PERM_EXPR <vect__8.281_68, vect__8.282_70, { 1, 3, 5, 7 }>;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: *_7 = _8;
compiler-optimizations.cpp:221:23: note: transform statement.
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:221:23: note: def_stmt: _8 = *_4;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:221:23: note: vect_get_vec_def_for_operand: _8
compiler-optimizations.cpp:221:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:221:23: note: def_stmt: _8 = *_4;
compiler-optimizations.cpp:221:23: note: type of def: internal
compiler-optimizations.cpp:221:23: note:   def_stmt =  _8 = *_4;
compiler-optimizations.cpp:221:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *v1_14(D)
compiler-optimizations.cpp:221:23: note: created v1_14(D)
compiler-optimizations.cpp:221:23: note: add new stmt: MEM[(int *)vectp_v1.283_73] = vect_perm_even_71;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: i_16 = i_19 + 1;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: vectp_v2.279_67 = vectp_v2.279_69 + 16;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: vectp_v1.283_74 = vectp_v1.283_73 + 16;
compiler-optimizations.cpp:221:23: note: ------>vectorizing statement: if (n_12(D) <= i_16)
compiler-optimizations.cpp:221:23: note: New loop exit condition: if (ivtmp_77 >= bnd.276_63)
compiler-optimizations.cpp:221:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:220:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:221:23: note: loop with 3 iterations completely unrolled (header execution count 59284692)
compiler-optimizations.cpp:220:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:222:15: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:222:15: note: not vectorized: no vectype for stmt: vect__8.281_68 = MEM[(int *)vectp_v2.279_66];
 scalar_type: vector(4) int
compiler-optimizations.cpp:222:15: note: not vectorized: no vectype for stmt: vect__8.282_70 = MEM[(int *)vectp_v2.279_69];
 scalar_type: vector(4) int
compiler-optimizations.cpp:222:15: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_v1.283_73] = vect_perm_even_71;
 scalar_type: vector(4) int
compiler-optimizations.cpp:222:15: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:222:15: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:222:15: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:222:15: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: got vectype for stmt: _7 = *_3;
vector(4) int
compiler-optimizations.cpp:221:23: note: got vectype for stmt: *_6 = _7;
vector(4) int
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:221:23: note: not consecutive access _7 = *_3;
compiler-optimizations.cpp:221:23: note: not consecutive access *_6 = _7;
compiler-optimizations.cpp:221:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: got vectype for stmt: _85 = *_81;
vector(4) int
compiler-optimizations.cpp:221:23: note: got vectype for stmt: *_84 = _85;
vector(4) int
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:221:23: note: not consecutive access _85 = *_81;
compiler-optimizations.cpp:221:23: note: not consecutive access *_84 = _85;
compiler-optimizations.cpp:221:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: got vectype for stmt: _97 = *_93;
vector(4) int
compiler-optimizations.cpp:221:23: note: got vectype for stmt: *_96 = _97;
vector(4) int
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:221:23: note: not consecutive access _97 = *_93;
compiler-optimizations.cpp:221:23: note: not consecutive access *_96 = _97;
compiler-optimizations.cpp:221:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:5: note: got vectype for stmt: _58 = *_54;
vector(4) int
compiler-optimizations.cpp:221:5: note: got vectype for stmt: *_57 = _58;
vector(4) int
compiler-optimizations.cpp:221:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:221:5: note: not consecutive access _58 = *_54;
compiler-optimizations.cpp:221:5: note: not consecutive access *_57 = _58;
compiler-optimizations.cpp:221:5: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:221:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:221:23: note: got vectype for stmt: _44 = *_40;
vector(4) int
compiler-optimizations.cpp:221:23: note: got vectype for stmt: *_43 = _44;
vector(4) int
compiler-optimizations.cpp:221:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:221:23: note: not consecutive access _44 = *_40;
compiler-optimizations.cpp:221:23: note: not consecutive access *_43 = _44;
compiler-optimizations.cpp:221:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:221:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:224:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:224:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:227
compiler-optimizations.cpp:227:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:227:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:227:23: note: === get_loop_niters ===
compiler-optimizations.cpp:227:23: note: Symbolic number of iterations is (unsigned int) n_8(D)
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:23: note: got vectype for stmt: *_3 = _4;
vector(4) int
compiler-optimizations.cpp:227:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:227:23: note: Analyze phi: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:227:23: note: step: 1,  init: 0
compiler-optimizations.cpp:227:23: note: Detected induction.
compiler-optimizations.cpp:227:23: note: Analyze phi: .MEM_15 = PHI <.MEM_7(D)(5), .MEM_10(6)>
compiler-optimizations.cpp:227:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:227:23: note: def_stmt: _1 = (long unsigned int) i_14;
compiler-optimizations.cpp:227:23: note: type of def: internal
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_14
compiler-optimizations.cpp:227:23: note: def_stmt: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: type of def: induction
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_14
compiler-optimizations.cpp:227:23: note: def_stmt: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: type of def: induction
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:227:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:227:23: note: init: phi relevant? i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: init: phi relevant? .MEM_15 = PHI <.MEM_7(D)(5), .MEM_10(6)>
compiler-optimizations.cpp:227:23: note: init: stmt relevant? _1 = (long unsigned int) i_14;
compiler-optimizations.cpp:227:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:227:23: note: init: stmt relevant? _3 = a_9(D) + _2;
compiler-optimizations.cpp:227:23: note: init: stmt relevant? _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: init: stmt relevant? *_3 = _4;
compiler-optimizations.cpp:227:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:227:23: note: mark relevant 5, live 0: *_3 = _4;
compiler-optimizations.cpp:227:23: note: init: stmt relevant? i_11 = i_14 + 1;
compiler-optimizations.cpp:227:23: note: init: stmt relevant? if (n_8(D) <= i_11)
compiler-optimizations.cpp:227:23: note: worklist: examine stmt: *_3 = _4;
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:227:23: note: def_stmt: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: type of def: internal
compiler-optimizations.cpp:227:23: note: mark relevant 5, live 0: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: worklist: examine stmt: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_14
compiler-optimizations.cpp:227:23: note: def_stmt: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: type of def: induction
compiler-optimizations.cpp:227:23: note: mark relevant 5, live 0: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: worklist: examine stmt: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand 0
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_11
compiler-optimizations.cpp:227:23: note: def_stmt: i_11 = i_14 + 1;
compiler-optimizations.cpp:227:23: note: type of def: internal
compiler-optimizations.cpp:227:23: note: induction value on backedge.
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:227:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:227:23: note: ==> examining phi: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:227:23: note: vectype: vector(4) int
compiler-optimizations.cpp:227:23: note: nunits = 4
compiler-optimizations.cpp:227:23: note: ==> examining phi: .MEM_15 = PHI <.MEM_7(D)(5), .MEM_10(6)>
compiler-optimizations.cpp:227:23: note: ==> examining statement: _1 = (long unsigned int) i_14;
compiler-optimizations.cpp:227:23: note: skip.
compiler-optimizations.cpp:227:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:227:23: note: skip.
compiler-optimizations.cpp:227:23: note: ==> examining statement: _3 = a_9(D) + _2;
compiler-optimizations.cpp:227:23: note: skip.
compiler-optimizations.cpp:227:23: note: ==> examining statement: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:227:23: note: vectype: vector(4) int
compiler-optimizations.cpp:227:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:227:23: note: vectype: vector(4) int
compiler-optimizations.cpp:227:23: note: nunits = 4
compiler-optimizations.cpp:227:23: note: ==> examining statement: *_3 = _4;
compiler-optimizations.cpp:227:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:227:23: note: vectype: vector(4) int
compiler-optimizations.cpp:227:23: note: nunits = 4
compiler-optimizations.cpp:227:23: note: ==> examining statement: i_11 = i_14 + 1;
compiler-optimizations.cpp:227:23: note: skip.
compiler-optimizations.cpp:227:23: note: ==> examining statement: if (n_8(D) <= i_11)
compiler-optimizations.cpp:227:23: note: skip.
compiler-optimizations.cpp:227:23: note: vectorization factor = 4
compiler-optimizations.cpp:227:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:227:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:227:23: note: recording new base alignment for a_9(D)
compiler-optimizations.cpp:227:23: note:   alignment:    4
compiler-optimizations.cpp:227:23: note:   misalignment: 0
compiler-optimizations.cpp:227:23: note:   based on:     *_3 = _4;
compiler-optimizations.cpp:227:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:227:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:227:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:227:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:227:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:227:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:227:23: note: Analyze phi: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: Analyze phi: .MEM_15 = PHI <.MEM_7(D)(5), .MEM_10(6)>
compiler-optimizations.cpp:227:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:227:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:227:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:227:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:227:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:227:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:227:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:227:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:227:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:227:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:227:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:227:23: note: examining phi: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: === vectorizable_induction ===
compiler-optimizations.cpp:227:23: note: vect_model_induction_cost: inside_cost = 4, prologue_cost = 8 .
compiler-optimizations.cpp:227:23: note: examining phi: .MEM_15 = PHI <.MEM_7(D)(5), .MEM_10(6)>
compiler-optimizations.cpp:227:23: note: ==> examining statement: _1 = (long unsigned int) i_14;
compiler-optimizations.cpp:227:23: note: irrelevant.
compiler-optimizations.cpp:227:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:227:23: note: irrelevant.
compiler-optimizations.cpp:227:23: note: ==> examining statement: _3 = a_9(D) + _2;
compiler-optimizations.cpp:227:23: note: irrelevant.
compiler-optimizations.cpp:227:23: note: ==> examining statement: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_14
compiler-optimizations.cpp:227:23: note: def_stmt: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: type of def: induction
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand 3
compiler-optimizations.cpp:227:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:227:23: note: vect_model_simple_cost: inside_cost = 52, prologue_cost = 4 .
compiler-optimizations.cpp:227:23: note: ==> examining statement: *_3 = _4;
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:227:23: note: def_stmt: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: type of def: internal
compiler-optimizations.cpp:227:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:227:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:227:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:227:23: note: ==> examining statement: i_11 = i_14 + 1;
compiler-optimizations.cpp:227:23: note: irrelevant.
compiler-optimizations.cpp:227:23: note: ==> examining statement: if (n_8(D) <= i_11)
compiler-optimizations.cpp:227:23: note: irrelevant.
compiler-optimizations.cpp:227:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:227:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:227:23: note: Cost model analysis: 
  Vector inside of loop cost: 68
  Vector prologue cost: 44
  Vector epilogue cost: 128
  Scalar iteration cost: 64
  Scalar outside cost: 32
  Vector outside cost: 172
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 3
compiler-optimizations.cpp:227:23: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:227:23: note:   Static estimate profitability threshold = 4
compiler-optimizations.cpp:227:23: note: epilog loop required
compiler-optimizations.cpp:227:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:227:23: note: Analyze phi: i_14 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:227:23: note: Analyze phi: .MEM_15 = PHI <.MEM_7(D)(5), .MEM_10(6)>
compiler-optimizations.cpp:227:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:227:23: note: loop vectorized
compiler-optimizations.cpp:227:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:227:23: note: Profitability threshold is 4 loop iterations.
split exit edge
compiler-optimizations.cpp:227:23: note: vect_update_ivs_after_vectorizer: phi: i_14 = PHI <i_11(6), 0(9)>
compiler-optimizations.cpp:227:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_15 = PHI <.MEM_10(6), .MEM_7(D)(9)>
compiler-optimizations.cpp:227:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:227:23: note: ------>vectorizing phi: i_14 = PHI <i_11(6), 0(16)>
compiler-optimizations.cpp:227:23: note: transform phi.
compiler-optimizations.cpp:227:23: note: transform induction phi.
compiler-optimizations.cpp:227:23: note: created new init_stmt: vect_cst__32 = { 4, 4, 4, 4 };
compiler-optimizations.cpp:227:23: note: transform induction: created def-use cycle: vect_vec_iv_.305_33 = PHI <vect_vec_iv_.305_34(6), { 0, 1, 2, 3 }(16)>
vect_vec_iv_.305_34 = vect_vec_iv_.305_33 + vect_cst__32;
compiler-optimizations.cpp:227:23: note: ------>vectorizing phi: .MEM_15 = PHI <.MEM_10(6), .MEM_7(D)(16)>
compiler-optimizations.cpp:227:23: note: ------>vectorizing phi: vect_vec_iv_.305_33 = PHI <vect_vec_iv_.305_34(6), { 0, 1, 2, 3 }(16)>
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: vect_vec_iv_.305_34 = vect_vec_iv_.305_33 + vect_cst__32;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_14;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: _3 = a_9(D) + _2;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: transform statement.
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_14
compiler-optimizations.cpp:227:23: note: def_stmt: i_14 = PHI <i_11(6), 0(16)>
compiler-optimizations.cpp:227:23: note: type of def: induction
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand 3
compiler-optimizations.cpp:227:23: note: transform binary/unary operation.
compiler-optimizations.cpp:227:23: note: vect_get_vec_def_for_operand: i_14
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand i_14
compiler-optimizations.cpp:227:23: note: def_stmt: i_14 = PHI <i_11(6), 0(16)>
compiler-optimizations.cpp:227:23: note: type of def: induction
compiler-optimizations.cpp:227:23: note:   def_stmt =  i_14 = PHI <i_11(6), 0(16)>
compiler-optimizations.cpp:227:23: note: vect_get_vec_def_for_operand: 3
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand 3
compiler-optimizations.cpp:227:23: note: created new init_stmt: vect_cst__35 = { 3, 3, 3, 3 };
compiler-optimizations.cpp:227:23: note: add new stmt: vect__4.306_36 = vect_vec_iv_.305_33 * vect_cst__35;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: *_3 = _4;
compiler-optimizations.cpp:227:23: note: transform statement.
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:227:23: note: def_stmt: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: type of def: internal
compiler-optimizations.cpp:227:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:227:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:227:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:227:23: note: def_stmt: _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: type of def: internal
compiler-optimizations.cpp:227:23: note:   def_stmt =  _4 = i_14 * 3;
compiler-optimizations.cpp:227:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_9(D)
compiler-optimizations.cpp:227:23: note: created a_9(D)
compiler-optimizations.cpp:227:23: note: add new stmt: MEM[(int *)vectp_a.307_37] = vect__4.306_36;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: i_11 = i_14 + 1;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: vectp_a.307_38 = vectp_a.307_37 + 16;
compiler-optimizations.cpp:227:23: note: ------>vectorizing statement: if (n_8(D) <= i_11)
compiler-optimizations.cpp:227:23: note: New loop exit condition: if (ivtmp_41 >= bnd.302_28)
compiler-optimizations.cpp:227:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:226:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:227:23: note: loop with 2 iterations completely unrolled (header execution count 64530389)
compiler-optimizations.cpp:226:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:227:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:227:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:227:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:228:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:228:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.307_37] = vect__4.306_36;
 scalar_type: vector(4) int
compiler-optimizations.cpp:228:14: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:228:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:228:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:228:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:228:14: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:228:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:23: note: got vectype for stmt: *_3 = _4;
vector(4) int
compiler-optimizations.cpp:227:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:227:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:23: note: got vectype for stmt: *_45 = _46;
vector(4) int
compiler-optimizations.cpp:227:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:227:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:227:5: note: got vectype for stmt: *_13 = _12;
vector(4) int
compiler-optimizations.cpp:227:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:227:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:227:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:230:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:230:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:233
compiler-optimizations.cpp:233:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:233:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:233:23: note: === get_loop_niters ===
compiler-optimizations.cpp:233:23: note: Symbolic number of iterations is (unsigned int) n_12(D)
compiler-optimizations.cpp:233:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:233:23: note: got vectype for stmt: _8 = *_4;
vector(4) int
compiler-optimizations.cpp:233:23: note: not vectorized: not suitable for gather load _8 = *_4;
compiler-optimizations.cpp:233:23: note: bad data references.
compiler-optimizations.cpp:232:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:232:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:233:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:233:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:233:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:233:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:233:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:233:23: note: got vectype for stmt: _8 = *_4;
vector(4) int
compiler-optimizations.cpp:233:23: note: got vectype for stmt: *_7 = _8;
vector(4) int
compiler-optimizations.cpp:233:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:233:23: note: not consecutive access _8 = *_4;
compiler-optimizations.cpp:233:23: note: not consecutive access *_7 = _8;
compiler-optimizations.cpp:233:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:233:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:233:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:236:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:236:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_4 and *_8
consider run-time aliasing test between *_4 and *_12
consider run-time aliasing test between *_4 and *_12
consider run-time aliasing test between *_4 and *_8

Analyzing loop at compiler-optimizations.cpp:239
compiler-optimizations.cpp:239:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:239:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:239:23: note: === get_loop_niters ===
compiler-optimizations.cpp:239:23: note: Symbolic number of iterations is _24 > 0 ? (unsigned int) _24 : 1
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: got vectype for stmt: _9 = *_4;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_8 = _9;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_12 = _9;
vector(4) int
compiler-optimizations.cpp:239:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:239:23: note: Analyze phi: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:239:23: note: step: 1,  init: 0
compiler-optimizations.cpp:239:23: note: Detected induction.
compiler-optimizations.cpp:239:23: note: Analyze phi: .MEM_26 = PHI <.MEM_16(D)(5), .MEM_21(6)>
compiler-optimizations.cpp:239:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _2
compiler-optimizations.cpp:239:23: note: def_stmt: _2 = (long unsigned int) i_25;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_25
compiler-optimizations.cpp:239:23: note: def_stmt: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: type of def: induction
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_25
compiler-optimizations.cpp:239:23: note: def_stmt: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: type of def: induction
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:239:23: note: def_stmt: _6 = (long unsigned int) _5;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:239:23: note: def_stmt: _5 = i_25 * 2;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:239:23: note: def_stmt: _10 = _6 + 1;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:239:23: note: Detected interleaving store *_8 and *_12
compiler-optimizations.cpp:239:23: note: Detected interleaving store of size 2 starting with *_8 = _9;
compiler-optimizations.cpp:239:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:239:23: note: init: phi relevant? i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: init: phi relevant? .MEM_26 = PHI <.MEM_16(D)(5), .MEM_21(6)>
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _2 = (long unsigned int) i_25;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _3 = _2 * 4;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _4 = b_18(D) + _3;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _5 = i_25 * 2;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _6 = (long unsigned int) _5;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _7 = _6 * 4;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _8 = a_19(D) + _7;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _9 = *_4;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? *_8 = _9;
compiler-optimizations.cpp:239:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:239:23: note: mark relevant 5, live 0: *_8 = _9;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _10 = _6 + 1;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _11 = _10 * 4;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? _12 = a_19(D) + _11;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? *_12 = _9;
compiler-optimizations.cpp:239:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:239:23: note: mark relevant 5, live 0: *_12 = _9;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? i_22 = i_25 + 1;
compiler-optimizations.cpp:239:23: note: init: stmt relevant? if (i_22 >= _24)
compiler-optimizations.cpp:239:23: note: worklist: examine stmt: *_12 = _9;
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: mark relevant 5, live 0: _9 = *_4;
compiler-optimizations.cpp:239:23: note: worklist: examine stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: worklist: examine stmt: *_8 = _9;
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: mark relevant 5, live 0: _9 = *_4;
compiler-optimizations.cpp:239:23: note: already marked relevant/live.
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:239:23: note: versioning for alias required: can't determine dependence between *_4 and *_8
consider run-time aliasing test between *_4 and *_8
compiler-optimizations.cpp:239:23: note: versioning for alias required: can't determine dependence between *_4 and *_12
consider run-time aliasing test between *_4 and *_12
compiler-optimizations.cpp:239:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:239:23: note: ==> examining phi: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: ==> examining phi: .MEM_26 = PHI <.MEM_16(D)(5), .MEM_21(6)>
compiler-optimizations.cpp:239:23: note: ==> examining statement: _2 = (long unsigned int) i_25;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _3 = _2 * 4;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _4 = b_18(D) + _3;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _5 = i_25 * 2;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _6 = (long unsigned int) _5;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _7 = _6 * 4;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _8 = a_19(D) + _7;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _9 = *_4;
compiler-optimizations.cpp:239:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:239:23: note: vectype: vector(4) int
compiler-optimizations.cpp:239:23: note: nunits = 4
compiler-optimizations.cpp:239:23: note: ==> examining statement: *_8 = _9;
compiler-optimizations.cpp:239:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:239:23: note: vectype: vector(4) int
compiler-optimizations.cpp:239:23: note: nunits = 4
compiler-optimizations.cpp:239:23: note: ==> examining statement: _10 = _6 + 1;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _11 = _10 * 4;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _12 = a_19(D) + _11;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: *_12 = _9;
compiler-optimizations.cpp:239:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:239:23: note: vectype: vector(4) int
compiler-optimizations.cpp:239:23: note: nunits = 4
compiler-optimizations.cpp:239:23: note: ==> examining statement: i_22 = i_25 + 1;
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: ==> examining statement: if (i_22 >= _24)
compiler-optimizations.cpp:239:23: note: skip.
compiler-optimizations.cpp:239:23: note: vectorization factor = 4
compiler-optimizations.cpp:239:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:239:23: note: Build SLP for *_8 = _9;
compiler-optimizations.cpp:239:23: note: Build SLP for *_12 = _9;
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: Build SLP for _9 = *_4;
compiler-optimizations.cpp:239:23: note: Build SLP failed: not grouped load _9 = *_4;
compiler-optimizations.cpp:239:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:239:23: note: recording new base alignment for b_18(D)
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     _9 = *_4;
compiler-optimizations.cpp:239:23: note: recording new base alignment for a_19(D)
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     *_8 = _9;
compiler-optimizations.cpp:239:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:239:23: note: can't force alignment of ref: *_4
compiler-optimizations.cpp:239:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:239:23: note: can't force alignment of ref: *_8
compiler-optimizations.cpp:239:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:239:23: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:239:23: note: === vect_prune_runtime_alias_test_list ===
found equal ranges *_4, *_8 and *_4, *_8
compiler-optimizations.cpp:239:23: note: improved number of alias checks from 2 to 1
compiler-optimizations.cpp:239:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:239:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:239:23: note: vector alignment may not be reachable
compiler-optimizations.cpp:239:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:239:23: note: Analyze phi: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: Analyze phi: .MEM_26 = PHI <.MEM_16(D)(5), .MEM_21(6)>
compiler-optimizations.cpp:239:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:239:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:239:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:239:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:239:23: note: examining phi: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: examining phi: .MEM_26 = PHI <.MEM_16(D)(5), .MEM_21(6)>
compiler-optimizations.cpp:239:23: note: ==> examining statement: _2 = (long unsigned int) i_25;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _3 = _2 * 4;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _4 = b_18(D) + _3;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _5 = i_25 * 2;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _6 = (long unsigned int) _5;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _7 = _6 * 4;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _8 = a_19(D) + _7;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _9 = *_4;
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand *_4
compiler-optimizations.cpp:239:23: note: not ssa-name.
compiler-optimizations.cpp:239:23: note: use not simple.
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand *_4
compiler-optimizations.cpp:239:23: note: not ssa-name.
compiler-optimizations.cpp:239:23: note: use not simple.
compiler-optimizations.cpp:239:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:239:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:239:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:239:23: note: ==> examining statement: *_8 = _9;
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: no array mode for V4SI[2]
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_model_store_cost: strided group_size = 2 .
compiler-optimizations.cpp:239:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:239:23: note: vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:239:23: note: ==> examining statement: _10 = _6 + 1;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _11 = _10 * 4;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: _12 = a_19(D) + _11;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: *_12 = _9;
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: no array mode for V4SI[2]
compiler-optimizations.cpp:239:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:239:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:239:23: note: ==> examining statement: i_22 = i_25 + 1;
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: ==> examining statement: if (i_22 >= _24)
compiler-optimizations.cpp:239:23: note: irrelevant.
compiler-optimizations.cpp:239:23: note: not using a fully-masked loop.
cost model: Adding cost of checks for loop versioning aliasing.
compiler-optimizations.cpp:239:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:239:23: note: Cost model analysis: 
  Vector inside of loop cost: 44
  Vector prologue cost: 52
  Vector epilogue cost: 72
  Scalar iteration cost: 36
  Scalar outside cost: 8
  Vector outside cost: 124
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 4
compiler-optimizations.cpp:239:23: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:239:23: note:   Static estimate profitability threshold = 4
compiler-optimizations.cpp:239:23: note: epilog loop required
compiler-optimizations.cpp:239:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:239:23: note: Analyze phi: i_25 = PHI <0(5), i_22(6)>
compiler-optimizations.cpp:239:23: note: Analyze phi: .MEM_26 = PHI <.MEM_16(D)(5), .MEM_21(6)>
compiler-optimizations.cpp:239:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:239:23: note: loop vectorized
compiler-optimizations.cpp:239:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:239:23: note: Profitability threshold is 4 loop iterations.
split exit edge
create runtime check for data references *_4 and *_8
compiler-optimizations.cpp:239:23: note: created 1 versioning for alias checks.
compiler-optimizations.cpp:239:23: note: loop versioned for vectorization because of possible aliasing
compiler-optimizations.cpp:239:23: note: vect_update_ivs_after_vectorizer: phi: i_25 = PHI <i_22(6), 0(12)>
compiler-optimizations.cpp:239:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_26 = PHI <.MEM_21(6), .MEM_16(D)(12)>
compiler-optimizations.cpp:239:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:239:23: note: ------>vectorizing phi: i_25 = PHI <i_22(6), 0(21)>
compiler-optimizations.cpp:239:23: note: ------>vectorizing phi: .MEM_26 = PHI <.MEM_21(6), .MEM_16(D)(21)>
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _2 = (long unsigned int) i_25;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _3 = _2 * 4;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _4 = b_18(D) + _3;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _5 = i_25 * 2;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _6 = (long unsigned int) _5;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _7 = _6 * 4;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _8 = a_19(D) + _7;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _9 = *_4;
compiler-optimizations.cpp:239:23: note: transform statement.
compiler-optimizations.cpp:239:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:239:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_18(D)
compiler-optimizations.cpp:239:23: note: created b_18(D)
compiler-optimizations.cpp:239:23: note: add new stmt: vect__9.326_81 = MEM[(int *)vectp_b.324_79];
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: *_8 = _9;
compiler-optimizations.cpp:239:23: note: transform statement.
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: no array mode for V4SI[2]
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _10 = _6 + 1;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _11 = _10 * 4;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: _12 = a_19(D) + _11;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: *_12 = _9;
compiler-optimizations.cpp:239:23: note: transform statement.
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: no array mode for V4SI[2]
compiler-optimizations.cpp:239:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:239:23: note: vect_get_vec_def_for_operand: _9
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note:   def_stmt =  _9 = *_4;
compiler-optimizations.cpp:239:23: note: vect_get_vec_def_for_operand: _9
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:239:23: note: def_stmt: _9 = *_4;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note:   def_stmt =  _9 = *_4;
compiler-optimizations.cpp:239:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_19(D)
compiler-optimizations.cpp:239:23: note: created a_19(D)
compiler-optimizations.cpp:239:23: note: add new stmt: vect_inter_high_84 = VEC_PERM_EXPR <vect__9.326_81, vect__9.326_81, { 0, 4, 1, 5 }>;
compiler-optimizations.cpp:239:23: note: add new stmt: vect_inter_low_85 = VEC_PERM_EXPR <vect__9.326_81, vect__9.326_81, { 2, 6, 3, 7 }>;
compiler-optimizations.cpp:239:23: note: add new stmt: MEM[(int *)vectp_a.327_82] = vect_inter_high_84;
compiler-optimizations.cpp:239:23: note: add new stmt: vectp_a.327_87 = vectp_a.327_82 + 16;
compiler-optimizations.cpp:239:23: note: add new stmt: MEM[(int *)vectp_a.327_87] = vect_inter_low_85;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: i_22 = i_25 + 1;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: vectp_b.324_80 = vectp_b.324_79 + 16;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: vectp_a.327_83 = vectp_a.327_87 + 16;
compiler-optimizations.cpp:239:23: note: ------>vectorizing statement: if (i_22 >= _24)
compiler-optimizations.cpp:239:23: note: New loop exit condition: if (ivtmp_90 >= bnd.321_75)
compiler-optimizations.cpp:239:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:238:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:239:23: note: loop with 2 iterations completely unrolled (header execution count 49959011)
compiler-optimizations.cpp:238:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:241:20: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:241:20: note: not vectorized: no vectype for stmt: vect__9.326_81 = MEM[(int *)vectp_b.324_79];
 scalar_type: vector(4) int
compiler-optimizations.cpp:241:20: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.327_82] = vect_inter_high_84;
 scalar_type: vector(4) int
compiler-optimizations.cpp:241:20: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.327_87] = vect_inter_low_85;
 scalar_type: vector(4) int
compiler-optimizations.cpp:241:20: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:241:20: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:241:20: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:241:20: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:241:20: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:241:20: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:241:20: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: got vectype for stmt: _9 = *_4;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_8 = _9;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_22 = _9;
vector(4) int
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:239:23: note: Detected interleaving store *_8 and *_22
compiler-optimizations.cpp:239:23: note: Detected interleaving store of size 2 starting with *_8 = _9;
compiler-optimizations.cpp:239:23: note: not consecutive access _9 = *_4;
compiler-optimizations.cpp:239:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _2
compiler-optimizations.cpp:239:23: note: def_stmt: _2 = (long unsigned int) i_74;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_74
compiler-optimizations.cpp:239:23: note: def_stmt: i_74 = PHI <tmp.323_77(16)>
compiler-optimizations.cpp:239:23: note: type of def: external
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_74
compiler-optimizations.cpp:239:23: note: def_stmt: i_74 = PHI <tmp.323_77(16)>
compiler-optimizations.cpp:239:23: note: type of def: external
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:239:23: note: def_stmt: _6 = (long unsigned int) _5;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:239:23: note: def_stmt: _5 = i_74 * 2;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:239:23: note: def_stmt: _11 = _6 + 1;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:239:23: note: Build SLP for *_8 = _9;
compiler-optimizations.cpp:239:23: note: Build SLP failed: unrolling required in basic block SLP
compiler-optimizations.cpp:239:23: note: recording new base alignment for b_18(D) + (long unsigned int) i_74 * 4
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     _9 = *_4;
compiler-optimizations.cpp:239:23: note: recording new base alignment for a_19(D) + (long unsigned int) (i_74 * 2) * 4
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     *_8 = _9;
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: got vectype for stmt: _99 = *_94;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_98 = _99;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_103 = _99;
vector(4) int
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:239:23: note: Detected interleaving store *_98 and *_103
compiler-optimizations.cpp:239:23: note: Detected interleaving store of size 2 starting with *_98 = _99;
compiler-optimizations.cpp:239:23: note: not consecutive access _99 = *_94;
compiler-optimizations.cpp:239:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _92
compiler-optimizations.cpp:239:23: note: def_stmt: _92 = (long unsigned int) i_20;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_20
compiler-optimizations.cpp:239:23: note: def_stmt: i_20 = PHI <i_21(22)>
compiler-optimizations.cpp:239:23: note: type of def: external
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_20
compiler-optimizations.cpp:239:23: note: def_stmt: i_20 = PHI <i_21(22)>
compiler-optimizations.cpp:239:23: note: type of def: external
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _96
compiler-optimizations.cpp:239:23: note: def_stmt: _96 = (long unsigned int) _95;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _95
compiler-optimizations.cpp:239:23: note: def_stmt: _95 = i_20 * 2;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _101
compiler-optimizations.cpp:239:23: note: def_stmt: _101 = _96 + 1;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:239:23: note: Build SLP for *_98 = _99;
compiler-optimizations.cpp:239:23: note: Build SLP failed: unrolling required in basic block SLP
compiler-optimizations.cpp:239:23: note: recording new base alignment for b_18(D) + (long unsigned int) i_20 * 4
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     _99 = *_94;
compiler-optimizations.cpp:239:23: note: recording new base alignment for a_19(D) + (long unsigned int) (i_20 * 2) * 4
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     *_98 = _99;
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:5: note: got vectype for stmt: _67 = *_62;
vector(4) int
compiler-optimizations.cpp:239:5: note: got vectype for stmt: *_66 = _67;
vector(4) int
compiler-optimizations.cpp:239:5: note: got vectype for stmt: *_71 = _67;
vector(4) int
compiler-optimizations.cpp:239:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:239:5: note: Detected interleaving store *_66 and *_71
compiler-optimizations.cpp:239:5: note: Detected interleaving store of size 2 starting with *_66 = _67;
compiler-optimizations.cpp:239:5: note: not consecutive access _67 = *_62;
compiler-optimizations.cpp:239:5: note: === vect_pattern_recog ===
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand _60
compiler-optimizations.cpp:239:5: note: def_stmt: _60 = (long unsigned int) i_58;
compiler-optimizations.cpp:239:5: note: type of def: internal
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand i_58
compiler-optimizations.cpp:239:5: note: def_stmt: i_58 = PHI <i_105(24)>
compiler-optimizations.cpp:239:5: note: type of def: external
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand i_58
compiler-optimizations.cpp:239:5: note: def_stmt: i_58 = PHI <i_105(24)>
compiler-optimizations.cpp:239:5: note: type of def: external
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand _64
compiler-optimizations.cpp:239:5: note: def_stmt: _64 = (long unsigned int) _63;
compiler-optimizations.cpp:239:5: note: type of def: internal
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand _63
compiler-optimizations.cpp:239:5: note: def_stmt: _63 = i_58 * 2;
compiler-optimizations.cpp:239:5: note: type of def: internal
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:5: note: vect_is_simple_use: operand _69
compiler-optimizations.cpp:239:5: note: def_stmt: _69 = _64 + 1;
compiler-optimizations.cpp:239:5: note: type of def: internal
compiler-optimizations.cpp:239:5: note: === vect_analyze_slp ===
compiler-optimizations.cpp:239:5: note: Build SLP for *_66 = _67;
compiler-optimizations.cpp:239:5: note: Build SLP failed: unrolling required in basic block SLP
compiler-optimizations.cpp:239:5: note: recording new base alignment for b_18(D) + (long unsigned int) i_58 * 4
compiler-optimizations.cpp:239:5: note:   alignment:    4
compiler-optimizations.cpp:239:5: note:   misalignment: 0
compiler-optimizations.cpp:239:5: note:   based on:     _67 = *_62;
compiler-optimizations.cpp:239:5: note: recording new base alignment for a_19(D) + (long unsigned int) (i_58 * 2) * 4
compiler-optimizations.cpp:239:5: note:   alignment:    4
compiler-optimizations.cpp:239:5: note:   misalignment: 0
compiler-optimizations.cpp:239:5: note:   based on:     *_66 = _67;
compiler-optimizations.cpp:239:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:239:23: note: got vectype for stmt: _48 = *_31;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_47 = _48;
vector(4) int
compiler-optimizations.cpp:239:23: note: got vectype for stmt: *_52 = _48;
vector(4) int
compiler-optimizations.cpp:239:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:239:23: note: Detected interleaving store *_47 and *_52
compiler-optimizations.cpp:239:23: note: Detected interleaving store of size 2 starting with *_47 = _48;
compiler-optimizations.cpp:239:23: note: not consecutive access _48 = *_31;
compiler-optimizations.cpp:239:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _36
compiler-optimizations.cpp:239:23: note: def_stmt: _36 = (long unsigned int) i_38;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_38
compiler-optimizations.cpp:239:23: note: def_stmt: i_38 = PHI <i_54(10), 0(13)>
compiler-optimizations.cpp:239:23: note: type of def: external
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand i_38
compiler-optimizations.cpp:239:23: note: def_stmt: i_38 = PHI <i_54(10), 0(13)>
compiler-optimizations.cpp:239:23: note: type of def: external
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _33
compiler-optimizations.cpp:239:23: note: def_stmt: _33 = (long unsigned int) _32;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _32
compiler-optimizations.cpp:239:23: note: def_stmt: _32 = i_38 * 2;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:239:23: note: vect_is_simple_use: operand _50
compiler-optimizations.cpp:239:23: note: def_stmt: _50 = _33 + 1;
compiler-optimizations.cpp:239:23: note: type of def: internal
compiler-optimizations.cpp:239:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:239:23: note: Build SLP for *_47 = _48;
compiler-optimizations.cpp:239:23: note: Build SLP failed: unrolling required in basic block SLP
compiler-optimizations.cpp:239:23: note: recording new base alignment for b_18(D) + (long unsigned int) i_38 * 4
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     _48 = *_31;
compiler-optimizations.cpp:239:23: note: recording new base alignment for a_19(D) + (long unsigned int) (i_38 * 2) * 4
compiler-optimizations.cpp:239:23: note:   alignment:    4
compiler-optimizations.cpp:239:23: note:   misalignment: 0
compiler-optimizations.cpp:239:23: note:   based on:     *_47 = _48;
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:239:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:243:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:243:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_3 and *_7
consider run-time aliasing test between *_5 and *_7

Analyzing loop at compiler-optimizations.cpp:246
compiler-optimizations.cpp:246:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:246:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:246:23: note: === get_loop_niters ===
compiler-optimizations.cpp:246:23: note: Symbolic number of iterations is (unsigned int) n_12(D)
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: *_7 = _8;
vector(4) int
compiler-optimizations.cpp:246:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:246:23: note: Analyze phi: i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:246:23: note: step: 1,  init: 0
compiler-optimizations.cpp:246:23: note: Detected induction.
compiler-optimizations.cpp:246:23: note: Analyze phi: .MEM_21 = PHI <.MEM_11(D)(5), .MEM_16(6)>
compiler-optimizations.cpp:246:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:246:23: note: def_stmt: _1 = (long unsigned int) i_20;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand i_20
compiler-optimizations.cpp:246:23: note: def_stmt: i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: type of def: induction
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:246:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:246:23: note: init: phi relevant? i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: init: phi relevant? .MEM_21 = PHI <.MEM_11(D)(5), .MEM_16(6)>
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _1 = (long unsigned int) i_20;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _3 = b_13(D) + _2;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _5 = c_14(D) + _2;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _6 = *_5;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _7 = a_15(D) + _2;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? *_7 = _8;
compiler-optimizations.cpp:246:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:246:23: note: mark relevant 5, live 0: *_7 = _8;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? i_17 = i_20 + 1;
compiler-optimizations.cpp:246:23: note: init: stmt relevant? if (n_12(D) <= i_17)
compiler-optimizations.cpp:246:23: note: worklist: examine stmt: *_7 = _8;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:246:23: note: def_stmt: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: mark relevant 5, live 0: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: worklist: examine stmt: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:246:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: mark relevant 5, live 0: _4 = *_3;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:246:23: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: mark relevant 5, live 0: _6 = *_5;
compiler-optimizations.cpp:246:23: note: worklist: examine stmt: _6 = *_5;
compiler-optimizations.cpp:246:23: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:246:23: note: versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
compiler-optimizations.cpp:246:23: note: versioning for alias required: can't determine dependence between *_5 and *_7
consider run-time aliasing test between *_5 and *_7
compiler-optimizations.cpp:246:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:246:23: note: ==> examining phi: i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: ==> examining phi: .MEM_21 = PHI <.MEM_11(D)(5), .MEM_16(6)>
compiler-optimizations.cpp:246:23: note: ==> examining statement: _1 = (long unsigned int) i_20;
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _3 = b_13(D) + _2;
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:246:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:246:23: note: vectype: vector(4) int
compiler-optimizations.cpp:246:23: note: nunits = 4
compiler-optimizations.cpp:246:23: note: ==> examining statement: _5 = c_14(D) + _2;
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _6 = *_5;
compiler-optimizations.cpp:246:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:246:23: note: vectype: vector(4) int
compiler-optimizations.cpp:246:23: note: nunits = 4
compiler-optimizations.cpp:246:23: note: ==> examining statement: _7 = a_15(D) + _2;
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:246:23: note: vectype: vector(4) int
compiler-optimizations.cpp:246:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:246:23: note: vectype: vector(4) int
compiler-optimizations.cpp:246:23: note: nunits = 4
compiler-optimizations.cpp:246:23: note: ==> examining statement: *_7 = _8;
compiler-optimizations.cpp:246:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:246:23: note: vectype: vector(4) int
compiler-optimizations.cpp:246:23: note: nunits = 4
compiler-optimizations.cpp:246:23: note: ==> examining statement: i_17 = i_20 + 1;
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: ==> examining statement: if (n_12(D) <= i_17)
compiler-optimizations.cpp:246:23: note: skip.
compiler-optimizations.cpp:246:23: note: vectorization factor = 4
compiler-optimizations.cpp:246:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:246:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:246:23: note: recording new base alignment for b_13(D)
compiler-optimizations.cpp:246:23: note:   alignment:    4
compiler-optimizations.cpp:246:23: note:   misalignment: 0
compiler-optimizations.cpp:246:23: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:246:23: note: recording new base alignment for c_14(D)
compiler-optimizations.cpp:246:23: note:   alignment:    4
compiler-optimizations.cpp:246:23: note:   misalignment: 0
compiler-optimizations.cpp:246:23: note:   based on:     _6 = *_5;
compiler-optimizations.cpp:246:23: note: recording new base alignment for a_15(D)
compiler-optimizations.cpp:246:23: note:   alignment:    4
compiler-optimizations.cpp:246:23: note:   misalignment: 0
compiler-optimizations.cpp:246:23: note:   based on:     *_7 = _8;
compiler-optimizations.cpp:246:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:246:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:246:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:246:23: note: can't force alignment of ref: *_5
compiler-optimizations.cpp:246:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:246:23: note: can't force alignment of ref: *_7
compiler-optimizations.cpp:246:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:246:23: note: improved number of alias checks from 2 to 2
compiler-optimizations.cpp:246:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:246:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:246:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:246:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:246:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:246:23: note: Analyze phi: i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: Analyze phi: .MEM_21 = PHI <.MEM_11(D)(5), .MEM_16(6)>
compiler-optimizations.cpp:246:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:246:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:246:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:246:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:246:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:246:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:246:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:246:23: note: examining phi: i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: examining phi: .MEM_21 = PHI <.MEM_11(D)(5), .MEM_16(6)>
compiler-optimizations.cpp:246:23: note: ==> examining statement: _1 = (long unsigned int) i_20;
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _3 = b_13(D) + _2;
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:246:23: note: not ssa-name.
compiler-optimizations.cpp:246:23: note: use not simple.
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:246:23: note: not ssa-name.
compiler-optimizations.cpp:246:23: note: use not simple.
compiler-optimizations.cpp:246:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:246:23: note: ==> examining statement: _5 = c_14(D) + _2;
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _6 = *_5;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand *_5
compiler-optimizations.cpp:246:23: note: not ssa-name.
compiler-optimizations.cpp:246:23: note: use not simple.
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand *_5
compiler-optimizations.cpp:246:23: note: not ssa-name.
compiler-optimizations.cpp:246:23: note: use not simple.
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:246:23: note: ==> examining statement: _7 = a_15(D) + _2;
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: ==> examining statement: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:246:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:246:23: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:246:23: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:246:23: note: ==> examining statement: *_7 = _8;
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:246:23: note: def_stmt: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:246:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:246:23: note: ==> examining statement: i_17 = i_20 + 1;
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: ==> examining statement: if (n_12(D) <= i_17)
compiler-optimizations.cpp:246:23: note: irrelevant.
compiler-optimizations.cpp:246:23: note: not using a fully-masked loop.
cost model: Adding cost of checks for loop versioning aliasing.
compiler-optimizations.cpp:246:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:246:23: note: Cost model analysis: 
  Vector inside of loop cost: 40
  Vector prologue cost: 56
  Vector epilogue cost: 80
  Scalar iteration cost: 40
  Scalar outside cost: 8
  Vector outside cost: 136
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 4
compiler-optimizations.cpp:246:23: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:246:23: note:   Static estimate profitability threshold = 4
compiler-optimizations.cpp:246:23: note: epilog loop required
compiler-optimizations.cpp:246:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:246:23: note: Analyze phi: i_20 = PHI <0(5), i_17(6)>
compiler-optimizations.cpp:246:23: note: Analyze phi: .MEM_21 = PHI <.MEM_11(D)(5), .MEM_16(6)>
compiler-optimizations.cpp:246:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:246:23: note: loop vectorized
compiler-optimizations.cpp:246:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:246:23: note: Profitability threshold is 4 loop iterations.
split exit edge
create runtime check for data references *_3 and *_7
create runtime check for data references *_5 and *_7
compiler-optimizations.cpp:246:23: note: created 2 versioning for alias checks.
compiler-optimizations.cpp:246:23: note: loop versioned for vectorization because of possible aliasing
compiler-optimizations.cpp:246:23: note: vect_update_ivs_after_vectorizer: phi: i_20 = PHI <i_17(6), 0(12)>
compiler-optimizations.cpp:246:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_21 = PHI <.MEM_16(6), .MEM_11(D)(12)>
compiler-optimizations.cpp:246:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:246:23: note: ------>vectorizing phi: i_20 = PHI <i_17(6), 0(21)>
compiler-optimizations.cpp:246:23: note: ------>vectorizing phi: .MEM_21 = PHI <.MEM_16(6), .MEM_11(D)(21)>
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_20;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _3 = b_13(D) + _2;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _4 = *_3;
compiler-optimizations.cpp:246:23: note: transform statement.
compiler-optimizations.cpp:246:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:246:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_13(D)
compiler-optimizations.cpp:246:23: note: created b_13(D)
compiler-optimizations.cpp:246:23: note: add new stmt: vect__4.353_68 = MEM[(int *)vectp_b.351_66];
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _5 = c_14(D) + _2;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _6 = *_5;
compiler-optimizations.cpp:246:23: note: transform statement.
compiler-optimizations.cpp:246:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:246:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_14(D)
compiler-optimizations.cpp:246:23: note: created c_14(D)
compiler-optimizations.cpp:246:23: note: add new stmt: vect__6.356_71 = MEM[(int *)vectp_c.354_69];
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _7 = a_15(D) + _2;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: transform statement.
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:246:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:246:23: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: transform binary/unary operation.
compiler-optimizations.cpp:246:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:246:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:246:23: note: vect_get_vec_def_for_operand: _6
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:246:23: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note:   def_stmt =  _6 = *_5;
compiler-optimizations.cpp:246:23: note: add new stmt: vect__8.357_72 = vect__4.353_68 + vect__6.356_71;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: *_7 = _8;
compiler-optimizations.cpp:246:23: note: transform statement.
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:246:23: note: def_stmt: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:246:23: note: vect_get_vec_def_for_operand: _8
compiler-optimizations.cpp:246:23: note: vect_is_simple_use: operand _8
compiler-optimizations.cpp:246:23: note: def_stmt: _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: type of def: internal
compiler-optimizations.cpp:246:23: note:   def_stmt =  _8 = _4 + _6;
compiler-optimizations.cpp:246:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_15(D)
compiler-optimizations.cpp:246:23: note: created a_15(D)
compiler-optimizations.cpp:246:23: note: add new stmt: MEM[(int *)vectp_a.358_73] = vect__8.357_72;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: i_17 = i_20 + 1;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: vectp_b.351_67 = vectp_b.351_66 + 16;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: vectp_c.354_70 = vectp_c.354_69 + 16;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: vectp_a.358_74 = vectp_a.358_73 + 16;
compiler-optimizations.cpp:246:23: note: ------>vectorizing statement: if (n_12(D) <= i_17)
compiler-optimizations.cpp:246:23: note: New loop exit condition: if (ivtmp_77 >= bnd.348_62)
compiler-optimizations.cpp:246:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:245:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:246:23: note: loop with 2 iterations completely unrolled (header execution count 49959011)
compiler-optimizations.cpp:245:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:247:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:247:14: note: not vectorized: no vectype for stmt: vect__4.353_68 = MEM[(int *)vectp_b.351_66];
 scalar_type: vector(4) int
compiler-optimizations.cpp:247:14: note: not vectorized: no vectype for stmt: vect__6.356_71 = MEM[(int *)vectp_c.354_69];
 scalar_type: vector(4) int
compiler-optimizations.cpp:247:14: note: not vectorized: no vectype for stmt: MEM[(int *)vectp_a.358_73] = vect__8.357_72;
 scalar_type: vector(4) int
compiler-optimizations.cpp:247:14: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:247:14: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:247:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:247:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:247:14: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:247:14: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:247:14: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: *_7 = _8;
vector(4) int
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:246:23: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:246:23: note: not consecutive access _6 = *_5;
compiler-optimizations.cpp:246:23: note: not consecutive access *_7 = _8;
compiler-optimizations.cpp:246:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _82 = *_81;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _84 = *_83;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: *_85 = _86;
vector(4) int
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:246:23: note: not consecutive access _82 = *_81;
compiler-optimizations.cpp:246:23: note: not consecutive access _84 = *_83;
compiler-optimizations.cpp:246:23: note: not consecutive access *_85 = _86;
compiler-optimizations.cpp:246:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:5: note: got vectype for stmt: _54 = *_53;
vector(4) int
compiler-optimizations.cpp:246:5: note: got vectype for stmt: _56 = *_55;
vector(4) int
compiler-optimizations.cpp:246:5: note: got vectype for stmt: *_57 = _58;
vector(4) int
compiler-optimizations.cpp:246:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:246:5: note: not consecutive access _54 = *_53;
compiler-optimizations.cpp:246:5: note: not consecutive access _56 = *_55;
compiler-optimizations.cpp:246:5: note: not consecutive access *_57 = _58;
compiler-optimizations.cpp:246:5: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:246:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _40 = *_39;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: _42 = *_41;
vector(4) int
compiler-optimizations.cpp:246:23: note: got vectype for stmt: *_43 = _44;
vector(4) int
compiler-optimizations.cpp:246:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:246:23: note: not consecutive access _40 = *_39;
compiler-optimizations.cpp:246:23: note: not consecutive access _42 = *_41;
compiler-optimizations.cpp:246:23: note: not consecutive access *_43 = _44;
compiler-optimizations.cpp:246:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:246:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:249:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:249:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:253
compiler-optimizations.cpp:253:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:253:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:253:23: note: === get_loop_niters ===
compiler-optimizations.cpp:253:23: note: Symbolic number of iterations is (unsigned int) n_7(D)
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:253:23: note: got vectype for stmt: _4 = *_3;
vector(2) double
compiler-optimizations.cpp:253:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:253:23: note: Analyze phi: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: Access function of PHI: {0.0, +, _4}_1
compiler-optimizations.cpp:253:23: note: step: _4,  init: 0.0
compiler-optimizations.cpp:253:23: note: step unknown.
compiler-optimizations.cpp:253:23: note: Analyze phi: i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:253:23: note: step: 1,  init: 0
compiler-optimizations.cpp:253:23: note: Detected induction.
compiler-optimizations.cpp:253:23: note: Analyze phi: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: detected reduction: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: Detected reduction.
compiler-optimizations.cpp:253:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:253:23: note: def_stmt: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:253:23: note: type of def: internal
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand i_16
compiler-optimizations.cpp:253:23: note: def_stmt: i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: type of def: induction
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand 8
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:253:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:253:23: note: init: phi relevant? sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: init: phi relevant? i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: init: stmt relevant? _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:253:23: note: init: stmt relevant? _2 = _1 * 8;
compiler-optimizations.cpp:253:23: note: init: stmt relevant? _3 = a_8(D) + _2;
compiler-optimizations.cpp:253:23: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:253:23: note: init: stmt relevant? sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: vec_stmt_relevant_p: used out of loop.
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:253:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:253:23: note: type of def: internal
compiler-optimizations.cpp:253:23: note: vec_stmt_relevant_p: stmt live but not relevant.
compiler-optimizations.cpp:253:23: note: mark relevant 1, live 1: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: init: stmt relevant? i_11 = i_16 + 1;
compiler-optimizations.cpp:253:23: note: init: stmt relevant? if (n_7(D) <= i_11)
compiler-optimizations.cpp:253:23: note: worklist: examine stmt: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:253:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:253:23: note: type of def: internal
compiler-optimizations.cpp:253:23: note: mark relevant 1, live 0: _4 = *_3;
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand sum_14
compiler-optimizations.cpp:253:23: note: def_stmt: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: type of def: reduction
compiler-optimizations.cpp:253:23: note: mark relevant 1, live 0: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: worklist: examine stmt: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand 0.0
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand sum_10
compiler-optimizations.cpp:253:23: note: def_stmt: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: type of def: reduction
compiler-optimizations.cpp:253:23: note: reduc-stmt defining reduc-phi in the same nest.
compiler-optimizations.cpp:253:23: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:253:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:253:23: note: ==> examining phi: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:253:23: note: vectype: vector(2) double
compiler-optimizations.cpp:253:23: note: nunits = 2
compiler-optimizations.cpp:253:23: note: ==> examining phi: i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: ==> examining statement: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:253:23: note: skip.
compiler-optimizations.cpp:253:23: note: ==> examining statement: _2 = _1 * 8;
compiler-optimizations.cpp:253:23: note: skip.
compiler-optimizations.cpp:253:23: note: ==> examining statement: _3 = a_8(D) + _2;
compiler-optimizations.cpp:253:23: note: skip.
compiler-optimizations.cpp:253:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:253:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:253:23: note: vectype: vector(2) double
compiler-optimizations.cpp:253:23: note: nunits = 2
compiler-optimizations.cpp:253:23: note: ==> examining statement: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:253:23: note: vectype: vector(2) double
compiler-optimizations.cpp:253:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:253:23: note: vectype: vector(2) double
compiler-optimizations.cpp:253:23: note: nunits = 2
compiler-optimizations.cpp:253:23: note: ==> examining statement: i_11 = i_16 + 1;
compiler-optimizations.cpp:253:23: note: skip.
compiler-optimizations.cpp:253:23: note: ==> examining statement: if (n_7(D) <= i_11)
compiler-optimizations.cpp:253:23: note: skip.
compiler-optimizations.cpp:253:23: note: vectorization factor = 2
compiler-optimizations.cpp:253:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:253:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:253:23: note: recording new base alignment for a_8(D)
compiler-optimizations.cpp:253:23: note:   alignment:    8
compiler-optimizations.cpp:253:23: note:   misalignment: 0
compiler-optimizations.cpp:253:23: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:253:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:253:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:253:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:253:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:253:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:253:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:253:23: note: Analyze phi: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:253:23: note: Analyze phi: i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:253:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:253:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:253:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:253:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:253:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:253:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:253:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:253:23: note: examining phi: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: examining phi: i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: ==> examining statement: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:253:23: note: irrelevant.
compiler-optimizations.cpp:253:23: note: ==> examining statement: _2 = _1 * 8;
compiler-optimizations.cpp:253:23: note: irrelevant.
compiler-optimizations.cpp:253:23: note: ==> examining statement: _3 = a_8(D) + _2;
compiler-optimizations.cpp:253:23: note: irrelevant.
compiler-optimizations.cpp:253:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:253:23: note: not ssa-name.
compiler-optimizations.cpp:253:23: note: use not simple.
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:253:23: note: not ssa-name.
compiler-optimizations.cpp:253:23: note: use not simple.
compiler-optimizations.cpp:253:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:253:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:253:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:253:23: note: ==> examining statement: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:253:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:253:23: note: type of def: internal
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand sum_14
compiler-optimizations.cpp:253:23: note: def_stmt: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: type of def: reduction
compiler-optimizations.cpp:253:23: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 16, prologue_cost = 0, epilogue_cost = 0 .
compiler-optimizations.cpp:253:23: note: using an in-order (fold-left) reduction.
compiler-optimizations.cpp:253:23: note: ==> examining statement: i_11 = i_16 + 1;
compiler-optimizations.cpp:253:23: note: irrelevant.
compiler-optimizations.cpp:253:23: note: ==> examining statement: if (n_7(D) <= i_11)
compiler-optimizations.cpp:253:23: note: irrelevant.
compiler-optimizations.cpp:253:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:253:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:253:23: note: Cost model analysis: 
  Vector inside of loop cost: 28
  Vector prologue cost: 32
  Vector epilogue cost: 16
  Scalar iteration cost: 16
  Scalar outside cost: 32
  Vector outside cost: 48
  prologue iterations: 0
  epilogue iterations: 1
  Calculated minimum iters for profitability: 2
compiler-optimizations.cpp:253:23: note:   Runtime profitability threshold = 2
compiler-optimizations.cpp:253:23: note:   Static estimate profitability threshold = 33
compiler-optimizations.cpp:253:23: note: epilog loop required
compiler-optimizations.cpp:253:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:253:23: note: Analyze phi: sum_14 = PHI <0.0(5), sum_10(6)>
compiler-optimizations.cpp:253:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:253:23: note: Analyze phi: i_16 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:253:23: note: loop vectorized
compiler-optimizations.cpp:253:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:253:23: note: Profitability threshold is 2 loop iterations.
compiler-optimizations.cpp:253:23: note: vect_update_ivs_after_vectorizer: phi: sum_14 = PHI <sum_10(6), 0.0(9)>
compiler-optimizations.cpp:253:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:253:23: note: vect_update_ivs_after_vectorizer: phi: i_16 = PHI <i_11(6), 0(9)>
compiler-optimizations.cpp:253:23: note: ------>vectorizing phi: sum_14 = PHI <sum_10(6), 0.0(16)>
compiler-optimizations.cpp:253:23: note: transform phi.
compiler-optimizations.cpp:253:23: note: ------>vectorizing phi: i_16 = PHI <i_11(6), 0(16)>
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_16;
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: _2 = _1 * 8;
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: _3 = a_8(D) + _2;
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: _4 = *_3;
compiler-optimizations.cpp:253:23: note: transform statement.
compiler-optimizations.cpp:253:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:253:23: note: create vector_type-pointer variable to type: vector(2) double  vectorizing a pointer ref: *a_8(D)
compiler-optimizations.cpp:253:23: note: created a_8(D)
compiler-optimizations.cpp:253:23: note: add new stmt: vect__4.384_32 = MEM[(double *)vectp_a.382_30];
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: sum_10 = _4 + sum_14;
compiler-optimizations.cpp:253:23: note: transform statement.
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:253:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:253:23: note: type of def: internal
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand sum_14
compiler-optimizations.cpp:253:23: note: def_stmt: sum_14 = PHI <sum_10(6), 0.0(16)>
compiler-optimizations.cpp:253:23: note: type of def: reduction
compiler-optimizations.cpp:253:23: note: reduc op not supported by target.
compiler-optimizations.cpp:253:23: note: transform reduction.
compiler-optimizations.cpp:253:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:253:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:253:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:253:23: note: type of def: internal
compiler-optimizations.cpp:253:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:253:23: note: add new stmt: sum_10 = stmp_sum_10.385_34 + stmp_sum_10.385_35;
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: i_11 = i_16 + 1;
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: vectp_a.382_31 = vectp_a.382_30 + 16;
compiler-optimizations.cpp:253:23: note: ------>vectorizing statement: if (n_7(D) <= i_11)
compiler-optimizations.cpp:253:23: note: New loop exit condition: if (ivtmp_38 >= bnd.379_26)
compiler-optimizations.cpp:253:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:251:8: note: vectorized 1 loops in function.
compiler-optimizations.cpp:253:23: note: loop turned into non-loop; it never loops
compiler-optimizations.cpp:251:8: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:253:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:253:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:253:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:253:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:253:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:253:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:253:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:254:13: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:254:13: note: not vectorized: no vectype for stmt: vect__4.384_32 = MEM[(double *)vectp_a.382_30];
 scalar_type: vector(2) double
compiler-optimizations.cpp:254:13: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:254:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:254:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:254:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:254:13: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:254:13: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:254:13: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:253:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:253:5: note: got vectype for stmt: _6 = *_12;
vector(2) double
compiler-optimizations.cpp:253:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:253:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:257:12: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:257:12: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:257:12: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:266:12: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:266:12: note: got vectype for stmt: in$re_7 = MEM[(struct complex *)&in];
vector(2) double
compiler-optimizations.cpp:266:12: note: got vectype for stmt: in$im_8 = MEM[(struct complex *)&in + 8B];
vector(2) double
compiler-optimizations.cpp:266:12: note: got vectype for stmt: MEM[(struct complex *)&D.7532] = _3;
vector(2) double
compiler-optimizations.cpp:266:12: note: got vectype for stmt: MEM[(struct complex *)&D.7532 + 8B] = _5;
vector(2) double
compiler-optimizations.cpp:266:12: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:266:12: note: Detected interleaving store MEM[(struct complex *)&D.7532] and MEM[(struct complex *)&D.7532 + 8B]
compiler-optimizations.cpp:266:12: note: Detected interleaving load MEM[(struct complex *)&in] and MEM[(struct complex *)&in + 8B]
compiler-optimizations.cpp:266:12: note: Detected interleaving store of size 2 starting with MEM[(struct complex *)&D.7532] = _3;
compiler-optimizations.cpp:266:12: note: Detected interleaving load of size 2 starting with in$re_7 = MEM[(struct complex *)&in];
compiler-optimizations.cpp:266:12: note: === vect_pattern_recog ===
compiler-optimizations.cpp:266:12: note: vect_is_simple_use: operand in$re_7
compiler-optimizations.cpp:266:12: note: def_stmt: in$re_7 = MEM[(struct complex *)&in];
compiler-optimizations.cpp:266:12: note: type of def: internal
compiler-optimizations.cpp:266:12: note: vect_is_simple_use: operand in$im_8
compiler-optimizations.cpp:266:12: note: def_stmt: in$im_8 = MEM[(struct complex *)&in + 8B];
compiler-optimizations.cpp:266:12: note: type of def: internal
compiler-optimizations.cpp:266:12: note: vect_is_simple_use: operand in$re_7
compiler-optimizations.cpp:266:12: note: def_stmt: in$re_7 = MEM[(struct complex *)&in];
compiler-optimizations.cpp:266:12: note: type of def: internal
compiler-optimizations.cpp:266:12: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:266:12: note: def_stmt: _4 = in$re_7 * 2.0e+0;
compiler-optimizations.cpp:266:12: note: type of def: internal
compiler-optimizations.cpp:266:12: note: === vect_analyze_slp ===
compiler-optimizations.cpp:266:12: note: Build SLP for MEM[(struct complex *)&D.7532] = _3;
compiler-optimizations.cpp:266:12: note: Build SLP for MEM[(struct complex *)&D.7532 + 8B] = _5;
compiler-optimizations.cpp:266:12: note: vect_is_simple_use: operand _3
compiler-optimizations.cpp:266:12: note: def_stmt: _3 = _1 - _2;
compiler-optimizations.cpp:266:12: note: type of def: internal
compiler-optimizations.cpp:266:12: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:266:12: note: def_stmt: _5 = _4 * in$im_8;
compiler-optimizations.cpp:266:12: note: type of def: internal
compiler-optimizations.cpp:266:12: note: Build SLP for _3 = _1 - _2;
compiler-optimizations.cpp:266:12: note: Build SLP for _5 = _4 * in$im_8;
compiler-optimizations.cpp:266:12: note: Build SLP failed: different operation in stmt _5 = _4 * in$im_8;
compiler-optimizations.cpp:266:12: note: original stmt _3 = _1 - _2;
compiler-optimizations.cpp:266:12: note: recording new base alignment for &in
compiler-optimizations.cpp:266:12: note:   alignment:    8
compiler-optimizations.cpp:266:12: note:   misalignment: 0
compiler-optimizations.cpp:266:12: note:   based on:     in$re_7 = MEM[(struct complex *)&in];
compiler-optimizations.cpp:266:12: note: recording new base alignment for &D.7532
compiler-optimizations.cpp:266:12: note:   alignment:    8
compiler-optimizations.cpp:266:12: note:   misalignment: 0
compiler-optimizations.cpp:266:12: note:   based on:     MEM[(struct complex *)&D.7532] = _3;

Analyzing loop at compiler-optimizations.cpp:270
compiler-optimizations.cpp:270:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:270:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:270:23: note: === get_loop_niters ===
compiler-optimizations.cpp:270:23: note: Symbolic number of iterations is (unsigned int) n_8(D)
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:270:23: note: got vectype for stmt: in_6 = MEM[(const struct complex &)_3];
vector(2) double
compiler-optimizations.cpp:270:23: note: got vectype for stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
vector(2) double
compiler-optimizations.cpp:270:23: note: got vectype for stmt: MEM[(struct complex *)_3] = _14;
vector(2) double
compiler-optimizations.cpp:270:23: note: got vectype for stmt: MEM[(struct complex *)_3 + 8B] = _16;
vector(2) double
compiler-optimizations.cpp:270:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:270:23: note: Analyze phi: i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:270:23: note: step: 1,  init: 0
compiler-optimizations.cpp:270:23: note: Detected induction.
compiler-optimizations.cpp:270:23: note: Analyze phi: .MEM_24 = PHI <.MEM_7(D)(5), .MEM_20(6)>
compiler-optimizations.cpp:270:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:270:23: note: def_stmt: _1 = (long unsigned int) i_23;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand i_23
compiler-optimizations.cpp:270:23: note: def_stmt: i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: type of def: induction
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand 16
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:270:23: note: Detected interleaving load MEM[(const struct complex &)_3] and MEM[(const struct complex &)_3 + 8]
compiler-optimizations.cpp:270:23: note: Detected interleaving store MEM[(struct complex *)_3] and MEM[(struct complex *)_3 + 8B]
compiler-optimizations.cpp:270:23: note: Detected interleaving load of size 2 starting with in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: Detected interleaving store of size 2 starting with MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:270:23: note: init: phi relevant? i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: init: phi relevant? .MEM_24 = PHI <.MEM_7(D)(5), .MEM_20(6)>
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _1 = (long unsigned int) i_23;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _2 = _1 * 16;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _3 = a_9(D) + _2;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: init: stmt relevant? in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? i_11 = i_23 + 1;
compiler-optimizations.cpp:270:23: note: init: stmt relevant? if (n_8(D) <= i_11)
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:270:23: note: def_stmt: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:270:23: note: def_stmt: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _12
compiler-optimizations.cpp:270:23: note: def_stmt: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:270:23: note: def_stmt: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: already marked relevant/live.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: already marked relevant/live.
compiler-optimizations.cpp:270:23: note: worklist: examine stmt: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: already marked relevant/live.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: mark relevant 5, live 0: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: already marked relevant/live.
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:270:23: note: dependence distance  = 0.
compiler-optimizations.cpp:270:23: note: dependence distance == 0 between MEM[(const struct complex &)_3] and MEM[(struct complex *)_3]
compiler-optimizations.cpp:270:23: note: dependence distance  = 0.
compiler-optimizations.cpp:270:23: note: dependence distance == 0 between MEM[(const struct complex &)_3 + 8] and MEM[(struct complex *)_3 + 8B]
compiler-optimizations.cpp:270:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:270:23: note: ==> examining phi: i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: ==> examining phi: .MEM_24 = PHI <.MEM_7(D)(5), .MEM_20(6)>
compiler-optimizations.cpp:270:23: note: ==> examining statement: _1 = (long unsigned int) i_23;
compiler-optimizations.cpp:270:23: note: skip.
compiler-optimizations.cpp:270:23: note: ==> examining statement: _2 = _1 * 16;
compiler-optimizations.cpp:270:23: note: skip.
compiler-optimizations.cpp:270:23: note: ==> examining statement: _3 = a_9(D) + _2;
compiler-optimizations.cpp:270:23: note: skip.
compiler-optimizations.cpp:270:23: note: ==> examining statement: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: get vectype for scalar type:  double
compiler-optimizations.cpp:270:23: note: vectype: vector(2) double
compiler-optimizations.cpp:270:23: note: nunits = 2
compiler-optimizations.cpp:270:23: note: ==> examining statement: i_11 = i_23 + 1;
compiler-optimizations.cpp:270:23: note: skip.
compiler-optimizations.cpp:270:23: note: ==> examining statement: if (n_8(D) <= i_11)
compiler-optimizations.cpp:270:23: note: skip.
compiler-optimizations.cpp:270:23: note: vectorization factor = 2
compiler-optimizations.cpp:270:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:270:23: note: Build SLP for MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: Build SLP for MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:270:23: note: def_stmt: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: Build SLP for _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: Build SLP for _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: Build SLP failed: different operation in stmt _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: original stmt _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:270:23: note: accesses have the same alignment: MEM[(const struct complex &)_3] and MEM[(struct complex *)_3]
compiler-optimizations.cpp:270:23: note: accesses have the same alignment: MEM[(const struct complex &)_3 + 8] and MEM[(struct complex *)_3 + 8B]
compiler-optimizations.cpp:270:23: note: recording new base alignment for a_9(D)
compiler-optimizations.cpp:270:23: note:   alignment:    8
compiler-optimizations.cpp:270:23: note:   misalignment: 0
compiler-optimizations.cpp:270:23: note:   based on:     in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:270:23: note: can't force alignment of ref: MEM[(const struct complex &)_3]
compiler-optimizations.cpp:270:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:270:23: note: can't force alignment of ref: MEM[(const struct complex &)_3 + 8]
compiler-optimizations.cpp:270:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:270:23: note: can't force alignment of ref: MEM[(struct complex *)_3]
compiler-optimizations.cpp:270:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:270:23: note: can't force alignment of ref: MEM[(struct complex *)_3 + 8B]
compiler-optimizations.cpp:270:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:270:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:270:23: note: vector alignment may not be reachable
compiler-optimizations.cpp:270:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:270:23: note: Analyze phi: i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: Analyze phi: .MEM_24 = PHI <.MEM_7(D)(5), .MEM_20(6)>
compiler-optimizations.cpp:270:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:270:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:270:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:270:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:270:23: note: examining phi: i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: examining phi: .MEM_24 = PHI <.MEM_7(D)(5), .MEM_20(6)>
compiler-optimizations.cpp:270:23: note: ==> examining statement: _1 = (long unsigned int) i_23;
compiler-optimizations.cpp:270:23: note: irrelevant.
compiler-optimizations.cpp:270:23: note: ==> examining statement: _2 = _1 * 16;
compiler-optimizations.cpp:270:23: note: irrelevant.
compiler-optimizations.cpp:270:23: note: ==> examining statement: _3 = a_9(D) + _2;
compiler-optimizations.cpp:270:23: note: irrelevant.
compiler-optimizations.cpp:270:23: note: ==> examining statement: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand MEM[(const struct complex &)_3]
compiler-optimizations.cpp:270:23: note: not ssa-name.
compiler-optimizations.cpp:270:23: note: use not simple.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand MEM[(const struct complex &)_3]
compiler-optimizations.cpp:270:23: note: not ssa-name.
compiler-optimizations.cpp:270:23: note: use not simple.
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:270:23: note: vect_model_load_cost: strided group_size = 2 .
compiler-optimizations.cpp:270:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:270:23: note: vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand MEM[(const struct complex &)_3 + 8]
compiler-optimizations.cpp:270:23: note: not ssa-name.
compiler-optimizations.cpp:270:23: note: use not simple.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand MEM[(const struct complex &)_3 + 8]
compiler-optimizations.cpp:270:23: note: not ssa-name.
compiler-optimizations.cpp:270:23: note: use not simple.
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:270:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:270:23: note: vect_model_simple_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:270:23: note: vect_model_simple_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _12
compiler-optimizations.cpp:270:23: note: def_stmt: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:270:23: note: def_stmt: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:270:23: note: vect_model_simple_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand 2.0e+0
compiler-optimizations.cpp:270:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:270:23: note: vect_model_simple_cost: inside_cost = 20, prologue_cost = 4 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:270:23: note: def_stmt: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: === vectorizable_operation ===
compiler-optimizations.cpp:270:23: note: vect_model_simple_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:270:23: note: def_stmt: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_model_store_cost: strided group_size = 2 .
compiler-optimizations.cpp:270:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:270:23: note: vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:270:23: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:270:23: note: ==> examining statement: i_11 = i_23 + 1;
compiler-optimizations.cpp:270:23: note: irrelevant.
compiler-optimizations.cpp:270:23: note: ==> examining statement: if (n_8(D) <= i_11)
compiler-optimizations.cpp:270:23: note: irrelevant.
compiler-optimizations.cpp:270:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:270:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:270:23: note: Cost model analysis: 
  Vector inside of loop cost: 156
  Vector prologue cost: 36
  Vector epilogue cost: 132
  Scalar iteration cost: 132
  Scalar outside cost: 32
  Vector outside cost: 168
  prologue iterations: 0
  epilogue iterations: 1
  Calculated minimum iters for profitability: 2
compiler-optimizations.cpp:270:23: note:   Runtime profitability threshold = 2
compiler-optimizations.cpp:270:23: note:   Static estimate profitability threshold = 2
compiler-optimizations.cpp:270:23: note: epilog loop required
compiler-optimizations.cpp:270:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:270:23: note: Analyze phi: i_23 = PHI <0(5), i_11(6)>
compiler-optimizations.cpp:270:23: note: Analyze phi: .MEM_24 = PHI <.MEM_7(D)(5), .MEM_20(6)>
compiler-optimizations.cpp:270:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:270:23: note: loop vectorized
compiler-optimizations.cpp:270:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:270:23: note: Profitability threshold is 2 loop iterations.
split exit edge
compiler-optimizations.cpp:270:23: note: vect_update_ivs_after_vectorizer: phi: i_23 = PHI <i_11(6), 0(9)>
compiler-optimizations.cpp:270:23: note: vect_update_ivs_after_vectorizer: phi: .MEM_24 = PHI <.MEM_20(6), .MEM_7(D)(9)>
compiler-optimizations.cpp:270:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:270:23: note: ------>vectorizing phi: i_23 = PHI <i_11(6), 0(16)>
compiler-optimizations.cpp:270:23: note: ------>vectorizing phi: .MEM_24 = PHI <.MEM_20(6), .MEM_7(D)(16)>
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_23;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _2 = _1 * 16;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _3 = a_9(D) + _2;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:270:23: note: create vector_type-pointer variable to type: vector(2) double  vectorizing a pointer ref: MEM[(const struct complex &)a_9(D)]
compiler-optimizations.cpp:270:23: note: created a_9(D)
compiler-optimizations.cpp:270:23: note: add new stmt: vect_in_6.398_48 = MEM[(const struct complex &)vectp_a.396_46];
compiler-optimizations.cpp:270:23: note: add new stmt: vectp_a.396_49 = vectp_a.396_46 + 16;
compiler-optimizations.cpp:270:23: note: add new stmt: vect_in_6.399_50 = MEM[(const struct complex &)vectp_a.396_49];
compiler-optimizations.cpp:270:23: note: add new stmt: vect_perm_even_51 = VEC_PERM_EXPR <vect_in_6.398_48, vect_in_6.399_50, { 0, 2 }>;
compiler-optimizations.cpp:270:23: note: add new stmt: vect_perm_odd_52 = VEC_PERM_EXPR <vect_in_6.398_48, vect_in_6.399_50, { 1, 3 }>;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: transform binary/unary operation.
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: in_6
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: in_6
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: add new stmt: vect__12.400_53 = vect_perm_even_51 * vect_perm_even_51;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: transform binary/unary operation.
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: in$8_10
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: in$8_10
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: add new stmt: vect__13.401_54 = vect_perm_odd_52 * vect_perm_odd_52;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _12
compiler-optimizations.cpp:270:23: note: def_stmt: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:270:23: note: def_stmt: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: transform binary/unary operation.
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: _12
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _12
compiler-optimizations.cpp:270:23: note: def_stmt: _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  _12 = in_6 * in_6;
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: _13
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:270:23: note: def_stmt: _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  _13 = in$8_10 * in$8_10;
compiler-optimizations.cpp:270:23: note: add new stmt: vect__14.402_55 = vect__12.400_53 - vect__13.401_54;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand 2.0e+0
compiler-optimizations.cpp:270:23: note: transform binary/unary operation.
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: in_6
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in_6
compiler-optimizations.cpp:270:23: note: def_stmt: in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  in_6 = MEM[(const struct complex &)_3];
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: 2.0e+0
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand 2.0e+0
compiler-optimizations.cpp:270:23: note: created new init_stmt: vect_cst__56 = { 2.0e+0, 2.0e+0 };
compiler-optimizations.cpp:270:23: note: add new stmt: vect__15.403_57 = vect_perm_even_51 * vect_cst__56;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:270:23: note: def_stmt: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: transform binary/unary operation.
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: in$8_10
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand in$8_10
compiler-optimizations.cpp:270:23: note: def_stmt: in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  in$8_10 = MEM[(const struct complex &)_3 + 8];
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: _15
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:270:23: note: def_stmt: _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  _15 = in_6 * 2.0e+0;
compiler-optimizations.cpp:270:23: note: add new stmt: vect__16.404_58 = vect_perm_odd_52 * vect__15.403_57;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: MEM[(struct complex *)_3] = _14;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:270:23: note: def_stmt: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: MEM[(struct complex *)_3 + 8B] = _16;
compiler-optimizations.cpp:270:23: note: transform statement.
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note: no array mode for V2DF[2]
compiler-optimizations.cpp:270:23: note: transform store. ncopies = 1
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: _14
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _14
compiler-optimizations.cpp:270:23: note: def_stmt: _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  _14 = _12 - _13;
compiler-optimizations.cpp:270:23: note: vect_get_vec_def_for_operand: _16
compiler-optimizations.cpp:270:23: note: vect_is_simple_use: operand _16
compiler-optimizations.cpp:270:23: note: def_stmt: _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: type of def: internal
compiler-optimizations.cpp:270:23: note:   def_stmt =  _16 = in$8_10 * _15;
compiler-optimizations.cpp:270:23: note: create vector_type-pointer variable to type: vector(2) double  vectorizing a pointer ref: MEM[(struct complex *)a_9(D)]
compiler-optimizations.cpp:270:23: note: created a_9(D)
compiler-optimizations.cpp:270:23: note: add new stmt: vect_inter_high_61 = VEC_PERM_EXPR <vect__14.402_55, vect__16.404_58, { 0, 2 }>;
compiler-optimizations.cpp:270:23: note: add new stmt: vect_inter_low_62 = VEC_PERM_EXPR <vect__14.402_55, vect__16.404_58, { 1, 3 }>;
compiler-optimizations.cpp:270:23: note: add new stmt: MEM[(struct complex *)vectp_a.405_59] = vect_inter_high_61;
compiler-optimizations.cpp:270:23: note: add new stmt: vectp_a.405_64 = vectp_a.405_59 + 16;
compiler-optimizations.cpp:270:23: note: add new stmt: MEM[(struct complex *)vectp_a.405_64] = vect_inter_low_62;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: i_11 = i_23 + 1;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: vectp_a.396_47 = vectp_a.396_49 + 16;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: vectp_a.405_60 = vectp_a.405_64 + 16;
compiler-optimizations.cpp:270:23: note: ------>vectorizing statement: if (n_8(D) <= i_11)
compiler-optimizations.cpp:270:23: note: New loop exit condition: if (ivtmp_67 >= bnd.393_42)
compiler-optimizations.cpp:270:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:269:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:270:23: note: loop turned into non-loop; it never loops
compiler-optimizations.cpp:269:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:270:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:270:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:270:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:270:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:270:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:270:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:270:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:271:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:271:27: note: not vectorized: no vectype for stmt: vect_in_6.398_48 = MEM[(const struct complex &)vectp_a.396_46];
 scalar_type: vector(2) double
compiler-optimizations.cpp:271:27: note: not vectorized: no vectype for stmt: vect_in_6.399_50 = MEM[(const struct complex &)vectp_a.396_49];
 scalar_type: vector(2) double
compiler-optimizations.cpp:271:27: note: not vectorized: no vectype for stmt: MEM[(struct complex *)vectp_a.405_59] = vect_inter_high_61;
 scalar_type: vector(2) double
compiler-optimizations.cpp:271:27: note: not vectorized: no vectype for stmt: MEM[(struct complex *)vectp_a.405_64] = vect_inter_low_62;
 scalar_type: vector(2) double
compiler-optimizations.cpp:271:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:271:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:271:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:271:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:271:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:271:27: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:271:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:270:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:270:5: note: got vectype for stmt: in_29 = MEM[(const struct complex &)_30];
vector(2) double
compiler-optimizations.cpp:270:5: note: got vectype for stmt: in$8_28 = MEM[(const struct complex &)_30 + 8];
vector(2) double
compiler-optimizations.cpp:270:5: note: got vectype for stmt: MEM[(struct complex *)_30] = _22;
vector(2) double
compiler-optimizations.cpp:270:5: note: got vectype for stmt: MEM[(struct complex *)_30 + 8B] = _5;
vector(2) double
compiler-optimizations.cpp:270:5: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:270:5: note: Detected interleaving load MEM[(const struct complex &)_30] and MEM[(const struct complex &)_30 + 8]
compiler-optimizations.cpp:270:5: note: Detected interleaving store MEM[(struct complex *)_30] and MEM[(struct complex *)_30 + 8B]
compiler-optimizations.cpp:270:5: note: Detected interleaving load of size 2 starting with in_29 = MEM[(const struct complex &)_30];
compiler-optimizations.cpp:270:5: note: Detected interleaving store of size 2 starting with MEM[(struct complex *)_30] = _22;
compiler-optimizations.cpp:270:5: note: === vect_pattern_recog ===
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand _32
compiler-optimizations.cpp:270:5: note: def_stmt: _32 = (long unsigned int) i_37;
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand i_37
compiler-optimizations.cpp:270:5: note: def_stmt: i_37 = PHI <tmp.395_44(11), 0(5)>
compiler-optimizations.cpp:270:5: note: type of def: external
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand 16
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand in_29
compiler-optimizations.cpp:270:5: note: def_stmt: in_29 = MEM[(const struct complex &)_30];
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand in$8_28
compiler-optimizations.cpp:270:5: note: def_stmt: in$8_28 = MEM[(const struct complex &)_30 + 8];
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand in_29
compiler-optimizations.cpp:270:5: note: def_stmt: in_29 = MEM[(const struct complex &)_30];
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand in$8_28
compiler-optimizations.cpp:270:5: note: def_stmt: in$8_28 = MEM[(const struct complex &)_30 + 8];
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: === vect_analyze_slp ===
compiler-optimizations.cpp:270:5: note: Build SLP for MEM[(struct complex *)_30] = _22;
compiler-optimizations.cpp:270:5: note: Build SLP for MEM[(struct complex *)_30 + 8B] = _5;
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand _22
compiler-optimizations.cpp:270:5: note: def_stmt: _22 = _27 - _26;
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:270:5: note: def_stmt: _5 = in$8_28 * _21;
compiler-optimizations.cpp:270:5: note: type of def: internal
compiler-optimizations.cpp:270:5: note: Build SLP for _22 = _27 - _26;
compiler-optimizations.cpp:270:5: note: Build SLP for _5 = in$8_28 * _21;
compiler-optimizations.cpp:270:5: note: Build SLP failed: different operation in stmt _5 = in$8_28 * _21;
compiler-optimizations.cpp:270:5: note: original stmt _22 = _27 - _26;
compiler-optimizations.cpp:270:5: note: recording new base alignment for a_9(D) + (long unsigned int) i_37 * 16
compiler-optimizations.cpp:270:5: note:   alignment:    8
compiler-optimizations.cpp:270:5: note:   misalignment: 0
compiler-optimizations.cpp:270:5: note:   based on:     in_29 = MEM[(const struct complex &)_30];
compiler-optimizations.cpp:270:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:270:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:273:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:273:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_5 and *_14
consider run-time aliasing test between *_12 and *_14
consider run-time aliasing test between *_5 and *_14
consider run-time aliasing test between *_12 and *_14

Analyzing loop at compiler-optimizations.cpp:276
compiler-optimizations.cpp:276:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:276:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:276:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:276:23: note: === get_loop_niters ===
compiler-optimizations.cpp:276:23: note: Considering outer-loop vectorization.
compiler-optimizations.cpp:276:23: note: === get_loop_niters ===
compiler-optimizations.cpp:276:23: note: Symbolic number of iterations is (unsigned int) n_21(D) + 4294967295
compiler-optimizations.cpp:276:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:276:23: note: analyze in outer loop: *(a_22(D) + (sizetype) ((long unsigned int) i_31 * 4))
compiler-optimizations.cpp:276:23: note: 	outer base_address: a_22(D)
	outer offset from base address: 0
	outer constant offset from base address: 4
	outer step: 4
	outer base alignment: 4

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 4
compiler-optimizations.cpp:276:23: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:276:23: note: not vectorized: not suitable for strided load _6 = *_5;
compiler-optimizations.cpp:276:23: note: bad data references.

Analyzing loop at compiler-optimizations.cpp:277
compiler-optimizations.cpp:277:27: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:277:27: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:277:27: note: === get_loop_niters ===
compiler-optimizations.cpp:277:27: note: Symbolic number of iterations is (unsigned int) n_21(D)
compiler-optimizations.cpp:277:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:277:27: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:277:27: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:277:27: note: got vectype for stmt: *_14 = _15;
vector(4) int
compiler-optimizations.cpp:277:27: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:277:27: note: Analyze phi: j_32 = PHI <0(3), j_25(9)>
compiler-optimizations.cpp:277:27: note: Access function of PHI: {0, +, 1}_2
compiler-optimizations.cpp:277:27: note: step: 1,  init: 0
compiler-optimizations.cpp:277:27: note: Detected induction.
compiler-optimizations.cpp:277:27: note: Analyze phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(9)>
compiler-optimizations.cpp:277:27: note: === vect_pattern_recog ===
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand n_21(D)
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _3
compiler-optimizations.cpp:277:27: note: def_stmt: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _2
compiler-optimizations.cpp:277:27: note: def_stmt: _2 = _1 + i_31;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:277:27: note: def_stmt: _7 = j_32 + -1;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:277:27: note: def_stmt: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:277:27: note: def_stmt: _9 = _8 + i_31;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:277:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:277:27: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:277:27: note: init: phi relevant? j_32 = PHI <0(3), j_25(9)>
compiler-optimizations.cpp:277:27: note: init: phi relevant? .MEM_35 = PHI <.MEM_34(3), .MEM_24(9)>
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _1 = n_21(D) * j_32;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _2 = _1 + i_31;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _3 = (long unsigned int) _2;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _4 = _3 * 4;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _5 = a_22(D) + _4;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _6 = *_5;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _7 = j_32 + -1;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _8 = _7 * n_21(D);
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _9 = _8 + i_31;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _10 = (long unsigned int) _9;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _11 = _10 * 4;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _12 = a_22(D) + _11;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _13 = *_12;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _14 = b_23(D) + _4;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? *_14 = _15;
compiler-optimizations.cpp:277:27: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:277:27: note: mark relevant 5, live 0: *_14 = _15;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? j_25 = j_32 + 1;
compiler-optimizations.cpp:277:27: note: init: stmt relevant? if (n_21(D) <= j_25)
compiler-optimizations.cpp:277:27: note: worklist: examine stmt: *_14 = _15;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:277:27: note: def_stmt: _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: mark relevant 5, live 0: _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: worklist: examine stmt: _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:277:27: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: mark relevant 5, live 0: _6 = *_5;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:277:27: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: mark relevant 5, live 0: _13 = *_12;
compiler-optimizations.cpp:277:27: note: worklist: examine stmt: _13 = *_12;
compiler-optimizations.cpp:277:27: note: worklist: examine stmt: _6 = *_5;
compiler-optimizations.cpp:277:27: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:277:27: note: versioning for alias required: can't determine dependence between *_5 and *_14
consider run-time aliasing test between *_5 and *_14
compiler-optimizations.cpp:277:27: note: versioning for alias required: can't determine dependence between *_12 and *_14
consider run-time aliasing test between *_12 and *_14
compiler-optimizations.cpp:277:27: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:277:27: note: ==> examining phi: j_32 = PHI <0(3), j_25(9)>
compiler-optimizations.cpp:277:27: note: ==> examining phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(9)>
compiler-optimizations.cpp:277:27: note: ==> examining statement: _1 = n_21(D) * j_32;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _2 = _1 + i_31;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _4 = _3 * 4;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _5 = a_22(D) + _4;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _6 = *_5;
compiler-optimizations.cpp:277:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:277:27: note: vectype: vector(4) int
compiler-optimizations.cpp:277:27: note: nunits = 4
compiler-optimizations.cpp:277:27: note: ==> examining statement: _7 = j_32 + -1;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _8 = _7 * n_21(D);
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _9 = _8 + i_31;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _11 = _10 * 4;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _12 = a_22(D) + _11;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:277:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:277:27: note: vectype: vector(4) int
compiler-optimizations.cpp:277:27: note: nunits = 4
compiler-optimizations.cpp:277:27: note: ==> examining statement: _14 = b_23(D) + _4;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:277:27: note: vectype: vector(4) int
compiler-optimizations.cpp:277:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:277:27: note: vectype: vector(4) int
compiler-optimizations.cpp:277:27: note: nunits = 4
compiler-optimizations.cpp:277:27: note: ==> examining statement: *_14 = _15;
compiler-optimizations.cpp:277:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:277:27: note: vectype: vector(4) int
compiler-optimizations.cpp:277:27: note: nunits = 4
compiler-optimizations.cpp:277:27: note: ==> examining statement: j_25 = j_32 + 1;
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: ==> examining statement: if (n_21(D) <= j_25)
compiler-optimizations.cpp:277:27: note: skip.
compiler-optimizations.cpp:277:27: note: vectorization factor = 4
compiler-optimizations.cpp:277:27: note: === vect_analyze_slp ===
compiler-optimizations.cpp:277:27: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:277:27: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:277:27: note: recording new base alignment for a_22(D) + (sizetype) ((long unsigned int) i_31 * 4)
compiler-optimizations.cpp:277:27: note:   alignment:    4
compiler-optimizations.cpp:277:27: note:   misalignment: 0
compiler-optimizations.cpp:277:27: note:   based on:     _6 = *_5;
compiler-optimizations.cpp:277:27: note: recording new base alignment for a_22(D) + (sizetype) (((long unsigned int) i_31 - (long unsigned int) n_21(D)) * 4)
compiler-optimizations.cpp:277:27: note:   alignment:    4
compiler-optimizations.cpp:277:27: note:   misalignment: 0
compiler-optimizations.cpp:277:27: note:   based on:     _13 = *_12;
compiler-optimizations.cpp:277:27: note: recording new base alignment for b_23(D) + (sizetype) ((long unsigned int) i_31 * 4)
compiler-optimizations.cpp:277:27: note:   alignment:    4
compiler-optimizations.cpp:277:27: note:   misalignment: 0
compiler-optimizations.cpp:277:27: note:   based on:     *_14 = _15;
compiler-optimizations.cpp:277:27: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:277:27: note: Unknown alignment for access: *_5
compiler-optimizations.cpp:277:27: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:277:27: note: Unknown alignment for access: *_12
compiler-optimizations.cpp:277:27: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:277:27: note: Unknown alignment for access: *_14
compiler-optimizations.cpp:277:27: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:277:27: note: improved number of alias checks from 2 to 2
compiler-optimizations.cpp:277:27: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:277:27: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:277:27: note: Analyze phi: j_32 = PHI <0(3), j_25(9)>
compiler-optimizations.cpp:277:27: note: Analyze phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(9)>
compiler-optimizations.cpp:277:27: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:277:27: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:277:27: note: examining phi: j_32 = PHI <0(3), j_25(9)>
compiler-optimizations.cpp:277:27: note: examining phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(9)>
compiler-optimizations.cpp:277:27: note: ==> examining statement: _1 = n_21(D) * j_32;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _2 = _1 + i_31;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _4 = _3 * 4;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _5 = a_22(D) + _4;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _6 = *_5;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand *_5
compiler-optimizations.cpp:277:27: note: not ssa-name.
compiler-optimizations.cpp:277:27: note: use not simple.
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand *_5
compiler-optimizations.cpp:277:27: note: not ssa-name.
compiler-optimizations.cpp:277:27: note: use not simple.
compiler-optimizations.cpp:277:27: note: cannot truncate variable step.
compiler-optimizations.cpp:277:27: note: can't use a fully-masked loop because an access isn't contiguous.
compiler-optimizations.cpp:277:27: note: vect_model_load_cost: inside_cost = 112, prologue_cost = 0 .
compiler-optimizations.cpp:277:27: note: ==> examining statement: _7 = j_32 + -1;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _8 = _7 * n_21(D);
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _9 = _8 + i_31;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _11 = _10 * 4;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _12 = a_22(D) + _11;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand *_12
compiler-optimizations.cpp:277:27: note: not ssa-name.
compiler-optimizations.cpp:277:27: note: use not simple.
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand *_12
compiler-optimizations.cpp:277:27: note: not ssa-name.
compiler-optimizations.cpp:277:27: note: use not simple.
compiler-optimizations.cpp:277:27: note: cannot truncate variable step.
compiler-optimizations.cpp:277:27: note: vect_model_load_cost: inside_cost = 112, prologue_cost = 0 .
compiler-optimizations.cpp:277:27: note: ==> examining statement: _14 = b_23(D) + _4;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:277:27: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:277:27: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: === vectorizable_operation ===
compiler-optimizations.cpp:277:27: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:277:27: note: ==> examining statement: *_14 = _15;
compiler-optimizations.cpp:277:27: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:277:27: note: def_stmt: _15 = _6 - _13;
compiler-optimizations.cpp:277:27: note: type of def: internal
compiler-optimizations.cpp:277:27: note: cannot truncate variable step.
compiler-optimizations.cpp:277:27: note: vect_model_store_cost: inside_cost = 64, prologue_cost = 0 .
compiler-optimizations.cpp:277:27: note: ==> examining statement: j_25 = j_32 + 1;
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: ==> examining statement: if (n_21(D) <= j_25)
compiler-optimizations.cpp:277:27: note: irrelevant.
compiler-optimizations.cpp:277:27: note: not using a fully-masked loop.
cost model: Adding cost of checks for loop versioning aliasing.
compiler-optimizations.cpp:277:27: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:277:27: note: Cost model analysis: 
  Vector inside of loop cost: 292
  Vector prologue cost: 56
  Vector epilogue cost: 80
  Scalar iteration cost: 40
  Scalar outside cost: 8
  Vector outside cost: 136
  prologue iterations: 0
  epilogue iterations: 2
compiler-optimizations.cpp:277:27: note: cost model: the vector iteration cost = 292 divided by the scalar iteration cost = 40 is greater or equal to the vectorization factor = 4.
compiler-optimizations.cpp:277:27: note: not vectorized: vectorization not profitable.
compiler-optimizations.cpp:277:27: note: not vectorized: vector version will never be profitable.
compiler-optimizations.cpp:275:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:275:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:276:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:276:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:276:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:276:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:276:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:277:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:277:27: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:277:27: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:277:27: note: got vectype for stmt: *_14 = _15;
vector(4) int
compiler-optimizations.cpp:277:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:277:27: note: not consecutive access _6 = *_5;
compiler-optimizations.cpp:277:27: note: not consecutive access *_14 = _15;
compiler-optimizations.cpp:277:27: note: not consecutive access _13 = *_12;
compiler-optimizations.cpp:277:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:277:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:277:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:276:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:276:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:276:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:276:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:281:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:281:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_5 and *_14
consider run-time aliasing test between *_12 and *_14
consider run-time aliasing test between *_5 and *_14
consider run-time aliasing test between *_12 and *_14

Analyzing loop at compiler-optimizations.cpp:284
compiler-optimizations.cpp:284:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:284:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:284:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:284:23: note: === get_loop_niters ===
compiler-optimizations.cpp:284:23: note: Considering outer-loop vectorization.
compiler-optimizations.cpp:284:23: note: === get_loop_niters ===
compiler-optimizations.cpp:284:23: note: Symbolic number of iterations is (unsigned int) n_21(D)
compiler-optimizations.cpp:284:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:284:23: note: analyze in outer loop: *(a_22(D) + (sizetype) (((long unsigned int) _1 + 1) * 4))
compiler-optimizations.cpp:284:23: note: 	outer base_address: a_22(D)
	outer offset from base address: 0
	outer constant offset from base address: 4
	outer step: (ssizetype) ((long unsigned int) n_21(D) * 4)
	outer base alignment: 4

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 4
compiler-optimizations.cpp:284:23: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:284:23: note: analyze in outer loop: *(a_22(D) + (sizetype) (((long unsigned int) _8 + 1) * 4))
compiler-optimizations.cpp:284:23: note: 	outer base_address: a_22(D) + (sizetype) (((long unsigned int) -n_21(D) + 1) * 4)
	outer offset from base address: 0
	outer constant offset from base address: 0
	outer step: (ssizetype) ((long unsigned int) n_21(D) * 4)
	outer base alignment: 4

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 4
compiler-optimizations.cpp:284:23: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:284:23: note: analyze in outer loop: *(b_23(D) + (sizetype) (((long unsigned int) _1 + 1) * 4))
compiler-optimizations.cpp:284:23: note: 	outer base_address: b_23(D)
	outer offset from base address: 0
	outer constant offset from base address: 4
	outer step: (ssizetype) ((long unsigned int) n_21(D) * 4)
	outer base alignment: 4

	outer base misalignment: 0

	outer offset alignment: 128

	outer step alignment: 4
compiler-optimizations.cpp:284:23: note: got vectype for stmt: *_14 = _15;
vector(4) int
compiler-optimizations.cpp:284:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:284:23: note: Analyze phi: j_31 = PHI <0(11), j_26(9)>
compiler-optimizations.cpp:284:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:284:23: note: step: 1,  init: 0
compiler-optimizations.cpp:284:23: note: Detected induction.
compiler-optimizations.cpp:284:23: note: Analyze phi: .MEM_34 = PHI <.MEM_20(D)(11), .MEM_24(9)>
compiler-optimizations.cpp:284:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:284:23: note: Analyze phi: i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:284:23: note: Access function of PHI: {1, +, 1}_2
compiler-optimizations.cpp:284:23: note: step: 1,  init: 1
compiler-optimizations.cpp:284:23: note: Detected induction.
compiler-optimizations.cpp:284:23: note: Analyze phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:284:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand n_21(D)
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:284:23: note: def_stmt: _7 = j_31 + -1;
compiler-optimizations.cpp:284:23: note: type of def: internal
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand _3
compiler-optimizations.cpp:284:23: note: def_stmt: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:284:23: note: type of def: internal
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand _2
compiler-optimizations.cpp:284:23: note: def_stmt: _2 = _1 + i_32;
compiler-optimizations.cpp:284:23: note: type of def: internal
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:284:23: note: def_stmt: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:284:23: note: type of def: internal
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:284:23: note: def_stmt: _9 = _8 + i_32;
compiler-optimizations.cpp:284:23: note: type of def: internal
compiler-optimizations.cpp:284:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:284:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:284:23: note: grouped access in outer loop.
compiler-optimizations.cpp:284:23: note: not vectorized: complicated access pattern.
compiler-optimizations.cpp:284:23: note: bad data access.

Analyzing loop at compiler-optimizations.cpp:285
compiler-optimizations.cpp:285:27: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:285:27: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:285:27: note: === get_loop_niters ===
compiler-optimizations.cpp:285:27: note: Symbolic number of iterations is (unsigned int) n_21(D) + 4294967295
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: *_14 = _15;
vector(4) int
compiler-optimizations.cpp:285:27: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:285:27: note: Analyze phi: i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:285:27: note: Access function of PHI: {1, +, 1}_2
compiler-optimizations.cpp:285:27: note: step: 1,  init: 1
compiler-optimizations.cpp:285:27: note: Detected induction.
compiler-optimizations.cpp:285:27: note: Analyze phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:285:27: note: === vect_pattern_recog ===
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _3
compiler-optimizations.cpp:285:27: note: def_stmt: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _2
compiler-optimizations.cpp:285:27: note: def_stmt: _2 = _1 + i_32;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:285:27: note: def_stmt: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:285:27: note: def_stmt: _9 = _8 + i_32;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:285:27: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:285:27: note: init: phi relevant? i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:285:27: note: init: phi relevant? .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _2 = _1 + i_32;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _3 = (long unsigned int) _2;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _4 = _3 * 4;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _5 = a_22(D) + _4;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _6 = *_5;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _9 = _8 + i_32;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _10 = (long unsigned int) _9;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _11 = _10 * 4;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _12 = a_22(D) + _11;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _13 = *_12;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _14 = b_23(D) + _4;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? *_14 = _15;
compiler-optimizations.cpp:285:27: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:285:27: note: mark relevant 5, live 0: *_14 = _15;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? i_25 = i_32 + 1;
compiler-optimizations.cpp:285:27: note: init: stmt relevant? if (n_21(D) <= i_25)
compiler-optimizations.cpp:285:27: note: worklist: examine stmt: *_14 = _15;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:285:27: note: def_stmt: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: mark relevant 5, live 0: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: worklist: examine stmt: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:285:27: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: mark relevant 5, live 0: _6 = *_5;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:285:27: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: mark relevant 5, live 0: _13 = *_12;
compiler-optimizations.cpp:285:27: note: worklist: examine stmt: _13 = *_12;
compiler-optimizations.cpp:285:27: note: worklist: examine stmt: _6 = *_5;
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:285:27: note: versioning for alias required: can't determine dependence between *_5 and *_14
consider run-time aliasing test between *_5 and *_14
compiler-optimizations.cpp:285:27: note: versioning for alias required: can't determine dependence between *_12 and *_14
consider run-time aliasing test between *_12 and *_14
compiler-optimizations.cpp:285:27: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:285:27: note: ==> examining phi: i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:285:27: note: ==> examining phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:285:27: note: ==> examining statement: _2 = _1 + i_32;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _4 = _3 * 4;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _5 = a_22(D) + _4;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _6 = *_5;
compiler-optimizations.cpp:285:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:285:27: note: vectype: vector(4) int
compiler-optimizations.cpp:285:27: note: nunits = 4
compiler-optimizations.cpp:285:27: note: ==> examining statement: _9 = _8 + i_32;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _11 = _10 * 4;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _12 = a_22(D) + _11;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:285:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:285:27: note: vectype: vector(4) int
compiler-optimizations.cpp:285:27: note: nunits = 4
compiler-optimizations.cpp:285:27: note: ==> examining statement: _14 = b_23(D) + _4;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:285:27: note: vectype: vector(4) int
compiler-optimizations.cpp:285:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:285:27: note: vectype: vector(4) int
compiler-optimizations.cpp:285:27: note: nunits = 4
compiler-optimizations.cpp:285:27: note: ==> examining statement: *_14 = _15;
compiler-optimizations.cpp:285:27: note: get vectype for scalar type:  int
compiler-optimizations.cpp:285:27: note: vectype: vector(4) int
compiler-optimizations.cpp:285:27: note: nunits = 4
compiler-optimizations.cpp:285:27: note: ==> examining statement: i_25 = i_32 + 1;
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: ==> examining statement: if (n_21(D) <= i_25)
compiler-optimizations.cpp:285:27: note: skip.
compiler-optimizations.cpp:285:27: note: vectorization factor = 4
compiler-optimizations.cpp:285:27: note: === vect_analyze_slp ===
compiler-optimizations.cpp:285:27: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:285:27: note: recording new base alignment for a_22(D) + (sizetype) (((long unsigned int) _1 + 1) * 4)
compiler-optimizations.cpp:285:27: note:   alignment:    4
compiler-optimizations.cpp:285:27: note:   misalignment: 0
compiler-optimizations.cpp:285:27: note:   based on:     _6 = *_5;
compiler-optimizations.cpp:285:27: note: recording new base alignment for a_22(D) + (sizetype) (((long unsigned int) _8 + 1) * 4)
compiler-optimizations.cpp:285:27: note:   alignment:    4
compiler-optimizations.cpp:285:27: note:   misalignment: 0
compiler-optimizations.cpp:285:27: note:   based on:     _13 = *_12;
compiler-optimizations.cpp:285:27: note: recording new base alignment for b_23(D) + (sizetype) (((long unsigned int) _1 + 1) * 4)
compiler-optimizations.cpp:285:27: note:   alignment:    4
compiler-optimizations.cpp:285:27: note:   misalignment: 0
compiler-optimizations.cpp:285:27: note:   based on:     *_14 = _15;
compiler-optimizations.cpp:285:27: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:285:27: note: can't force alignment of ref: *_5
compiler-optimizations.cpp:285:27: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:285:27: note: can't force alignment of ref: *_12
compiler-optimizations.cpp:285:27: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:285:27: note: can't force alignment of ref: *_14
compiler-optimizations.cpp:285:27: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:285:27: note: improved number of alias checks from 2 to 2
compiler-optimizations.cpp:285:27: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:285:27: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:285:27: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:285:27: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:285:27: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:285:27: note: Analyze phi: i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:285:27: note: Analyze phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:285:27: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:285:27: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: Setting misalignment to unknown (-1).
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: vect_model_store_cost: aligned.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 24, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_get_data_access_cost: inside_cost = 36, outside_cost = 0.
compiler-optimizations.cpp:285:27: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:285:27: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:285:27: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:285:27: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:285:27: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:285:27: note: examining phi: i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:285:27: note: examining phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:285:27: note: ==> examining statement: _2 = _1 + i_32;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _4 = _3 * 4;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _5 = a_22(D) + _4;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _6 = *_5;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand *_5
compiler-optimizations.cpp:285:27: note: not ssa-name.
compiler-optimizations.cpp:285:27: note: use not simple.
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand *_5
compiler-optimizations.cpp:285:27: note: not ssa-name.
compiler-optimizations.cpp:285:27: note: use not simple.
compiler-optimizations.cpp:285:27: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:285:27: note: ==> examining statement: _9 = _8 + i_32;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _11 = _10 * 4;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _12 = a_22(D) + _11;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _13 = *_12;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand *_12
compiler-optimizations.cpp:285:27: note: not ssa-name.
compiler-optimizations.cpp:285:27: note: use not simple.
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand *_12
compiler-optimizations.cpp:285:27: note: not ssa-name.
compiler-optimizations.cpp:285:27: note: use not simple.
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:285:27: note: ==> examining statement: _14 = b_23(D) + _4;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:285:27: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:285:27: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: === vectorizable_operation ===
compiler-optimizations.cpp:285:27: note: vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
compiler-optimizations.cpp:285:27: note: ==> examining statement: *_14 = _15;
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:285:27: note: def_stmt: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_model_store_cost: unaligned supported by hardware.
compiler-optimizations.cpp:285:27: note: vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:285:27: note: ==> examining statement: i_25 = i_32 + 1;
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: ==> examining statement: if (n_21(D) <= i_25)
compiler-optimizations.cpp:285:27: note: irrelevant.
compiler-optimizations.cpp:285:27: note: not using a fully-masked loop.
cost model: Adding cost of checks for loop versioning aliasing.
compiler-optimizations.cpp:285:27: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:285:27: note: Cost model analysis: 
  Vector inside of loop cost: 40
  Vector prologue cost: 56
  Vector epilogue cost: 80
  Scalar iteration cost: 40
  Scalar outside cost: 8
  Vector outside cost: 136
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 4
compiler-optimizations.cpp:285:27: note:   Runtime profitability threshold = 4
compiler-optimizations.cpp:285:27: note:   Static estimate profitability threshold = 4
compiler-optimizations.cpp:285:27: note: epilog loop required
compiler-optimizations.cpp:285:27: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:285:27: note: Analyze phi: i_32 = PHI <1(3), i_25(10)>
compiler-optimizations.cpp:285:27: note: Analyze phi: .MEM_35 = PHI <.MEM_34(3), .MEM_24(10)>
compiler-optimizations.cpp:285:27: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:285:27: note: loop vectorized
compiler-optimizations.cpp:285:27: note: === vec_transform_loop ===
compiler-optimizations.cpp:285:27: note: Profitability threshold is 4 loop iterations.
create runtime check for data references *_5 and *_14
create runtime check for data references *_14 and *_12
compiler-optimizations.cpp:285:27: note: created 2 versioning for alias checks.
compiler-optimizations.cpp:285:27: note: loop versioned for vectorization because of possible aliasing
compiler-optimizations.cpp:285:27: note: vect_update_ivs_after_vectorizer: phi: i_32 = PHI <i_25(10), 1(16)>
compiler-optimizations.cpp:285:27: note: vect_update_ivs_after_vectorizer: phi: .MEM_35 = PHI <.MEM_24(10), .MEM_34(16)>
compiler-optimizations.cpp:285:27: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:285:27: note: ------>vectorizing phi: i_32 = PHI <i_25(10), 1(25)>
compiler-optimizations.cpp:285:27: note: ------>vectorizing phi: .MEM_35 = PHI <.MEM_24(10), .MEM_34(25)>
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _2 = _1 + i_32;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _3 = (long unsigned int) _2;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _4 = _3 * 4;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _5 = a_22(D) + _4;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _6 = *_5;
compiler-optimizations.cpp:285:27: note: transform statement.
compiler-optimizations.cpp:285:27: note: transform load. ncopies = 1
compiler-optimizations.cpp:285:27: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_22(D) + (sizetype) (((long unsigned int) _1 + 1) * 4)
compiler-optimizations.cpp:285:27: note: created vectp.434_113
compiler-optimizations.cpp:285:27: note: add new stmt: vect__6.435_119 = MEM[(int *)vectp.433_117];
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _9 = _8 + i_32;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _10 = (long unsigned int) _9;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _11 = _10 * 4;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _12 = a_22(D) + _11;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _13 = *_12;
compiler-optimizations.cpp:285:27: note: transform statement.
compiler-optimizations.cpp:285:27: note: transform load. ncopies = 1
compiler-optimizations.cpp:285:27: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_22(D) + (sizetype) (((long unsigned int) _8 + 1) * 4)
compiler-optimizations.cpp:285:27: note: created vectp.437_120
compiler-optimizations.cpp:285:27: note: add new stmt: vect__13.438_126 = MEM[(int *)vectp.436_124];
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _14 = b_23(D) + _4;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: transform statement.
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:285:27: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:285:27: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: transform binary/unary operation.
compiler-optimizations.cpp:285:27: note: vect_get_vec_def_for_operand: _6
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _6
compiler-optimizations.cpp:285:27: note: def_stmt: _6 = *_5;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note:   def_stmt =  _6 = *_5;
compiler-optimizations.cpp:285:27: note: vect_get_vec_def_for_operand: _13
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:285:27: note: def_stmt: _13 = *_12;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note:   def_stmt =  _13 = *_12;
compiler-optimizations.cpp:285:27: note: add new stmt: vect__15.439_127 = vect__6.435_119 - vect__13.438_126;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: *_14 = _15;
compiler-optimizations.cpp:285:27: note: transform statement.
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:285:27: note: def_stmt: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note: transform store. ncopies = 1
compiler-optimizations.cpp:285:27: note: vect_get_vec_def_for_operand: _15
compiler-optimizations.cpp:285:27: note: vect_is_simple_use: operand _15
compiler-optimizations.cpp:285:27: note: def_stmt: _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: type of def: internal
compiler-optimizations.cpp:285:27: note:   def_stmt =  _15 = _6 - _13;
compiler-optimizations.cpp:285:27: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_23(D) + (sizetype) (((long unsigned int) _1 + 1) * 4)
compiler-optimizations.cpp:285:27: note: created vectp.441_128
compiler-optimizations.cpp:285:27: note: add new stmt: MEM[(int *)vectp.440_132] = vect__15.439_127;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: i_25 = i_32 + 1;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: vectp.433_118 = vectp.433_117 + 16;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: vectp.436_125 = vectp.436_124 + 16;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: vectp.440_133 = vectp.440_132 + 16;
compiler-optimizations.cpp:285:27: note: ------>vectorizing statement: if (n_21(D) <= i_25)
compiler-optimizations.cpp:285:27: note: New loop exit condition: if (ivtmp_136 >= bnd.430_108)
compiler-optimizations.cpp:285:27: note: LOOP VECTORIZED

compiler-optimizations.cpp:283:6: note: vectorized 1 loops in function.
compiler-optimizations.cpp:285:27: note: loop with 2 iterations completely unrolled (header execution count 49959011)
compiler-optimizations.cpp:283:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:284:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:284:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:284:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:284:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:284:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:284:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:284:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:286:52: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:286:52: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:286:52: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:286:52: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:286:52: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:286:52: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:286:26: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:286:26: note: not vectorized: no vectype for stmt: vect__6.435_119 = MEM[(int *)vectp.433_117];
 scalar_type: vector(4) int
compiler-optimizations.cpp:286:26: note: not vectorized: no vectype for stmt: vect__13.438_126 = MEM[(int *)vectp.436_124];
 scalar_type: vector(4) int
compiler-optimizations.cpp:286:26: note: not vectorized: no vectype for stmt: MEM[(int *)vectp.440_132] = vect__15.439_127;
 scalar_type: vector(4) int
compiler-optimizations.cpp:286:26: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:286:26: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:286:26: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:286:26: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:286:26: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:286:26: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:286:26: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _6 = *_5;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _13 = *_12;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: *_14 = _15;
vector(4) int
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:285:27: note: not consecutive access _6 = *_5;
compiler-optimizations.cpp:285:27: note: not consecutive access *_14 = _15;
compiler-optimizations.cpp:285:27: note: not consecutive access _13 = *_12;
compiler-optimizations.cpp:285:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:285:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _142 = *_141;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _147 = *_146;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: *_148 = _149;
vector(4) int
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:285:27: note: not consecutive access _142 = *_141;
compiler-optimizations.cpp:285:27: note: not consecutive access *_148 = _149;
compiler-optimizations.cpp:285:27: note: not consecutive access _147 = *_146;
compiler-optimizations.cpp:285:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:285:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:285:9: note: got vectype for stmt: _97 = *_96;
vector(4) int
compiler-optimizations.cpp:285:9: note: got vectype for stmt: _102 = *_101;
vector(4) int
compiler-optimizations.cpp:285:9: note: got vectype for stmt: *_103 = _104;
vector(4) int
compiler-optimizations.cpp:285:9: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:285:9: note: not consecutive access _97 = *_96;
compiler-optimizations.cpp:285:9: note: not consecutive access *_103 = _104;
compiler-optimizations.cpp:285:9: note: not consecutive access _102 = *_101;
compiler-optimizations.cpp:285:9: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:285:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _77 = *_76;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: _82 = *_81;
vector(4) int
compiler-optimizations.cpp:285:27: note: got vectype for stmt: *_83 = _84;
vector(4) int
compiler-optimizations.cpp:285:27: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:285:27: note: not consecutive access _77 = *_76;
compiler-optimizations.cpp:285:27: note: not consecutive access *_83 = _84;
compiler-optimizations.cpp:285:27: note: not consecutive access _82 = *_81;
compiler-optimizations.cpp:285:27: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:285:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:285:27: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:284:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:284:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:284:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:284:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:289:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:289:1: note: not vectorized: not enough data-refs in basic block.
consider run-time aliasing test between *_4 and *_12
consider run-time aliasing test between *_6 and *_12
consider run-time aliasing test between *_10 and *_12

Analyzing loop at compiler-optimizations.cpp:292
compiler-optimizations.cpp:292:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:292:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:292:23: note: === get_loop_niters ===
compiler-optimizations.cpp:292:23: note: Symbolic number of iterations is (unsigned int) n_17(D)
compiler-optimizations.cpp:292:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:292:23: note: got vectype for stmt: _5 = *_4;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: *_8 = _9;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: _11 = *_10;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: *_12 = _13;
vector(4) int
compiler-optimizations.cpp:292:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:292:23: note: Analyze phi: i_27 = PHI <0(5), i_24(6)>
compiler-optimizations.cpp:292:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:292:23: note: step: 1,  init: 0
compiler-optimizations.cpp:292:23: note: Detected induction.
compiler-optimizations.cpp:292:23: note: Analyze phi: .MEM_28 = PHI <.MEM_16(D)(5), .MEM_23(6)>
compiler-optimizations.cpp:292:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:292:23: note: def_stmt: _1 = (long unsigned int) i_27;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand i_27
compiler-optimizations.cpp:292:23: note: def_stmt: i_27 = PHI <0(5), i_24(6)>
compiler-optimizations.cpp:292:23: note: type of def: induction
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:292:23: note: def_stmt: _5 = *_4;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:292:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:292:23: note: init: phi relevant? i_27 = PHI <0(5), i_24(6)>
compiler-optimizations.cpp:292:23: note: init: phi relevant? .MEM_28 = PHI <.MEM_16(D)(5), .MEM_23(6)>
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _1 = (long unsigned int) i_27;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _3 = _2 + 18446744073709551612;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _4 = a_18(D) + _3;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _5 = *_4;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _6 = b_19(D) + _2;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _7 = *_6;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _8 = a_18(D) + _2;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _9 = _5 * _7;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? *_8 = _9;
compiler-optimizations.cpp:292:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: *_8 = _9;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _10 = e_21(D) + _2;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _11 = *_10;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _12 = c_22(D) + _2;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? _13 = _9 + _11;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? *_12 = _13;
compiler-optimizations.cpp:292:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: *_12 = _13;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? i_24 = i_27 + 1;
compiler-optimizations.cpp:292:23: note: init: stmt relevant? if (n_17(D) <= i_24)
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: *_12 = _13;
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:292:23: note: def_stmt: _13 = _9 + _11;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: _13 = _9 + _11;
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: _13 = _9 + _11;
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:292:23: note: def_stmt: _9 = _5 * _7;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: _9 = _5 * _7;
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:292:23: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: _11 = *_10;
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: _11 = *_10;
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: _9 = _5 * _7;
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:292:23: note: def_stmt: _5 = *_4;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: _5 = *_4;
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:292:23: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: _7 = *_6;
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: _7 = *_6;
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: _5 = *_4;
compiler-optimizations.cpp:292:23: note: worklist: examine stmt: *_8 = _9;
compiler-optimizations.cpp:292:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:292:23: note: def_stmt: _9 = _5 * _7;
compiler-optimizations.cpp:292:23: note: type of def: internal
compiler-optimizations.cpp:292:23: note: mark relevant 5, live 0: _9 = _5 * _7;
compiler-optimizations.cpp:292:23: note: already marked relevant/live.
compiler-optimizations.cpp:292:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:292:23: note: dependence distance  = 1.
compiler-optimizations.cpp:292:23: note: not vectorized, possible dependence between data-refs *_4 and *_8
compiler-optimizations.cpp:292:23: note: bad data dependence.
compiler-optimizations.cpp:291:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:291:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:292:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:292:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:292:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:292:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:292:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:292:23: note: got vectype for stmt: _5 = *_4;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: *_8 = _9;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: _11 = *_10;
vector(4) int
compiler-optimizations.cpp:292:23: note: got vectype for stmt: *_12 = _13;
vector(4) int
compiler-optimizations.cpp:292:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:292:23: note: not consecutive access _5 = *_4;
compiler-optimizations.cpp:292:23: note: not consecutive access *_8 = _9;
compiler-optimizations.cpp:292:23: note: not consecutive access _7 = *_6;
compiler-optimizations.cpp:292:23: note: not consecutive access _11 = *_10;
compiler-optimizations.cpp:292:23: note: not consecutive access *_12 = _13;
compiler-optimizations.cpp:292:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:292:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:292:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:296:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:296:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:299
compiler-optimizations.cpp:299:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:299:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:299:23: note: === get_loop_niters ===
compiler-optimizations.cpp:299:23: note: Symbolic number of iterations is (unsigned int) n_17(D)
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:299:23: note: got vectype for stmt: _5 = *_4;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: *_8 = _9;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: _11 = *_10;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: *_12 = _13;
vector(4) int
compiler-optimizations.cpp:299:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:299:23: note: Analyze phi: i_27 = PHI <0(5), i_24(6)>
compiler-optimizations.cpp:299:23: note: Access function of PHI: {0, +, 1}_1
compiler-optimizations.cpp:299:23: note: step: 1,  init: 0
compiler-optimizations.cpp:299:23: note: Detected induction.
compiler-optimizations.cpp:299:23: note: Analyze phi: .MEM_28 = PHI <.MEM_16(D)(5), .MEM_23(6)>
compiler-optimizations.cpp:299:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:299:23: note: def_stmt: _1 = (long unsigned int) i_27;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand i_27
compiler-optimizations.cpp:299:23: note: def_stmt: i_27 = PHI <0(5), i_24(6)>
compiler-optimizations.cpp:299:23: note: type of def: induction
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:299:23: note: def_stmt: _5 = *_4;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:299:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:299:23: note: init: phi relevant? i_27 = PHI <0(5), i_24(6)>
compiler-optimizations.cpp:299:23: note: init: phi relevant? .MEM_28 = PHI <.MEM_16(D)(5), .MEM_23(6)>
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _1 = (long unsigned int) i_27;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _3 = _2 + 18446744073709551612;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _4 = a_18(D) + _3;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _5 = *_4;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _6 = b_19(D) + _2;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _7 = *_6;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _8 = a_18(D) + _2;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _9 = _5 * _7;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? *_8 = _9;
compiler-optimizations.cpp:299:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: *_8 = _9;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _10 = e_21(D) + _2;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _11 = *_10;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _12 = c_22(D) + _2;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? _13 = _9 + _11;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? *_12 = _13;
compiler-optimizations.cpp:299:23: note: vec_stmt_relevant_p: stmt has vdefs.
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: *_12 = _13;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? i_24 = i_27 + 1;
compiler-optimizations.cpp:299:23: note: init: stmt relevant? if (n_17(D) <= i_24)
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: *_12 = _13;
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _13
compiler-optimizations.cpp:299:23: note: def_stmt: _13 = _9 + _11;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: _13 = _9 + _11;
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: _13 = _9 + _11;
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:299:23: note: def_stmt: _9 = _5 * _7;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: _9 = _5 * _7;
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _11
compiler-optimizations.cpp:299:23: note: def_stmt: _11 = *_10;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: _11 = *_10;
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: _11 = *_10;
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: _9 = _5 * _7;
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _5
compiler-optimizations.cpp:299:23: note: def_stmt: _5 = *_4;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: _5 = *_4;
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:299:23: note: def_stmt: _7 = *_6;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: _7 = *_6;
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: _7 = *_6;
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: _5 = *_4;
compiler-optimizations.cpp:299:23: note: worklist: examine stmt: *_8 = _9;
compiler-optimizations.cpp:299:23: note: vect_is_simple_use: operand _9
compiler-optimizations.cpp:299:23: note: def_stmt: _9 = _5 * _7;
compiler-optimizations.cpp:299:23: note: type of def: internal
compiler-optimizations.cpp:299:23: note: mark relevant 5, live 0: _9 = _5 * _7;
compiler-optimizations.cpp:299:23: note: already marked relevant/live.
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:299:23: note: dependence distance  = 1.
compiler-optimizations.cpp:299:23: note: not vectorized, possible dependence between data-refs *_4 and *_8
compiler-optimizations.cpp:299:23: note: bad data dependence.
compiler-optimizations.cpp:298:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:298:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:299:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:299:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:299:23: note: got vectype for stmt: _52 = MEM[(int *)a_18(D) + -4B];
vector(4) int
compiler-optimizations.cpp:299:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:299:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:299:23: note: got vectype for stmt: _7 = *_6;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: *_8 = _9;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: _11 = *_10;
vector(4) int
compiler-optimizations.cpp:299:23: note: got vectype for stmt: *_12 = _13;
vector(4) int
compiler-optimizations.cpp:299:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:299:23: note: not consecutive access *_8 = _9;
compiler-optimizations.cpp:299:23: note: not consecutive access _7 = *_6;
compiler-optimizations.cpp:299:23: note: not consecutive access _11 = *_10;
compiler-optimizations.cpp:299:23: note: not consecutive access *_12 = _13;
compiler-optimizations.cpp:299:23: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:299:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:299:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:303:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:303:1: note: not vectorized: not enough data-refs in basic block.

Analyzing loop at compiler-optimizations.cpp:309
compiler-optimizations.cpp:309:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:309:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:309:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:309:23: note: bad loop form.
compiler-optimizations.cpp:306:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:306:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:309:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:309:23: note: got vectype for stmt: pretmp_81 = *v_23(D);
vector(4) int
compiler-optimizations.cpp:309:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:309:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:309:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:310:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:310:9: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:310:9: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:310:9: note: ===vect_slp_analyze_bb===
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: === vect_analyze_data_refs ===
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: got vectype for stmt: *_63 = _4;
vector(4) int
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: got vectype for stmt: *_3 = prephitmp_84;
vector(4) int
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: got vectype for stmt: pretmp_73 = MEM[(type &)_71];
vector(4) int
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: === vect_analyze_data_ref_accesses ===
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: not consecutive access *_3 = prephitmp_84;
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: not consecutive access pretmp_73 = MEM[(type &)_71];
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: not consecutive access *_63 = _4;
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: not vectorized: no grouped stores in basic block.
/usr/local/include/c++/8.5.0/bits/move.h:195:7: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:309:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:309:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:309:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:309:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:309:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:317:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:317:1: note: got vectype for stmt: _30 = MEM[(type &)_12];
vector(4) int
compiler-optimizations.cpp:317:1: note: got vectype for stmt: *prephitmp_77 = _30;
vector(4) int
compiler-optimizations.cpp:317:1: note: got vectype for stmt: *_12 = prephitmp_80;
vector(4) int
compiler-optimizations.cpp:317:1: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:317:1: note: not consecutive access _30 = MEM[(type &)_12];
compiler-optimizations.cpp:317:1: note: not consecutive access *_12 = prephitmp_80;
compiler-optimizations.cpp:317:1: note: not consecutive access *prephitmp_77 = _30;
compiler-optimizations.cpp:317:1: note: not vectorized: no grouped stores in basic block.

Analyzing loop at compiler-optimizations.cpp:327
compiler-optimizations.cpp:327:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:327:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:327:23: note: === get_loop_niters ===
compiler-optimizations.cpp:327:23: note: Symbolic number of iterations is (unsigned int) n_20(D) + 4294967295
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:327:23: note: got vectype for stmt: _10 = *_9;
vector(4) int
compiler-optimizations.cpp:327:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:327:23: note: Analyze phi: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: Access function of PHI: max_31
compiler-optimizations.cpp:327:23: note: Analyze phi: i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: Access function of PHI: {1, +, 1}_2
compiler-optimizations.cpp:327:23: note: step: 1,  init: 1
compiler-optimizations.cpp:327:23: note: Detected induction.
compiler-optimizations.cpp:327:23: note: Analyze phi: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: detected reduction: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: Detected reduction.
compiler-optimizations.cpp:327:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand _7
compiler-optimizations.cpp:327:23: note: def_stmt: _7 = (long unsigned int) i_32;
compiler-optimizations.cpp:327:23: note: type of def: internal
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand i_32
compiler-optimizations.cpp:327:23: note: def_stmt: i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: type of def: induction
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:327:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:327:23: note: init: phi relevant? max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: init: phi relevant? i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: init: stmt relevant? _7 = (long unsigned int) i_32;
compiler-optimizations.cpp:327:23: note: init: stmt relevant? _8 = _7 * 4;
compiler-optimizations.cpp:327:23: note: init: stmt relevant? _9 = a_18(D) + _8;
compiler-optimizations.cpp:327:23: note: init: stmt relevant? _10 = *_9;
compiler-optimizations.cpp:327:23: note: init: stmt relevant? max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: vec_stmt_relevant_p: used out of loop.
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:327:23: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:327:23: note: type of def: internal
compiler-optimizations.cpp:327:23: note: vec_stmt_relevant_p: stmt live but not relevant.
compiler-optimizations.cpp:327:23: note: mark relevant 1, live 1: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: init: stmt relevant? i_22 = i_32 + 1;
compiler-optimizations.cpp:327:23: note: init: stmt relevant? if (n_20(D) <= i_22)
compiler-optimizations.cpp:327:23: note: worklist: examine stmt: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:327:23: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:327:23: note: type of def: internal
compiler-optimizations.cpp:327:23: note: mark relevant 1, live 0: _10 = *_9;
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand max_31
compiler-optimizations.cpp:327:23: note: def_stmt: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: type of def: reduction
compiler-optimizations.cpp:327:23: note: mark relevant 1, live 0: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: worklist: examine stmt: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand min_19
compiler-optimizations.cpp:327:23: note: def_stmt: min_19 = *a_18(D);
compiler-optimizations.cpp:327:23: note: type of def: external
compiler-optimizations.cpp:327:23: note: def_stmt is out of loop.
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand max_5
compiler-optimizations.cpp:327:23: note: def_stmt: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: type of def: reduction
compiler-optimizations.cpp:327:23: note: reduc-stmt defining reduc-phi in the same nest.
compiler-optimizations.cpp:327:23: note: worklist: examine stmt: _10 = *_9;
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:327:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:327:23: note: ==> examining phi: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:327:23: note: vectype: vector(4) int
compiler-optimizations.cpp:327:23: note: nunits = 4
compiler-optimizations.cpp:327:23: note: ==> examining phi: i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: ==> examining statement: _7 = (long unsigned int) i_32;
compiler-optimizations.cpp:327:23: note: skip.
compiler-optimizations.cpp:327:23: note: ==> examining statement: _8 = _7 * 4;
compiler-optimizations.cpp:327:23: note: skip.
compiler-optimizations.cpp:327:23: note: ==> examining statement: _9 = a_18(D) + _8;
compiler-optimizations.cpp:327:23: note: skip.
compiler-optimizations.cpp:327:23: note: ==> examining statement: _10 = *_9;
compiler-optimizations.cpp:327:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:327:23: note: vectype: vector(4) int
compiler-optimizations.cpp:327:23: note: nunits = 4
compiler-optimizations.cpp:327:23: note: ==> examining statement: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:327:23: note: vectype: vector(4) int
compiler-optimizations.cpp:327:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:327:23: note: vectype: vector(4) int
compiler-optimizations.cpp:327:23: note: nunits = 4
compiler-optimizations.cpp:327:23: note: ==> examining statement: i_22 = i_32 + 1;
compiler-optimizations.cpp:327:23: note: skip.
compiler-optimizations.cpp:327:23: note: ==> examining statement: if (n_20(D) <= i_22)
compiler-optimizations.cpp:327:23: note: skip.
compiler-optimizations.cpp:327:23: note: vectorization factor = 4
compiler-optimizations.cpp:327:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:327:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:327:23: note: recording new base alignment for a_18(D)
compiler-optimizations.cpp:327:23: note:   alignment:    4
compiler-optimizations.cpp:327:23: note:   misalignment: 0
compiler-optimizations.cpp:327:23: note:   based on:     _10 = *_9;
compiler-optimizations.cpp:327:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:327:23: note: can't force alignment of ref: *_9
compiler-optimizations.cpp:327:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:327:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:327:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:327:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:327:23: note: Analyze phi: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:327:23: note: Analyze phi: i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:327:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:327:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:327:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:327:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:327:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:327:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:327:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:327:23: note: examining phi: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: examining phi: i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: ==> examining statement: _7 = (long unsigned int) i_32;
compiler-optimizations.cpp:327:23: note: irrelevant.
compiler-optimizations.cpp:327:23: note: ==> examining statement: _8 = _7 * 4;
compiler-optimizations.cpp:327:23: note: irrelevant.
compiler-optimizations.cpp:327:23: note: ==> examining statement: _9 = a_18(D) + _8;
compiler-optimizations.cpp:327:23: note: irrelevant.
compiler-optimizations.cpp:327:23: note: ==> examining statement: _10 = *_9;
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand *_9
compiler-optimizations.cpp:327:23: note: not ssa-name.
compiler-optimizations.cpp:327:23: note: use not simple.
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand *_9
compiler-optimizations.cpp:327:23: note: not ssa-name.
compiler-optimizations.cpp:327:23: note: use not simple.
compiler-optimizations.cpp:327:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:327:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:327:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:327:23: note: ==> examining statement: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:327:23: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:327:23: note: type of def: internal
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand max_31
compiler-optimizations.cpp:327:23: note: def_stmt: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: type of def: reduction
compiler-optimizations.cpp:327:23: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 4, epilogue_cost = 20 .
compiler-optimizations.cpp:327:23: note: ==> examining statement: i_22 = i_32 + 1;
compiler-optimizations.cpp:327:23: note: irrelevant.
compiler-optimizations.cpp:327:23: note: ==> examining statement: if (n_20(D) <= i_22)
compiler-optimizations.cpp:327:23: note: irrelevant.
compiler-optimizations.cpp:327:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:327:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:327:23: note: Cost model analysis: 
  Vector inside of loop cost: 16
  Vector prologue cost: 36
  Vector epilogue cost: 52
  Scalar iteration cost: 16
  Scalar outside cost: 32
  Vector outside cost: 88
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5
compiler-optimizations.cpp:327:23: note:   Runtime profitability threshold = 5
compiler-optimizations.cpp:327:23: note:   Static estimate profitability threshold = 9
compiler-optimizations.cpp:327:23: note: epilog loop required
compiler-optimizations.cpp:327:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:327:23: note: Analyze phi: max_31 = PHI <min_19(6), max_5(8)>
compiler-optimizations.cpp:327:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:327:23: note: Analyze phi: i_32 = PHI <1(6), i_22(8)>
compiler-optimizations.cpp:327:23: note: loop vectorized
compiler-optimizations.cpp:327:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:327:23: note: Profitability threshold is 5 loop iterations.
compiler-optimizations.cpp:327:23: note: vect_update_ivs_after_vectorizer: phi: max_31 = PHI <max_5(8), min_19(12)>
compiler-optimizations.cpp:327:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:327:23: note: vect_update_ivs_after_vectorizer: phi: i_32 = PHI <i_22(8), 1(12)>
compiler-optimizations.cpp:327:23: note: ------>vectorizing phi: max_31 = PHI <max_5(8), min_19(19)>
compiler-optimizations.cpp:327:23: note: transform phi.
compiler-optimizations.cpp:327:23: note: ------>vectorizing phi: i_32 = PHI <i_22(8), 1(19)>
compiler-optimizations.cpp:327:23: note: ------>vectorizing phi: vect_max_5.517_49 = PHI <(8), (19)>
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: _7 = (long unsigned int) i_32;
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: _8 = _7 * 4;
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: _9 = a_18(D) + _8;
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: _10 = *_9;
compiler-optimizations.cpp:327:23: note: transform statement.
compiler-optimizations.cpp:327:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:327:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_18(D)
compiler-optimizations.cpp:327:23: note: created vectp_a.519_50
compiler-optimizations.cpp:327:23: note: add new stmt: vect__10.520_53 = MEM[(int *)vectp_a.518_51];
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: max_5 = MAX_EXPR <_10, max_31>;
compiler-optimizations.cpp:327:23: note: transform statement.
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:327:23: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:327:23: note: type of def: internal
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand max_31
compiler-optimizations.cpp:327:23: note: def_stmt: max_31 = PHI <max_5(8), min_19(19)>
compiler-optimizations.cpp:327:23: note: type of def: reduction
compiler-optimizations.cpp:327:23: note: reduc op not supported by target.
compiler-optimizations.cpp:327:23: note: transform reduction.
compiler-optimizations.cpp:327:23: note: vect_get_vec_def_for_operand: _10
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand _10
compiler-optimizations.cpp:327:23: note: def_stmt: _10 = *_9;
compiler-optimizations.cpp:327:23: note: type of def: internal
compiler-optimizations.cpp:327:23: note:   def_stmt =  _10 = *_9;
compiler-optimizations.cpp:327:23: note: vect_get_vec_def_for_operand: max_31
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand max_31
compiler-optimizations.cpp:327:23: note: def_stmt: max_31 = PHI <max_5(8), min_19(19)>
compiler-optimizations.cpp:327:23: note: type of def: reduction
compiler-optimizations.cpp:327:23: note:   def_stmt =  max_31 = PHI <max_5(8), min_19(19)>
compiler-optimizations.cpp:327:23: note: add new stmt: vect_max_5.521_54 = MAX_EXPR <vect__10.520_53, vect_max_5.517_49>;
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand min_19
compiler-optimizations.cpp:327:23: note: def_stmt: min_19 = *a_18(D);
compiler-optimizations.cpp:327:23: note: type of def: external
compiler-optimizations.cpp:327:23: note: vect_get_vec_def_for_operand: min_19
compiler-optimizations.cpp:327:23: note: vect_is_simple_use: operand min_19
compiler-optimizations.cpp:327:23: note: def_stmt: min_19 = *a_18(D);
compiler-optimizations.cpp:327:23: note: type of def: external
compiler-optimizations.cpp:327:23: note:   def_stmt =  min_19 = *a_18(D);
compiler-optimizations.cpp:327:23: note: created new init_stmt: vect_cst__55 = {min_19, min_19, min_19, min_19};
compiler-optimizations.cpp:327:23: note: transform reduction: created def-use cycle: vect_max_5.517_49 = PHI <vect_max_5.521_54(8), vect_cst__55(19)>
vect_max_5.521_54 = MAX_EXPR <vect__10.520_53, vect_max_5.517_49>;
compiler-optimizations.cpp:327:23: note: Reduce using vector shifts
compiler-optimizations.cpp:327:23: note: extract scalar result
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: i_22 = i_32 + 1;
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: vectp_a.518_52 = vectp_a.518_51 + 16;
compiler-optimizations.cpp:327:23: note: ------>vectorizing statement: if (n_20(D) <= i_22)
compiler-optimizations.cpp:327:23: note: New loop exit condition: if (ivtmp_63 >= bnd.514_44)
compiler-optimizations.cpp:327:23: note: LOOP VECTORIZED


Analyzing loop at compiler-optimizations.cpp:322
compiler-optimizations.cpp:322:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:322:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:322:23: note: === get_loop_niters ===
compiler-optimizations.cpp:322:23: note: Symbolic number of iterations is (unsigned int) n_20(D) + 4294967295
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: got vectype for stmt: _4 = *_3;
vector(4) int
compiler-optimizations.cpp:322:23: note: === vect_analyze_scalar_cycles ===
compiler-optimizations.cpp:322:23: note: Analyze phi: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: Access function of PHI: min_35
compiler-optimizations.cpp:322:23: note: Analyze phi: i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: Access function of PHI: {1, +, 1}_1
compiler-optimizations.cpp:322:23: note: step: 1,  init: 1
compiler-optimizations.cpp:322:23: note: Detected induction.
compiler-optimizations.cpp:322:23: note: Analyze phi: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: detected reduction: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: Detected reduction.
compiler-optimizations.cpp:322:23: note: === vect_pattern_recog ===
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand _1
compiler-optimizations.cpp:322:23: note: def_stmt: _1 = (long unsigned int) i_36;
compiler-optimizations.cpp:322:23: note: type of def: internal
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand i_36
compiler-optimizations.cpp:322:23: note: def_stmt: i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: type of def: induction
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand 4
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:322:23: note: === vect_mark_stmts_to_be_vectorized ===
compiler-optimizations.cpp:322:23: note: init: phi relevant? min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: init: phi relevant? i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: init: stmt relevant? _1 = (long unsigned int) i_36;
compiler-optimizations.cpp:322:23: note: init: stmt relevant? _2 = _1 * 4;
compiler-optimizations.cpp:322:23: note: init: stmt relevant? _3 = a_18(D) + _2;
compiler-optimizations.cpp:322:23: note: init: stmt relevant? _4 = *_3;
compiler-optimizations.cpp:322:23: note: init: stmt relevant? min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: vec_stmt_relevant_p: used out of loop.
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:322:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:322:23: note: type of def: internal
compiler-optimizations.cpp:322:23: note: vec_stmt_relevant_p: stmt live but not relevant.
compiler-optimizations.cpp:322:23: note: mark relevant 1, live 1: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: init: stmt relevant? i_21 = i_36 + 1;
compiler-optimizations.cpp:322:23: note: init: stmt relevant? if (n_20(D) <= i_21)
compiler-optimizations.cpp:322:23: note: worklist: examine stmt: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:322:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:322:23: note: type of def: internal
compiler-optimizations.cpp:322:23: note: mark relevant 1, live 0: _4 = *_3;
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_35
compiler-optimizations.cpp:322:23: note: def_stmt: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: type of def: reduction
compiler-optimizations.cpp:322:23: note: mark relevant 1, live 0: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: worklist: examine stmt: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_19
compiler-optimizations.cpp:322:23: note: def_stmt: min_19 = *a_18(D);
compiler-optimizations.cpp:322:23: note: type of def: external
compiler-optimizations.cpp:322:23: note: def_stmt is out of loop.
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_6
compiler-optimizations.cpp:322:23: note: def_stmt: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: type of def: reduction
compiler-optimizations.cpp:322:23: note: reduc-stmt defining reduc-phi in the same nest.
compiler-optimizations.cpp:322:23: note: worklist: examine stmt: _4 = *_3;
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_ref_dependences ===
compiler-optimizations.cpp:322:23: note: === vect_determine_vectorization_factor ===
compiler-optimizations.cpp:322:23: note: ==> examining phi: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:322:23: note: vectype: vector(4) int
compiler-optimizations.cpp:322:23: note: nunits = 4
compiler-optimizations.cpp:322:23: note: ==> examining phi: i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: ==> examining statement: _1 = (long unsigned int) i_36;
compiler-optimizations.cpp:322:23: note: skip.
compiler-optimizations.cpp:322:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:322:23: note: skip.
compiler-optimizations.cpp:322:23: note: ==> examining statement: _3 = a_18(D) + _2;
compiler-optimizations.cpp:322:23: note: skip.
compiler-optimizations.cpp:322:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:322:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:322:23: note: vectype: vector(4) int
compiler-optimizations.cpp:322:23: note: nunits = 4
compiler-optimizations.cpp:322:23: note: ==> examining statement: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:322:23: note: vectype: vector(4) int
compiler-optimizations.cpp:322:23: note: get vectype for scalar type:  int
compiler-optimizations.cpp:322:23: note: vectype: vector(4) int
compiler-optimizations.cpp:322:23: note: nunits = 4
compiler-optimizations.cpp:322:23: note: ==> examining statement: i_21 = i_36 + 1;
compiler-optimizations.cpp:322:23: note: skip.
compiler-optimizations.cpp:322:23: note: ==> examining statement: if (n_20(D) <= i_21)
compiler-optimizations.cpp:322:23: note: skip.
compiler-optimizations.cpp:322:23: note: vectorization factor = 4
compiler-optimizations.cpp:322:23: note: === vect_analyze_slp ===
compiler-optimizations.cpp:322:23: note: === vect_make_slp_decision ===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs_alignment ===
compiler-optimizations.cpp:322:23: note: recording new base alignment for a_18(D)
compiler-optimizations.cpp:322:23: note:   alignment:    4
compiler-optimizations.cpp:322:23: note:   misalignment: 0
compiler-optimizations.cpp:322:23: note:   based on:     _4 = *_3;
compiler-optimizations.cpp:322:23: note: vect_compute_data_ref_alignment:
compiler-optimizations.cpp:322:23: note: can't force alignment of ref: *_3
compiler-optimizations.cpp:322:23: note: === vect_prune_runtime_alias_test_list ===
compiler-optimizations.cpp:322:23: note: === vect_enhance_data_refs_alignment ===
compiler-optimizations.cpp:322:23: note: Unknown misalignment, naturally aligned
compiler-optimizations.cpp:322:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:322:23: note: Analyze phi: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:322:23: note: Analyze phi: i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: vect_model_load_cost: aligned.
compiler-optimizations.cpp:322:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:322:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:322:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:322:23: note: vect_get_data_access_cost: inside_cost = 12, outside_cost = 0.
compiler-optimizations.cpp:322:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:322:23: note: Vectorizing an unaligned access.
compiler-optimizations.cpp:322:23: note: === vect_analyze_loop_operations ===
compiler-optimizations.cpp:322:23: note: examining phi: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: examining phi: i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: ==> examining statement: _1 = (long unsigned int) i_36;
compiler-optimizations.cpp:322:23: note: irrelevant.
compiler-optimizations.cpp:322:23: note: ==> examining statement: _2 = _1 * 4;
compiler-optimizations.cpp:322:23: note: irrelevant.
compiler-optimizations.cpp:322:23: note: ==> examining statement: _3 = a_18(D) + _2;
compiler-optimizations.cpp:322:23: note: irrelevant.
compiler-optimizations.cpp:322:23: note: ==> examining statement: _4 = *_3;
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:322:23: note: not ssa-name.
compiler-optimizations.cpp:322:23: note: use not simple.
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand *_3
compiler-optimizations.cpp:322:23: note: not ssa-name.
compiler-optimizations.cpp:322:23: note: use not simple.
compiler-optimizations.cpp:322:23: note: can't use a fully-masked loop because the target doesn't have the appropriate masked load or store.
compiler-optimizations.cpp:322:23: note: vect_model_load_cost: unaligned supported by hardware.
compiler-optimizations.cpp:322:23: note: vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
compiler-optimizations.cpp:322:23: note: ==> examining statement: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:322:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:322:23: note: type of def: internal
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_35
compiler-optimizations.cpp:322:23: note: def_stmt: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: type of def: reduction
compiler-optimizations.cpp:322:23: note: reduc op not supported by target.
vect_model_reduction_cost: inside_cost = 4, prologue_cost = 4, epilogue_cost = 20 .
compiler-optimizations.cpp:322:23: note: ==> examining statement: i_21 = i_36 + 1;
compiler-optimizations.cpp:322:23: note: irrelevant.
compiler-optimizations.cpp:322:23: note: ==> examining statement: if (n_20(D) <= i_21)
compiler-optimizations.cpp:322:23: note: irrelevant.
compiler-optimizations.cpp:322:23: note: not using a fully-masked loop.
compiler-optimizations.cpp:322:23: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
compiler-optimizations.cpp:322:23: note: Cost model analysis: 
  Vector inside of loop cost: 16
  Vector prologue cost: 36
  Vector epilogue cost: 52
  Scalar iteration cost: 16
  Scalar outside cost: 32
  Vector outside cost: 88
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 5
compiler-optimizations.cpp:322:23: note:   Runtime profitability threshold = 5
compiler-optimizations.cpp:322:23: note:   Static estimate profitability threshold = 9
compiler-optimizations.cpp:322:23: note: epilog loop required
compiler-optimizations.cpp:322:23: note: vect_can_advance_ivs_p:
compiler-optimizations.cpp:322:23: note: Analyze phi: min_35 = PHI <min_19(7), min_6(9)>
compiler-optimizations.cpp:322:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:322:23: note: Analyze phi: i_36 = PHI <1(7), i_21(9)>
compiler-optimizations.cpp:322:23: note: loop vectorized
compiler-optimizations.cpp:322:23: note: === vec_transform_loop ===
compiler-optimizations.cpp:322:23: note: Profitability threshold is 5 loop iterations.
compiler-optimizations.cpp:322:23: note: vect_update_ivs_after_vectorizer: phi: min_35 = PHI <min_6(9), min_19(20)>
compiler-optimizations.cpp:322:23: note: reduc or virtual phi. skip.
compiler-optimizations.cpp:322:23: note: vect_update_ivs_after_vectorizer: phi: i_36 = PHI <i_21(9), 1(20)>
compiler-optimizations.cpp:322:23: note: ------>vectorizing phi: min_35 = PHI <min_6(9), min_19(27)>
compiler-optimizations.cpp:322:23: note: transform phi.
compiler-optimizations.cpp:322:23: note: ------>vectorizing phi: i_36 = PHI <i_21(9), 1(27)>
compiler-optimizations.cpp:322:23: note: ------>vectorizing phi: vect_min_6.528_84 = PHI <(9), (27)>
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: _1 = (long unsigned int) i_36;
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: _2 = _1 * 4;
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: _3 = a_18(D) + _2;
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: _4 = *_3;
compiler-optimizations.cpp:322:23: note: transform statement.
compiler-optimizations.cpp:322:23: note: transform load. ncopies = 1
compiler-optimizations.cpp:322:23: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_18(D)
compiler-optimizations.cpp:322:23: note: created vectp_a.530_85
compiler-optimizations.cpp:322:23: note: add new stmt: vect__4.531_88 = MEM[(int *)vectp_a.529_86];
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: min_6 = MIN_EXPR <_4, min_35>;
compiler-optimizations.cpp:322:23: note: transform statement.
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:322:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:322:23: note: type of def: internal
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_35
compiler-optimizations.cpp:322:23: note: def_stmt: min_35 = PHI <min_6(9), min_19(27)>
compiler-optimizations.cpp:322:23: note: type of def: reduction
compiler-optimizations.cpp:322:23: note: reduc op not supported by target.
compiler-optimizations.cpp:322:23: note: transform reduction.
compiler-optimizations.cpp:322:23: note: vect_get_vec_def_for_operand: _4
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand _4
compiler-optimizations.cpp:322:23: note: def_stmt: _4 = *_3;
compiler-optimizations.cpp:322:23: note: type of def: internal
compiler-optimizations.cpp:322:23: note:   def_stmt =  _4 = *_3;
compiler-optimizations.cpp:322:23: note: vect_get_vec_def_for_operand: min_35
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_35
compiler-optimizations.cpp:322:23: note: def_stmt: min_35 = PHI <min_6(9), min_19(27)>
compiler-optimizations.cpp:322:23: note: type of def: reduction
compiler-optimizations.cpp:322:23: note:   def_stmt =  min_35 = PHI <min_6(9), min_19(27)>
compiler-optimizations.cpp:322:23: note: add new stmt: vect_min_6.532_89 = MIN_EXPR <vect__4.531_88, vect_min_6.528_84>;
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_19
compiler-optimizations.cpp:322:23: note: def_stmt: min_19 = *a_18(D);
compiler-optimizations.cpp:322:23: note: type of def: external
compiler-optimizations.cpp:322:23: note: vect_get_vec_def_for_operand: min_19
compiler-optimizations.cpp:322:23: note: vect_is_simple_use: operand min_19
compiler-optimizations.cpp:322:23: note: def_stmt: min_19 = *a_18(D);
compiler-optimizations.cpp:322:23: note: type of def: external
compiler-optimizations.cpp:322:23: note:   def_stmt =  min_19 = *a_18(D);
compiler-optimizations.cpp:322:23: note: created new init_stmt: vect_cst__90 = {min_19, min_19, min_19, min_19};
compiler-optimizations.cpp:322:23: note: transform reduction: created def-use cycle: vect_min_6.528_84 = PHI <vect_min_6.532_89(9), vect_cst__90(27)>
vect_min_6.532_89 = MIN_EXPR <vect__4.531_88, vect_min_6.528_84>;
compiler-optimizations.cpp:322:23: note: Reduce using vector shifts
compiler-optimizations.cpp:322:23: note: extract scalar result
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: i_21 = i_36 + 1;
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: vectp_a.529_87 = vectp_a.529_86 + 16;
compiler-optimizations.cpp:322:23: note: ------>vectorizing statement: if (n_20(D) <= i_21)
compiler-optimizations.cpp:322:23: note: New loop exit condition: if (ivtmp_98 >= bnd.525_79)
compiler-optimizations.cpp:322:23: note: LOOP VECTORIZED

compiler-optimizations.cpp:319:6: note: vectorized 2 loops in function.
compiler-optimizations.cpp:327:23: note: loop with 3 iterations completely unrolled (header execution count 57432044)
compiler-optimizations.cpp:322:23: note: loop with 3 iterations completely unrolled (header execution count 57432045)
compiler-optimizations.cpp:319:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: got vectype for stmt: min_19 = *a_18(D);
vector(4) int
compiler-optimizations.cpp:322:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:323:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:323:16: note: not vectorized: no vectype for stmt: vect__4.531_88 = MEM[(int *)vectp_a.529_86];
 scalar_type: vector(4) int
compiler-optimizations.cpp:323:16: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:323:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:323:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:323:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:323:16: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:323:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: got vectype for stmt: _108 = *_107;
vector(4) int
compiler-optimizations.cpp:322:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: got vectype for stmt: _116 = *_115;
vector(4) int
compiler-optimizations.cpp:322:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:23: note: got vectype for stmt: _124 = *_123;
vector(4) int
compiler-optimizations.cpp:322:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:5: note: got vectype for stmt: _71 = *_70;
vector(4) int
compiler-optimizations.cpp:322:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:322:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:322:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:322:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:328:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:328:16: note: not vectorized: no vectype for stmt: vect__10.520_53 = MEM[(int *)vectp_a.518_51];
 scalar_type: vector(4) int
compiler-optimizations.cpp:328:16: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:328:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:328:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:328:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:328:16: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:328:16: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:328:16: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:327:23: note: got vectype for stmt: _35 = *_36;
vector(4) int
compiler-optimizations.cpp:327:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:327:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:327:23: note: got vectype for stmt: _8 = *_7;
vector(4) int
compiler-optimizations.cpp:327:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:327:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:327:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:327:23: note: got vectype for stmt: _100 = *_99;
vector(4) int
compiler-optimizations.cpp:327:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:327:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:327:5: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:327:5: note: got vectype for stmt: _29 = *_30;
vector(4) int
compiler-optimizations.cpp:327:5: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:327:5: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:333:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:333:1: note: got vectype for stmt: *out_max_23(D) = max_27;
vector(4) int
compiler-optimizations.cpp:333:1: note: got vectype for stmt: *out_min_25(D) = min_16;
vector(4) int
compiler-optimizations.cpp:333:1: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:333:1: note: not consecutive access *out_max_23(D) = max_27;
compiler-optimizations.cpp:333:1: note: not consecutive access *out_min_25(D) = min_16;
compiler-optimizations.cpp:333:1: note: not vectorized: no grouped stores in basic block.
consider run-time aliasing test between *_3 and *_5
consider run-time aliasing test between *_5 and *_3
consider run-time aliasing test between *_5 and *_3

Analyzing loop at compiler-optimizations.cpp:336
compiler-optimizations.cpp:336:23: note: ===== analyze_loop_nest =====
compiler-optimizations.cpp:336:23: note: === vect_analyze_loop_form ===
compiler-optimizations.cpp:336:23: note: not vectorized: control flow in loop.
compiler-optimizations.cpp:336:23: note: bad loop form.
compiler-optimizations.cpp:335:6: note: vectorized 0 loops in function.
compiler-optimizations.cpp:335:6: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:336:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:336:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:336:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:336:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:338:9: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:338:9: note: got vectype for stmt: _4 = *_3;
vector(2) double
compiler-optimizations.cpp:338:9: note: got vectype for stmt: *_5 = _6;
vector(2) double
compiler-optimizations.cpp:338:9: note: got vectype for stmt: _7 = *_3;
vector(2) double
compiler-optimizations.cpp:338:9: note: === vect_analyze_data_ref_accesses ===
compiler-optimizations.cpp:338:9: note: not consecutive access _4 = *_3;
compiler-optimizations.cpp:338:9: note: not consecutive access _7 = *_3;
compiler-optimizations.cpp:338:9: note: not consecutive access *_5 = _6;
compiler-optimizations.cpp:338:9: note: not vectorized: no grouped stores in basic block.
compiler-optimizations.cpp:338:9: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:339:18: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:339:18: note: got vectype for stmt: *_3 = _8;
vector(2) double
compiler-optimizations.cpp:339:18: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:339:18: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:336:23: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:336:23: note: not vectorized: not enough data-refs in basic block.
compiler-optimizations.cpp:336:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:336:23: note: ===vect_slp_analyze_bb===
compiler-optimizations.cpp:342:1: note: === vect_analyze_data_refs ===
compiler-optimizations.cpp:342:1: note: not vectorized: not enough data-refs in basic block.
