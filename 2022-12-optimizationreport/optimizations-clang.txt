compiler-optimizations.cpp:6:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        b[i] = b[i] + i;
               ^
compiler-optimizations.cpp:7:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        c[i] = c[i] + i;
               ^
compiler-optimizations.cpp:8:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        x[i] = x[i] + i;
               ^
compiler-optimizations.cpp:9:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        y[i] = y[i] + i;
               ^
compiler-optimizations.cpp:10:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = z[i] + i;
               ^
compiler-optimizations.cpp:6:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        b[i] = b[i] + i;
               ^
compiler-optimizations.cpp:7:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        c[i] = c[i] + i;
               ^
compiler-optimizations.cpp:8:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        x[i] = x[i] + i;
               ^
compiler-optimizations.cpp:9:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        y[i] = y[i] + i;
               ^
compiler-optimizations.cpp:10:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = z[i] + i;
               ^
compiler-optimizations.cpp:17:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        b[i] = b[i] + i;
               ^
compiler-optimizations.cpp:18:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        c[i] = c[i] + i;
               ^
compiler-optimizations.cpp:19:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        x[i] = x[i] + i;
               ^
compiler-optimizations.cpp:20:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        y[i] = y[i] + i;
               ^
compiler-optimizations.cpp:21:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
               ^
compiler-optimizations.cpp:21:23: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                      ^
compiler-optimizations.cpp:21:30: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                             ^
compiler-optimizations.cpp:21:37: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                                    ^
compiler-optimizations.cpp:21:51: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                                                  ^
compiler-optimizations.cpp:17:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        b[i] = b[i] + i;
               ^
compiler-optimizations.cpp:18:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        c[i] = c[i] + i;
               ^
compiler-optimizations.cpp:19:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        x[i] = x[i] + i;
               ^
compiler-optimizations.cpp:20:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        y[i] = y[i] + i;
               ^
compiler-optimizations.cpp:21:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
               ^
compiler-optimizations.cpp:21:23: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                      ^
compiler-optimizations.cpp:21:30: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                             ^
compiler-optimizations.cpp:21:37: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                                    ^
compiler-optimizations.cpp:21:51: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        z[i] = a[i] + b[i] + c[i] + x[i] + y[i] + z[i];
                                                  ^
compiler-optimizations.cpp:63:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
    if (b) (*b)++;
               ^
compiler-optimizations.cpp:69:9: remark: '_Z3addPiS_' inlined into '_Z26test_dead_code_eliminationPii' with (cost=-25, threshold=375) at callsite test_dead_code_elimination:2:9; [-Rpass=inline]
        add(&a[i], nullptr);
        ^
compiler-optimizations.cpp:82:32: remark: hoisting mul [-Rpass=licm]
            case SUB: a[i]-= x * x; break;
                               ^
compiler-optimizations.cpp:81:32: remark: hoisting mul [-Rpass=licm]
            case ADD: a[i]+= x * x; break;
                               ^
compiler-optimizations.cpp:79:5: remark: Loop deleted because it is invariant [-Rpass=loop-delete]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:93:17: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
            if (debug) {
                ^
compiler-optimizations.cpp:93:17: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:91:5: remark: advising against unrolling the loop because it contains a call [-Rpass=TTI]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:93:17: remark: load of type i8 not eliminated [-Rpass-missed=gvn]
            if (debug) {
                ^
compiler-optimizations.cpp:93:17: remark: load of type i8 not eliminated [-Rpass-missed=gvn]
compiler-optimizations.cpp:93:17: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:106:5: remark: advising against unrolling the loop because it contains a call [-Rpass=TTI]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:121:37: remark: hoisting mul [-Rpass=licm]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                                    ^
compiler-optimizations.cpp:121:25: remark: hoisting add [-Rpass=licm]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                        ^
compiler-optimizations.cpp:121:17: remark: hoisting sext [-Rpass=licm]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                ^
compiler-optimizations.cpp:121:17: remark: hoisting getelementptr [-Rpass=licm]
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                             ^
compiler-optimizations.cpp:120:31: remark: hoisting icmp [-Rpass=licm]
            for (int k = 0; k < n; k++) {
                              ^
compiler-optimizations.cpp:117:6: remark: hoisting mul [-Rpass=licm]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                             ^
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:119:27: remark: hoisting icmp [-Rpass=licm]
        for (int j = 0; j < n; j++) {
                          ^
compiler-optimizations.cpp:117:6: remark: hoisting icmp [-Rpass=licm]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                             ^
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:121:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:121:30: remark: load eliminated by PRE [-Rpass=gvn]
compiler-optimizations.cpp:130:28: remark: hoisting mul [-Rpass=licm]
            auto tmp = c[i * n + j];
                           ^
compiler-optimizations.cpp:131:31: remark: hoisting icmp [-Rpass=licm]
            for (int k = 0; k < n; k++) {
                              ^
compiler-optimizations.cpp:129:27: remark: hoisting icmp [-Rpass=licm]
        for (int j = 0; j < n; j++) {
                          ^
compiler-optimizations.cpp:127:6: remark: hoisting icmp [-Rpass=licm]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:151:19: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
            a[i+1]++;
                  ^
compiler-optimizations.cpp:184:22: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
        if (val[i] > *pivot) {
                     ^
compiler-optimizations.cpp:184:22: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:184:22: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
compiler-optimizations.cpp:184:22: remark: load eliminated by PRE [-Rpass=gvn]
compiler-optimizations.cpp:184:22: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
compiler-optimizations.cpp:184:22: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
compiler-optimizations.cpp:184:22: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:195:22: remark: failed to hoist load with loop-invariant address because load is conditionally executed [-Rpass-missed=licm]
        if (val[i] > pivot) {
                     ^
compiler-optimizations.cpp:195:22: remark: hoisting load [-Rpass=licm]
compiler-optimizations.cpp:192:6: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
void test_licm2(int * val, int n, int pivot) {
     ^
compiler-optimizations.cpp:195:13: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        if (val[i] > pivot) {
            ^
compiler-optimizations.cpp:207:30: remark: hoisting getelementptr [-Rpass=licm]
    for (int i = 0; i < str->n; i++) {
                             ^
compiler-optimizations.cpp:207:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:208:14: remark: hoisting getelementptr [-Rpass=licm]
        str->p[i] = '\0';
             ^
compiler-optimizations.cpp:208:14: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:207:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
    for (int i = 0; i < str->n; i++) {
                             ^
compiler-optimizations.cpp:208:14: remark: load of type i8* not eliminated [-Rpass-missed=gvn]
        str->p[i] = '\0';
             ^
compiler-optimizations.cpp:207:30: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
    for (int i = 0; i < str->n; i++) {
                             ^
compiler-optimizations.cpp:208:14: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
        str->p[i] = '\0';
             ^
compiler-optimizations.cpp:207:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
    for (int i = 0; i < str->n; i++) {
                             ^
compiler-optimizations.cpp:216:14: remark: Transformed loop-strided store in _Z26test_pointeraliasing_fixedP6string function into a call to llvm.memset.p0i8.i64() intrinsic [-Rpass=loop-idiom]
        p[i] = '\0';
             ^
compiler-optimizations.cpp:215:5: remark: Loop deleted because it is invariant [-Rpass=loop-delete]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:239:26: remark: hoisting sdiv [-Rpass=licm]
    for (int i = 0; i < n/2; i++) {
                         ^
compiler-optimizations.cpp:241:22: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        a[2 * i+1] = b[i];
                     ^
compiler-optimizations.cpp:271:16: remark: '_Z6square7complex' inlined into '_Z21test_interleaved_dataP7complexi' with (cost=-5, threshold=375) at callsite test_interleaved_data:2:16; [-Rpass=inline]
        a[i] = square(a[i]);
               ^
compiler-optimizations.cpp:277:27: remark: hoisting icmp [-Rpass=licm]
        for (int j = 0; j < n; j++) {
                          ^
compiler-optimizations.cpp:276:5: remark: Loop deleted because it never executes [-Rpass=loop-delete]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:286:32: remark: hoisting mul [-Rpass=licm]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                               ^
compiler-optimizations.cpp:286:48: remark: hoisting add [-Rpass=licm]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                                               ^
compiler-optimizations.cpp:286:52: remark: hoisting mul [-Rpass=licm]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                                                   ^
compiler-optimizations.cpp:285:27: remark: hoisting icmp [-Rpass=licm]
        for (int i = 1; i < n; i++) {
                          ^
compiler-optimizations.cpp:284:5: remark: Loop deleted because it is invariant [-Rpass=loop-delete]
    for (int j = 0; j < n; j++) {
    ^
compiler-optimizations.cpp:293:16: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        a[i] = a[i - 1] * b[i];
               ^
compiler-optimizations.cpp:294:23: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
        c[i] = a[i] + e[i];
                      ^
compiler-optimizations.cpp:300:16: remark: load eliminated by PRE [-Rpass=gvn]
        a[i] = a[i - 1] * b[i];
               ^
In file included from compiler-optimizations.cpp:1:
In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/utility:70:
In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_pair.h:59:
/usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:204:19: remark: '_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_' inlined into '_ZSt4swapIiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS3_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SC_' with (cost=-35, threshold=375) at callsite swap<int>:8:19; [-Rpass=inline]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:205:13: remark: '_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_' inlined into '_ZSt4swapIiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS3_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SC_' with (cost=-35, threshold=375) at callsite swap<int>:9:13; [-Rpass=inline]
      __a = _GLIBCXX_MOVE(__b);
            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:206:13: remark: '_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_' inlined into '_ZSt4swapIiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS3_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SC_' with (cost=-35, threshold=375) at callsite swap<int>:10:13; [-Rpass=inline]
      __b = _GLIBCXX_MOVE(__tmp);
            ^
compiler-optimizations.cpp:316:5: remark: '_ZSt4swapIiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS3_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SC_' inlined into '_Z17test_partitioningPiii' with (cost=-20, threshold=487) at callsite test_partitioning:10:5; [-Rpass=inline]
    std::swap(v[i], v[n-1]);
    ^
compiler-optimizations.cpp:312:13: remark: '_ZSt4swapIiENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS3_ESt18is_move_assignableIS3_EEE5valueEvE4typeERS3_SC_' inlined into '_Z17test_partitioningPiii' with (cost=-20, threshold=487) at callsite test_partitioning:6:13; [-Rpass=inline]
            std::swap(v[i], v[j]);
            ^
In file included from compiler-optimizations.cpp:1:
In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/utility:70:
In file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_pair.h:59:
/usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:205:13: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
      __a = _GLIBCXX_MOVE(__b);
            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h:205:13: remark: load of type i32 not eliminated [-Rpass-missed=gvn]
compiler-optimizations.cpp:338:13: remark: load of type double not eliminated [-Rpass-missed=gvn]
        if (a[i] > 0) {
            ^
compiler-optimizations.cpp:4:5: remark: loop not vectorized: cannot prove it is safe to reorder memory operations; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop. If the arrays will always be independent specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments. Erroneous results will occur if these options are incorrectly applied! [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i< n; i++) {
    ^
compiler-optimizations.cpp:4:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:4:5: remark: the cost-model indicates that vectorization is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:4:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:15:5: remark: loop not vectorized: cannot prove it is safe to reorder memory operations; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop. If the arrays will always be independent specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments. Erroneous results will occur if these options are incorrectly applied! [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i< n; i++) {
    ^
compiler-optimizations.cpp:15:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:15:5: remark: the cost-model indicates that vectorization is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:15:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:26:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i< n; i++) {
    ^
compiler-optimizations.cpp:26:5: remark: vectorized loop (vectorization width: 4, interleaved count: 1) [-Rpass=loop-vectorize]
compiler-optimizations.cpp:68:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:68:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:79:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:79:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
compiler-optimizations.cpp:79:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:79:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:95:13: remark: loop not vectorized: control flow cannot be substituted for a select [-Rpass-analysis=loop-vectorize]
            }
            ^
compiler-optimizations.cpp:94:17: remark: loop not vectorized: call instruction cannot be vectorized [-Rpass-analysis=loop-vectorize]
                log_error("error");
                ^
compiler-optimizations.cpp:91:5: remark: loop not vectorized: instruction cannot be vectorized [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:91:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:91:5: remark: advising against unrolling the loop because it contains a call [-Rpass=TTI]
compiler-optimizations.cpp:93:17: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
            if (debug) {
                ^
compiler-optimizations.cpp:112:9: remark: loop not vectorized: control flow cannot be substituted for a select [-Rpass-analysis=loop-vectorize]
        }
        ^
compiler-optimizations.cpp:109:17: remark: loop not vectorized: call instruction cannot be vectorized [-Rpass-analysis=loop-vectorize]
                log_error("error");
                ^
compiler-optimizations.cpp:106:5: remark: loop not vectorized: instruction cannot be vectorized [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:106:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:106:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
compiler-optimizations.cpp:106:23: remark: Cannot SLP vectorize list: vectorization was impossible with available vectorization factors [-Rpass-missed=slp-vectorizer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:106:5: remark: advising against unrolling the loop because it contains a call [-Rpass=TTI]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:106:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:121:30: remark: loop not vectorized: value that could not be identified as reduction is used outside the loop [-Rpass-analysis=loop-vectorize]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                             ^
compiler-optimizations.cpp:120:13: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
            for (int k = 0; k < n; k++) {
            ^
compiler-optimizations.cpp:120:13: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:120:13: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:120:13: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:120:13: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:120:13: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:117:6: remark: hoisting and [-Rpass=licm]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:117:6: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:117:6: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:117:6: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:132:21: remark: loop not vectorized: cannot prove it is safe to reorder floating-point operations; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'. [-Rpass-analysis=loop-vectorize]
                tmp += a[i * n + k] * b[k * n + j];
                    ^
compiler-optimizations.cpp:131:13: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
            for (int k = 0; k < n; k++) {
            ^
compiler-optimizations.cpp:131:13: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:131:13: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:131:13: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:131:13: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:131:13: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:127:6: remark: hoisting and [-Rpass=licm]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:127:6: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:127:6: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:127:6: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:140:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:141:24: remark: Cannot SLP vectorize list: type <4 x i1> is unsupported by vectorizer [-Rpass-missed=slp-vectorizer]
        if ((a[i] + 1) > 0) {
                       ^
compiler-optimizations.cpp:140:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:140:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:140:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:148:5: remark: the cost-model indicates that vectorization is not beneficial [-Rpass-missed=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:148:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:148:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:157:5: remark: the cost-model indicates that vectorization is not beneficial [-Rpass-missed=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:157:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:157:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:167:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:167:23: remark: Cannot SLP vectorize list: vectorization was impossible with available vectorization factors [-Rpass-missed=slp-vectorizer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:167:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:177:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:177:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:184:22: remark: loop not vectorized: value that could not be identified as reduction is used outside the loop [-Rpass-analysis=loop-vectorize]
        if (val[i] > *pivot) {
                     ^
compiler-optimizations.cpp:183:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:183:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:184:22: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
        if (val[i] > *pivot) {
                     ^
compiler-optimizations.cpp:184:22: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
compiler-optimizations.cpp:194:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:195:20: remark: Cannot SLP vectorize list: type <4 x i1> is unsupported by vectorizer [-Rpass-missed=slp-vectorizer]
        if (val[i] > pivot) {
                   ^
compiler-optimizations.cpp:207:5: remark: loop not vectorized: could not determine number of loop iterations [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < str->n; i++) {
    ^
compiler-optimizations.cpp:207:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:208:14: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
        str->p[i] = '\0';
             ^
compiler-optimizations.cpp:207:30: remark: failed to move load with loop-invariant address because the loop may invalidate its value [-Rpass-missed=licm]
    for (int i = 0; i < str->n; i++) {
                             ^
compiler-optimizations.cpp:221:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:221:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:221:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:221:5: remark: unrolled loop by a factor of 4 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:227:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:227:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:233:5: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:233:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:233:5: remark: unrolled loop by a factor of 4 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:239:5: remark: vectorized loop (vectorization width: 2, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n/2; i++) {
    ^
compiler-optimizations.cpp:239:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:239:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:239:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:239:31: remark: hoisting getelementptr [-Rpass=licm]
    for (int i = 0; i < n/2; i++) {
                              ^
compiler-optimizations.cpp:239:31: remark: hoisting getelementptr [-Rpass=licm]
compiler-optimizations.cpp:246:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:246:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:246:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:246:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:246:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:246:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:246:5: remark: unrolled loop by a factor of 4 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:254:13: remark: loop not vectorized: cannot prove it is safe to reorder floating-point operations; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'. [-Rpass-analysis=loop-vectorize]
        sum += a[i];
            ^
compiler-optimizations.cpp:253:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:253:5: remark: unrolled loop by a factor of 8 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:270:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:270:5: remark: vectorized loop (vectorization width: 2, interleaved count: 1) [-Rpass=loop-vectorize]
compiler-optimizations.cpp:277:9: remark: the cost-model indicates that vectorization is not beneficial [-Rpass-missed=loop-vectorize]
        for (int j = 0; j < n; j++) {
        ^
compiler-optimizations.cpp:277:9: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:278:36: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                                   ^
compiler-optimizations.cpp:277:9: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
        for (int j = 0; j < n; j++) {
        ^
compiler-optimizations.cpp:277:9: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:277:9: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:277:9: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:277:9: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
        for (int i = 1; i < n; i++) {
        ^
compiler-optimizations.cpp:286:36: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                                   ^
compiler-optimizations.cpp:286:36: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:285:9: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
        for (int i = 1; i < n; i++) {
        ^
compiler-optimizations.cpp:285:9: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:285:9: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:285:9: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:283:6: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:283:6: remark: Cannot SLP vectorize list: vectorization was impossible with available vectorization factors [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:283:6: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:285:9: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
        for (int i = 1; i < n; i++) {
        ^
compiler-optimizations.cpp:285:9: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:285:9: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting or [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:283:6: remark: hoisting icmp [-Rpass=licm]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:285:9: remark: hoisting icmp [-Rpass=licm]
        for (int i = 1; i < n; i++) {
        ^
compiler-optimizations.cpp:285:9: remark: hoisting and [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting icmp [-Rpass=licm]
compiler-optimizations.cpp:285:9: remark: hoisting sub [-Rpass=licm]
compiler-optimizations.cpp:292:5: remark: loop not vectorized: unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operations into a separate loop [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:292:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:292:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:292:5: remark: Cannot SLP vectorize list: vectorization was impossible with available vectorization factors [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:292:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:292:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:292:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:300:16: remark: loop not vectorized: value that could not be identified as reduction is used outside the loop [-Rpass-analysis=loop-vectorize]
        a[i] = a[i - 1] * b[i];
               ^
compiler-optimizations.cpp:299:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:299:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:309:5: remark: loop not vectorized: value that could not be identified as reduction is used outside the loop [-Rpass-analysis=loop-vectorize]
    for (int j = 0; j < n; j++) {
    ^
compiler-optimizations.cpp:309:5: remark: loop not vectorized: cannot identify array bounds [-Rpass-analysis=loop-vectorize]
compiler-optimizations.cpp:309:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
compiler-optimizations.cpp:316:15: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
    std::swap(v[i], v[n-1]);
              ^
compiler-optimizations.cpp:309:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
    for (int j = 0; j < n; j++) {
    ^
compiler-optimizations.cpp:322:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:327:5: remark: vectorized loop (vectorization width: 4, interleaved count: 2) [-Rpass=loop-vectorize]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:319:6: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:327:23: remark: Cannot SLP vectorize list: vectorization was impossible with available vectorization factors [-Rpass-missed=slp-vectorizer]
    for (int i = 1; i < n; i++) {
                      ^
compiler-optimizations.cpp:322:23: remark: Cannot SLP vectorize list: vectorization was impossible with available vectorization factors [-Rpass-missed=slp-vectorizer]
    for (int i = 1; i < n; i++) {
                      ^
compiler-optimizations.cpp:322:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:327:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:336:5: remark: the cost-model indicates that interleaving is not beneficial [-Rpass-analysis=loop-vectorize]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:336:5: remark: vectorized loop (vectorization width: 2, interleaved count: 1) [-Rpass=loop-vectorize]
compiler-optimizations.cpp:336:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:336:5: remark: List vectorization was possible but not beneficial with cost 0 >= 0 [-Rpass-missed=slp-vectorizer]
compiler-optimizations.cpp:336:5: remark: unrolled loop by a factor of 2 with run-time trip count [-Rpass=loop-unroll]
compiler-optimizations.cpp:3:6: remark: Canonicalize natural loops: IR instruction count changed from 2587 to 2588; Delta: 1 [-Rpass-analysis=size-info]
void test_spilling(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
     ^
compiler-optimizations.cpp:3:6: remark: Canonicalize natural loops: Function: _Z13test_spillingPiS_S_S_S_S_i: IR instruction count changed from 34 to 35; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:6: remark: Loop Strength Reduction: IR instruction count changed from 2588 to 2599; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:6: remark: Loop Strength Reduction: Function: _Z13test_spillingPiS_S_S_S_S_i: IR instruction count changed from 35 to 46; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:6: remark: CodeGen Prepare: IR instruction count changed from 2599 to 2598; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:6: remark: CodeGen Prepare: Function: _Z13test_spillingPiS_S_S_S_S_i: IR instruction count changed from 35 to 45; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z13test_spillingPiS_S_S_S_S_i: MI Instruction count changed from 0 to 28; Delta: 28 [-Rpass-analysis=size-info]
void test_spilling(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
^
compiler-optimizations.cpp:3:1: remark: Eliminate PHI nodes for register allocation: Function: _Z13test_spillingPiS_S_S_S_S_i: MI Instruction count changed from 28 to 30; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:1: remark: Two-Address instruction pass: Function: _Z13test_spillingPiS_S_S_S_S_i: MI Instruction count changed from 30 to 31; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:1: remark: Simple Register Coalescing: Function: _Z13test_spillingPiS_S_S_S_S_i: MI Instruction count changed from 31 to 24; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:1: remark: Virtual Register Rewriter: Function: _Z13test_spillingPiS_S_S_S_S_i: MI Instruction count changed from 24 to 18; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:3:1: remark: Control Flow Optimizer: Function: _Z13test_spillingPiS_S_S_S_S_i: MI Instruction count changed from 18 to 15; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:3:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_spilling(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
     ^
compiler-optimizations.cpp:4:22: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i< n; i++) {
                     ^
compiler-optimizations.cpp:5:14: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + i;
             ^
compiler-optimizations.cpp:12:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:3:1: remark: 15 instructions in function [-Rpass-analysis=asm-printer]
void test_spilling(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
^
compiler-optimizations.cpp:14:6: remark: Canonicalize natural loops: IR instruction count changed from 2598 to 2599; Delta: 1 [-Rpass-analysis=size-info]
void test_pointer_aliasing(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
     ^
compiler-optimizations.cpp:14:6: remark: Canonicalize natural loops: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: IR instruction count changed from 42 to 43; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:6: remark: Loop Strength Reduction: IR instruction count changed from 2599 to 2611; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:6: remark: Loop Strength Reduction: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: IR instruction count changed from 43 to 55; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:6: remark: CodeGen Prepare: IR instruction count changed from 2611 to 2610; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:6: remark: CodeGen Prepare: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: IR instruction count changed from 43 to 54; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 0 to 36; Delta: 36 [-Rpass-analysis=size-info]
void test_pointer_aliasing(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
^
compiler-optimizations.cpp:14:1: remark: Eliminate PHI nodes for register allocation: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 36 to 38; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:1: remark: Two-Address instruction pass: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 38 to 47; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:1: remark: Simple Register Coalescing: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 47 to 32; Delta: -15 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:1: remark: Virtual Register Rewriter: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 32 to 26; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:1: remark: 8 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:14:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 26 to 31; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:1: remark: Control Flow Optimizer: Function: _Z21test_pointer_aliasingPiS_S_S_S_S_i: MI Instruction count changed from 31 to 28; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:14:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_pointer_aliasing(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
     ^
compiler-optimizations.cpp:15:22: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i< n; i++) {
                     ^
compiler-optimizations.cpp:16:14: remark: BasicBlock: : 17 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + i;
             ^
compiler-optimizations.cpp:23:1: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:14:1: remark: 25 instructions in function [-Rpass-analysis=asm-printer]
void test_pointer_aliasing(int* a, int* b, int* c, int *x, int* y, int* z, int n) {
^
compiler-optimizations.cpp:25:6: remark: Canonicalize natural loops: IR instruction count changed from 2610 to 2611; Delta: 1 [-Rpass-analysis=size-info]
void test_pointer_aliasing_fix(int* __restrict a, int* __restrict  b, int* __restrict  c, int * __restrict x, int* __restrict  y, int* __restrict z, int n) {
     ^
compiler-optimizations.cpp:25:6: remark: Canonicalize natural loops: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: IR instruction count changed from 91 to 92; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: Loop Strength Reduction: IR instruction count changed from 2611 to 2639; Delta: 28 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: Loop Strength Reduction: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: IR instruction count changed from 92 to 120; Delta: 28 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: Loop Strength Reduction: IR instruction count changed from 2639 to 2641; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: Loop Strength Reduction: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: IR instruction count changed from 120 to 122; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: CodeGen Prepare: IR instruction count changed from 2641 to 2640; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: CodeGen Prepare: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: IR instruction count changed from 92 to 121; Delta: 29 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 0 to 105; Delta: 105 [-Rpass-analysis=size-info]
void test_pointer_aliasing_fix(int* __restrict a, int* __restrict  b, int* __restrict  c, int * __restrict x, int* __restrict  y, int* __restrict z, int n) {
^
compiler-optimizations.cpp:25:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 105 to 106; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: Process Implicit Definitions: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 106 to 105; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: Eliminate PHI nodes for register allocation: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 105 to 115; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: Two-Address instruction pass: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 115 to 150; Delta: 35 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: Simple Register Coalescing: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 150 to 93; Delta: -57 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:26:5: remark: 1 reloads 1.532000e+01 total reloads cost 2 virtual registers copies 3.064000e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i< n; i++) {
    ^
compiler-optimizations.cpp:25:1: remark: 1 spills 4.800000e-01 total spills cost 1 reloads 1.532000e+01 total reloads cost 4 virtual registers copies 3.144000e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_pointer_aliasing_fix(int* __restrict a, int* __restrict  b, int* __restrict  c, int * __restrict x, int* __restrict  y, int* __restrict z, int n) {
^
compiler-optimizations.cpp:25:1: remark: Greedy Register Allocator: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 93 to 96; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: Virtual Register Rewriter: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 96 to 90; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: 48 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:25:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 90 to 120; Delta: 30 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:1: remark: Control Flow Optimizer: Function: _Z25test_pointer_aliasing_fixPiS_S_S_S_S_i: MI Instruction count changed from 120 to 115; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:25:6: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
void test_pointer_aliasing_fix(int* __restrict a, int* __restrict  b, int* __restrict  c, int * __restrict x, int* __restrict  y, int* __restrict z, int n) {
     ^
compiler-optimizations.cpp:26:22: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i< n; i++) {
                     ^
compiler-optimizations.cpp:25:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_pointer_aliasing_fix(int* __restrict a, int* __restrict  b, int* __restrict  c, int * __restrict x, int* __restrict  y, int* __restrict z, int n) {
     ^
compiler-optimizations.cpp:26:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    for (int i = 0; i< n; i++) {
    ^
compiler-optimizations.cpp:27:16: remark: BasicBlock: : 26 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + i;
               ^
compiler-optimizations.cpp:26:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i< n; i++) {
    ^
compiler-optimizations.cpp:26:5: remark: BasicBlock: : 11 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:27:14: remark: BasicBlock: : 30 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + i;
             ^
compiler-optimizations.cpp:34:1: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:25:1: remark: 97 instructions in function [-Rpass-analysis=asm-printer]
void test_pointer_aliasing_fix(int* __restrict a, int* __restrict  b, int* __restrict  c, int * __restrict x, int* __restrict  y, int* __restrict z, int n) {
^
compiler-optimizations.cpp:37:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z2f1Pdii: MI Instruction count changed from 0 to 13; Delta: 13 [-Rpass-analysis=size-info]
double f1(double* a, int i, int pivot) {
^
compiler-optimizations.cpp:37:1: remark: Machine Common Subexpression Elimination: Function: _Z2f1Pdii: MI Instruction count changed from 13 to 11; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:37:1: remark: Two-Address instruction pass: Function: _Z2f1Pdii: MI Instruction count changed from 11 to 13; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:37:1: remark: Simple Register Coalescing: Function: _Z2f1Pdii: MI Instruction count changed from 13 to 10; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:37:1: remark: Virtual Register Rewriter: Function: _Z2f1Pdii: MI Instruction count changed from 10 to 6; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:37:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:38:9: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
    if (a[i] > pivot) 
        ^
compiler-optimizations.cpp:37:1: remark: 6 instructions in function [-Rpass-analysis=asm-printer]
double f1(double* a, int i, int pivot) {
^
compiler-optimizations.cpp:43:6: remark: CodeGen Prepare: IR instruction count changed from 2640 to 2644; Delta: 4 [-Rpass-analysis=size-info]
void f2(double* a, int i, int pivot) {
     ^
compiler-optimizations.cpp:43:6: remark: CodeGen Prepare: Function: _Z2f2Pdii: IR instruction count changed from 10 to 14; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:43:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z2f2Pdii: MI Instruction count changed from 0 to 12; Delta: 12 [-Rpass-analysis=size-info]
void f2(double* a, int i, int pivot) {
^
compiler-optimizations.cpp:43:1: remark: Two-Address instruction pass: Function: _Z2f2Pdii: MI Instruction count changed from 12 to 13; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:43:1: remark: Simple Register Coalescing: Function: _Z2f2Pdii: MI Instruction count changed from 13 to 12; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:43:1: remark: Virtual Register Rewriter: Function: _Z2f2Pdii: MI Instruction count changed from 12 to 9; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:43:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:43:1: remark: Control Flow Optimizer: Function: _Z2f2Pdii: MI Instruction count changed from 9 to 8; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:44:9: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
    if (a[i] > pivot) {
        ^
compiler-optimizations.cpp:45:13: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        a[i]++;
            ^
compiler-optimizations.cpp:47:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:43:1: remark: 8 instructions in function [-Rpass-analysis=asm-printer]
void f2(double* a, int i, int pivot) {
^
compiler-optimizations.cpp:49:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z2f3Pcii: MI Instruction count changed from 0 to 11; Delta: 11 [-Rpass-analysis=size-info]
char f3(char* a, int i, int pivot) {
^
compiler-optimizations.cpp:49:1: remark: Two-Address instruction pass: Function: _Z2f3Pcii: MI Instruction count changed from 11 to 12; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:49:1: remark: Simple Register Coalescing: Function: _Z2f3Pcii: MI Instruction count changed from 12 to 10; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:49:1: remark: Virtual Register Rewriter: Function: _Z2f3Pcii: MI Instruction count changed from 10 to 7; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:49:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:50:9: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
    if (a[i] > pivot)
        ^
compiler-optimizations.cpp:49:1: remark: 6 instructions in function [-Rpass-analysis=asm-printer]
char f3(char* a, int i, int pivot) {
^
compiler-optimizations.cpp:55:6: remark: CodeGen Prepare: IR instruction count changed from 2644 to 2645; Delta: 1 [-Rpass-analysis=size-info]
void f4(char* a, int i, int pivot) {
     ^
compiler-optimizations.cpp:55:6: remark: CodeGen Prepare: Function: _Z2f4Pcii: IR instruction count changed from 10 to 11; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:55:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z2f4Pcii: MI Instruction count changed from 0 to 12; Delta: 12 [-Rpass-analysis=size-info]
void f4(char* a, int i, int pivot) {
^
compiler-optimizations.cpp:55:1: remark: Two-Address instruction pass: Function: _Z2f4Pcii: MI Instruction count changed from 12 to 13; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:55:1: remark: Simple Register Coalescing: Function: _Z2f4Pcii: MI Instruction count changed from 13 to 11; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:55:1: remark: Virtual Register Rewriter: Function: _Z2f4Pcii: MI Instruction count changed from 11 to 8; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:55:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:55:1: remark: Control Flow Optimizer: Function: _Z2f4Pcii: MI Instruction count changed from 8 to 7; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:56:9: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    if (a[i] > pivot) {
        ^
compiler-optimizations.cpp:57:13: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        a[i]++;
            ^
compiler-optimizations.cpp:59:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:55:1: remark: 7 instructions in function [-Rpass-analysis=asm-printer]
void f4(char* a, int i, int pivot) {
^
compiler-optimizations.cpp:61:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z3addPiS_: MI Instruction count changed from 0 to 8; Delta: 8 [-Rpass-analysis=size-info]
void add(int* a, int* b) {
^
compiler-optimizations.cpp:61:1: remark: Virtual Register Rewriter: Function: _Z3addPiS_: MI Instruction count changed from 8 to 6; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:61:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:61:1: remark: Control Flow Optimizer: Function: _Z3addPiS_: MI Instruction count changed from 6 to 5; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:62:9: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    (*a)++;
        ^
compiler-optimizations.cpp:63:16: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
    if (b) (*b)++;
               ^
compiler-optimizations.cpp:64:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:61:1: remark: 5 instructions in function [-Rpass-analysis=asm-printer]
void add(int* a, int* b) {
^
compiler-optimizations.cpp:67:6: remark: Canonicalize natural loops: IR instruction count changed from 2645 to 2647; Delta: 2 [-Rpass-analysis=size-info]
void test_dead_code_elimination(int* a, int n) {
     ^
compiler-optimizations.cpp:67:6: remark: Canonicalize natural loops: Function: _Z26test_dead_code_eliminationPii: IR instruction count changed from 74 to 76; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:6: remark: Loop Strength Reduction: IR instruction count changed from 2647 to 2657; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:6: remark: Loop Strength Reduction: Function: _Z26test_dead_code_eliminationPii: IR instruction count changed from 76 to 86; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:6: remark: CodeGen Prepare: IR instruction count changed from 2657 to 2670; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:6: remark: CodeGen Prepare: Function: _Z26test_dead_code_eliminationPii: IR instruction count changed from 76 to 99; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 0 to 69; Delta: 69 [-Rpass-analysis=size-info]
void test_dead_code_elimination(int* a, int n) {
^
compiler-optimizations.cpp:67:1: remark: Eliminate PHI nodes for register allocation: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 69 to 79; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:1: remark: Two-Address instruction pass: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 79 to 92; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:1: remark: Simple Register Coalescing: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 92 to 60; Delta: -32 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:1: remark: 3 virtual registers copies 8.088235e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:67:1: remark: Virtual Register Rewriter: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 60 to 58; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:67:1: remark: Control Flow Optimizer: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 58 to 52; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:67:1: remark: Branch Probability Basic Block Placement: Function: _Z26test_dead_code_eliminationPii: MI Instruction count changed from 52 to 54; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:68:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:68:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:67:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_dead_code_elimination(int* a, int n) {
     ^
compiler-optimizations.cpp:68:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:68:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:62:9: remark: BasicBlock: : 15 [-Rpass-analysis=asm-printer]
    (*a)++;
        ^
compiler-optimizations.cpp:68:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:62:9: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    (*a)++;
        ^
compiler-optimizations.cpp:68:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:62:9: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    (*a)++;
        ^
compiler-optimizations.cpp:71:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:67:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_dead_code_elimination(int* a, int n) {
     ^
compiler-optimizations.cpp:67:1: remark: 54 instructions in function [-Rpass-analysis=asm-printer]
void test_dead_code_elimination(int* a, int n) {
^
compiler-optimizations.cpp:78:6: remark: Canonicalize natural loops: IR instruction count changed from 2670 to 2674; Delta: 4 [-Rpass-analysis=size-info]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
     ^
compiler-optimizations.cpp:78:6: remark: Canonicalize natural loops: Function: _Z26test_invariant_code_motionPiii11operation_e: IR instruction count changed from 155 to 159; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: Loop Strength Reduction: IR instruction count changed from 2674 to 2684; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: Loop Strength Reduction: Function: _Z26test_invariant_code_motionPiii11operation_e: IR instruction count changed from 159 to 169; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: Loop Strength Reduction: IR instruction count changed from 2684 to 2694; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: Loop Strength Reduction: Function: _Z26test_invariant_code_motionPiii11operation_e: IR instruction count changed from 169 to 179; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: Constant Hoisting: IR instruction count changed from 2694 to 2696; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: Constant Hoisting: Function: _Z26test_invariant_code_motionPiii11operation_e: IR instruction count changed from 159 to 181; Delta: 22 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: CodeGen Prepare: IR instruction count changed from 2696 to 2722; Delta: 26 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:6: remark: CodeGen Prepare: Function: _Z26test_invariant_code_motionPiii11operation_e: IR instruction count changed from 181 to 207; Delta: 26 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 0 to 142; Delta: 142 [-Rpass-analysis=size-info]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
^
compiler-optimizations.cpp:78:1: remark: Machine Common Subexpression Elimination: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 142 to 140; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: Eliminate PHI nodes for register allocation: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 140 to 160; Delta: 20 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: Two-Address instruction pass: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 160 to 187; Delta: 27 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: Simple Register Coalescing: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 187 to 122; Delta: -65 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: 6 virtual registers copies 5.392157e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:78:1: remark: Virtual Register Rewriter: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 122 to 118; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:78:1: remark: Control Flow Optimizer: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 118 to 107; Delta: -11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:78:1: remark: Branch Probability Basic Block Placement: Function: _Z26test_invariant_code_motionPiii11operation_e: MI Instruction count changed from 107 to 111; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:79:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:78:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
     ^
compiler-optimizations.cpp:80:9: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        switch (operation) {
        ^
compiler-optimizations.cpp:79:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:78:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
     ^
compiler-optimizations.cpp:79:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:78:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
     ^
compiler-optimizations.cpp:79:5: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:79:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:82:27: remark: BasicBlock: : 15 [-Rpass-analysis=asm-printer]
            case SUB: a[i]-= x * x; break;
                          ^
compiler-optimizations.cpp:79:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:82:27: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
            case SUB: a[i]-= x * x; break;
                          ^
compiler-optimizations.cpp:79:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:82:27: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
            case SUB: a[i]-= x * x; break;
                          ^
compiler-optimizations.cpp:79:5: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:79:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:81:27: remark: BasicBlock: : 15 [-Rpass-analysis=asm-printer]
            case ADD: a[i]+= x * x; break;
                          ^
compiler-optimizations.cpp:79:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:81:27: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
            case ADD: a[i]+= x * x; break;
                          ^
compiler-optimizations.cpp:79:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:81:27: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
            case ADD: a[i]+= x * x; break;
                          ^
compiler-optimizations.cpp:85:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:78:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
     ^
compiler-optimizations.cpp:78:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:78:1: remark: 111 instructions in function [-Rpass-analysis=asm-printer]
void test_invariant_code_motion(int* a, int n, int x, operation_e operation) {
^
compiler-optimizations.cpp:89:5: remark: Canonicalize natural loops: IR instruction count changed from 2722 to 2723; Delta: 1 [-Rpass-analysis=size-info]
int test_loop_unswitching(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:89:5: remark: Canonicalize natural loops: Function: _Z21test_loop_unswitchingPciRb: IR instruction count changed from 23 to 24; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:5: remark: CodeGen Prepare: IR instruction count changed from 2723 to 2722; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:5: remark: CodeGen Prepare: Function: _Z21test_loop_unswitchingPciRb: IR instruction count changed from 24 to 23; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 0 to 34; Delta: 34 [-Rpass-analysis=size-info]
int test_loop_unswitching(char* a, int n, bool& debug) {
^
compiler-optimizations.cpp:89:1: remark: Eliminate PHI nodes for register allocation: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 34 to 42; Delta: 8 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: Two-Address instruction pass: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 42 to 44; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: Simple Register Coalescing: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 44 to 29; Delta: -15 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: Virtual Register Rewriter: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 29 to 28; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: 56 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:89:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 28 to 60; Delta: 32 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: Control Flow Optimizer: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 60 to 56; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:89:1: remark: Branch Probability Basic Block Placement: Function: _Z21test_loop_unswitchingPciRb: MI Instruction count changed from 56 to 57; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:91:23: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:89:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
int test_loop_unswitching(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:96:22: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
            error_cnt++;
                     ^
compiler-optimizations.cpp:91:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:92:18: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (a[i] != 0) {
                 ^
compiler-optimizations.cpp:93:17: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
            if (debug) {
                ^
compiler-optimizations.cpp:94:17: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
                log_error("error");
                ^
compiler-optimizations.cpp:89:5: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
int test_loop_unswitching(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:99:5: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
    return error_cnt;
    ^
compiler-optimizations.cpp:89:1: remark: 37 instructions in function [-Rpass-analysis=asm-printer]
int test_loop_unswitching(char* a, int n, bool& debug) {
^
compiler-optimizations.cpp:103:5: remark: Canonicalize natural loops: IR instruction count changed from 2722 to 2726; Delta: 4 [-Rpass-analysis=size-info]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:103:5: remark: Canonicalize natural loops: Function: _Z27test_loop_unswitching_fixedPciRb: IR instruction count changed from 104 to 108; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:5: remark: Loop Strength Reduction: IR instruction count changed from 2726 to 2729; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:5: remark: Loop Strength Reduction: Function: _Z27test_loop_unswitching_fixedPciRb: IR instruction count changed from 108 to 111; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:5: remark: Expand reduction intrinsics: IR instruction count changed from 2729 to 2733; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:5: remark: Expand reduction intrinsics: Function: _Z27test_loop_unswitching_fixedPciRb: IR instruction count changed from 108 to 115; Delta: 7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:5: remark: CodeGen Prepare: IR instruction count changed from 2733 to 2729; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:5: remark: CodeGen Prepare: Function: _Z27test_loop_unswitching_fixedPciRb: IR instruction count changed from 115 to 111; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 0 to 155; Delta: 155 [-Rpass-analysis=size-info]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
^
compiler-optimizations.cpp:103:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 155 to 154; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Peephole Optimizations: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 154 to 153; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Process Implicit Definitions: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 153 to 140; Delta: -13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Eliminate PHI nodes for register allocation: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 140 to 180; Delta: 40 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Two-Address instruction pass: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 180 to 229; Delta: 49 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Simple Register Coalescing: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 229 to 121; Delta: -108 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: 3 virtual registers copies 3.021978e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:103:1: remark: Virtual Register Rewriter: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 121 to 119; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: 40 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:103:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 119 to 142; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Control Flow Optimizer: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 142 to 135; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Branch Probability Basic Block Placement: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 135 to 138; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:103:1: remark: Check CFA info and insert CFI instructions if needed: Function: _Z27test_loop_unswitching_fixedPciRb: MI Instruction count changed from 138 to 139; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:106:23: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:103:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:103:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:106:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:107:18: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (a[i] != 0) {
                 ^
compiler-optimizations.cpp:109:17: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
                log_error("error");
                ^
compiler-optimizations.cpp:103:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:106:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:103:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:106:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:106:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:107:13: remark: BasicBlock: : 31 [-Rpass-analysis=asm-printer]
        if (a[i] != 0) {
            ^
compiler-optimizations.cpp:106:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:107:13: remark: BasicBlock: : 17 [-Rpass-analysis=asm-printer]
        if (a[i] != 0) {
            ^
compiler-optimizations.cpp:106:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:107:13: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
        if (a[i] != 0) {
            ^
compiler-optimizations.cpp:114:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    return error_cnt;
    ^
compiler-optimizations.cpp:103:5: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
    ^
compiler-optimizations.cpp:103:1: remark: 123 instructions in function [-Rpass-analysis=asm-printer]
int test_loop_unswitching_fixed(char* a, int n, bool& debug) {
^
compiler-optimizations.cpp:117:6: remark: Canonicalize natural loops: IR instruction count changed from 2729 to 2732; Delta: 3 [-Rpass-analysis=size-info]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:117:6: remark: Canonicalize natural loops: Function: _Z9test_licmPdS_S_i: IR instruction count changed from 63 to 66; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:6: remark: Loop Strength Reduction: IR instruction count changed from 2732 to 2738; Delta: 6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:6: remark: Loop Strength Reduction: Function: _Z9test_licmPdS_S_i: IR instruction count changed from 66 to 72; Delta: 6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:6: remark: CodeGen Prepare: IR instruction count changed from 2738 to 2744; Delta: 6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:6: remark: CodeGen Prepare: Function: _Z9test_licmPdS_S_i: IR instruction count changed from 66 to 78; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 0 to 74; Delta: 74 [-Rpass-analysis=size-info]
void test_licm(double* a, double* b, double* c, int n) {
^
compiler-optimizations.cpp:117:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 74 to 71; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Machine Common Subexpression Elimination: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 71 to 70; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Eliminate PHI nodes for register allocation: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 70 to 88; Delta: 18 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Two-Address instruction pass: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 88 to 105; Delta: 17 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Simple Register Coalescing: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 105 to 61; Delta: -44 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:119:9: remark: 1 reloads 3.412500e+02 total reloads cost 1 virtual registers copies 3.412500e+02 total copies cost generated in loop [-Rpass-missed=regalloc]
        for (int j = 0; j < n; j++) {
        ^
compiler-optimizations.cpp:118:5: remark: 1 spills 2.125000e+01 total spills cost 3 reloads 3.837500e+02 total reloads cost 3 virtual registers copies 3.837500e+02 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:117:1: remark: 2 spills 2.225000e+01 total spills cost 3 reloads 3.837500e+02 total reloads cost 5 virtual registers copies 3.850833e+02 total copies cost generated in function [-Rpass-missed=regalloc]
void test_licm(double* a, double* b, double* c, int n) {
^
compiler-optimizations.cpp:117:1: remark: Greedy Register Allocator: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 61 to 65; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Virtual Register Rewriter: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 65 to 60; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: 48 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:117:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 60 to 90; Delta: 30 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Control Flow Optimizer: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 90 to 85; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:1: remark: Branch Probability Basic Block Placement: Function: _Z9test_licmPdS_S_i: MI Instruction count changed from 85 to 88; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:118:5: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:119:33: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
        for (int j = 0; j < n; j++) {
                                ^
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:121:33: remark: BasicBlock: : 12 [-Rpass-analysis=asm-printer]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                                ^
compiler-optimizations.cpp:117:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_licm(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:121:41: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
                c[i * n + j] += a[i * n + k] * b[k * n + j];
                                        ^
compiler-optimizations.cpp:125:1: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:117:1: remark: 70 instructions in function [-Rpass-analysis=asm-printer]
void test_licm(double* a, double* b, double* c, int n) {
^
compiler-optimizations.cpp:127:6: remark: Canonicalize natural loops: IR instruction count changed from 2744 to 2747; Delta: 3 [-Rpass-analysis=size-info]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:127:6: remark: Canonicalize natural loops: Function: _Z15test_licm_fixedPdS_S_i: IR instruction count changed from 63 to 66; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:6: remark: Loop Strength Reduction: IR instruction count changed from 2747 to 2753; Delta: 6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:6: remark: Loop Strength Reduction: Function: _Z15test_licm_fixedPdS_S_i: IR instruction count changed from 66 to 72; Delta: 6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:6: remark: CodeGen Prepare: IR instruction count changed from 2753 to 2755; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:6: remark: CodeGen Prepare: Function: _Z15test_licm_fixedPdS_S_i: IR instruction count changed from 66 to 74; Delta: 8 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 0 to 75; Delta: 75 [-Rpass-analysis=size-info]
void test_licm_fixed(double* a, double* b, double* c, int n) {
^
compiler-optimizations.cpp:127:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 75 to 72; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Machine Common Subexpression Elimination: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 72 to 71; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Process Implicit Definitions: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 71 to 70; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Eliminate PHI nodes for register allocation: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 70 to 92; Delta: 22 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Two-Address instruction pass: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 92 to 109; Delta: 17 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Simple Register Coalescing: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 109 to 61; Delta: -48 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:131:13: remark: 1 virtual registers copies 1.092258e+04 total copies cost generated in loop [-Rpass-missed=regalloc]
            for (int k = 0; k < n; k++) {
            ^
compiler-optimizations.cpp:129:9: remark: 1 reloads 3.412500e+02 total reloads cost 3 virtual registers copies 1.160508e+04 total copies cost generated in loop [-Rpass-missed=regalloc]
        for (int j = 0; j < n; j++) {
        ^
compiler-optimizations.cpp:128:5: remark: 1 spills 2.125000e+01 total spills cost 3 reloads 3.837500e+02 total reloads cost 5 virtual registers copies 1.164758e+04 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:127:1: remark: 2 spills 2.225000e+01 total spills cost 3 reloads 3.837500e+02 total reloads cost 7 virtual registers copies 1.164892e+04 total copies cost generated in function [-Rpass-missed=regalloc]
void test_licm_fixed(double* a, double* b, double* c, int n) {
^
compiler-optimizations.cpp:127:1: remark: Greedy Register Allocator: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 61 to 65; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Virtual Register Rewriter: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 65 to 60; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: 48 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:127:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 60 to 90; Delta: 30 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Control Flow Optimizer: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 90 to 85; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:1: remark: Branch Probability Basic Block Placement: Function: _Z15test_licm_fixedPdS_S_i: MI Instruction count changed from 85 to 88; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:127:6: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:128:5: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:127:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:127:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:134:26: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
            c[i * n + j] = tmp;
                         ^
compiler-optimizations.cpp:130:32: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
            auto tmp = c[i * n + j];
                               ^
compiler-optimizations.cpp:127:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:127:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:132:24: remark: BasicBlock: : 11 [-Rpass-analysis=asm-printer]
                tmp += a[i * n + k] * b[k * n + j];
                       ^
compiler-optimizations.cpp:127:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_licm_fixed(double* a, double* b, double* c, int n) {
     ^
compiler-optimizations.cpp:132:32: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
                tmp += a[i * n + k] * b[k * n + j];
                               ^
compiler-optimizations.cpp:137:1: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:127:1: remark: 70 instructions in function [-Rpass-analysis=asm-printer]
void test_licm_fixed(double* a, double* b, double* c, int n) {
^
compiler-optimizations.cpp:139:6: remark: Canonicalize natural loops: IR instruction count changed from 2755 to 2757; Delta: 2 [-Rpass-analysis=size-info]
void test_gvn_basic(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:139:6: remark: Canonicalize natural loops: Function: _Z14test_gvn_basicPiS_i: IR instruction count changed from 131 to 133; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:6: remark: Loop Strength Reduction: IR instruction count changed from 2757 to 2760; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:6: remark: Loop Strength Reduction: Function: _Z14test_gvn_basicPiS_i: IR instruction count changed from 133 to 136; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:6: remark: Loop Strength Reduction: IR instruction count changed from 2760 to 2773; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:6: remark: Loop Strength Reduction: Function: _Z14test_gvn_basicPiS_i: IR instruction count changed from 136 to 149; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:6: remark: CodeGen Prepare: IR instruction count changed from 2773 to 2796; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:6: remark: CodeGen Prepare: Function: _Z14test_gvn_basicPiS_i: IR instruction count changed from 133 to 172; Delta: 39 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 0 to 162; Delta: 162 [-Rpass-analysis=size-info]
void test_gvn_basic(int* a, int* b, int n) {
^
compiler-optimizations.cpp:139:1: remark: Early Tail Duplication: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 162 to 161; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 161 to 154; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: Machine Common Subexpression Elimination: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 154 to 148; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: Eliminate PHI nodes for register allocation: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 148 to 157; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: Two-Address instruction pass: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 157 to 177; Delta: 20 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: Simple Register Coalescing: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 177 to 133; Delta: -44 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:140:5: remark: 2 virtual registers copies 1.003922e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:139:1: remark: 4 virtual registers copies 1.074510e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_gvn_basic(int* a, int* b, int n) {
^
compiler-optimizations.cpp:139:1: remark: Virtual Register Rewriter: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 133 to 130; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:139:1: remark: Control Flow Optimizer: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 130 to 112; Delta: -18 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:139:1: remark: Branch Probability Basic Block Placement: Function: _Z14test_gvn_basicPiS_i: MI Instruction count changed from 112 to 133; Delta: 21 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:140:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:140:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:140:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:139:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_gvn_basic(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:139:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:140:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:141:14: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
             ^
compiler-optimizations.cpp:141:19: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
                  ^
compiler-optimizations.cpp:140:29: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:140:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:140:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:141:14: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
             ^
compiler-optimizations.cpp:141:19: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
                  ^
compiler-optimizations.cpp:141:14: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
             ^
compiler-optimizations.cpp:141:19: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
                  ^
compiler-optimizations.cpp:140:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:140:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:141:14: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
             ^
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        if ((a[i] + 1) > 0) {
                       ^
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:141:24: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:140:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:145:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:139:1: remark: 133 instructions in function [-Rpass-analysis=asm-printer]
void test_gvn_basic(int* a, int* b, int n) {
^
compiler-optimizations.cpp:147:6: remark: Canonicalize natural loops: IR instruction count changed from 2796 to 2797; Delta: 1 [-Rpass-analysis=size-info]
void test_gvn(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:147:6: remark: Canonicalize natural loops: Function: _Z8test_gvnPiS_i: IR instruction count changed from 56 to 57; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:6: remark: Loop Strength Reduction: IR instruction count changed from 2797 to 2798; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:6: remark: Loop Strength Reduction: Function: _Z8test_gvnPiS_i: IR instruction count changed from 57 to 58; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:6: remark: CodeGen Prepare: IR instruction count changed from 2798 to 2823; Delta: 25 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:6: remark: CodeGen Prepare: Function: _Z8test_gvnPiS_i: IR instruction count changed from 57 to 83; Delta: 26 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 0 to 45; Delta: 45 [-Rpass-analysis=size-info]
void test_gvn(int* a, int* b, int n) {
^
compiler-optimizations.cpp:147:1: remark: Eliminate PHI nodes for register allocation: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 45 to 49; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:1: remark: Two-Address instruction pass: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 49 to 50; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:1: remark: Simple Register Coalescing: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 50 to 39; Delta: -11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:148:5: remark: 1 virtual registers copies 1.022500e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:147:1: remark: 2 virtual registers copies 1.052500e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_gvn(int* a, int* b, int n) {
^
compiler-optimizations.cpp:147:1: remark: Virtual Register Rewriter: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 39 to 36; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:147:1: remark: Control Flow Optimizer: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 36 to 29; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:147:1: remark: Branch Probability Basic Block Placement: Function: _Z8test_gvnPiS_i: MI Instruction count changed from 29 to 30; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:148:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:148:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:147:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_gvn(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:149:13: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (a[i+1] > 0) {
            ^
compiler-optimizations.cpp:149:20: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (a[i+1] > 0) {
                   ^
compiler-optimizations.cpp:150:17: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
            b[i]++;
                ^
compiler-optimizations.cpp:154:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:148:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:147:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_gvn(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:149:20: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (a[i+1] > 0) {
                   ^
compiler-optimizations.cpp:150:17: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
            b[i]++;
                ^
compiler-optimizations.cpp:149:16: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (a[i+1] > 0) {
               ^
compiler-optimizations.cpp:150:17: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
            b[i]++;
                ^
compiler-optimizations.cpp:147:1: remark: 30 instructions in function [-Rpass-analysis=asm-printer]
void test_gvn(int* a, int* b, int n) {
^
compiler-optimizations.cpp:156:6: remark: Canonicalize natural loops: IR instruction count changed from 2823 to 2824; Delta: 1 [-Rpass-analysis=size-info]
void test_gvn_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:156:6: remark: Canonicalize natural loops: Function: _Z14test_gvn_fixedPiS_i: IR instruction count changed from 53 to 54; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:6: remark: Loop Strength Reduction: IR instruction count changed from 2824 to 2825; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:6: remark: Loop Strength Reduction: Function: _Z14test_gvn_fixedPiS_i: IR instruction count changed from 54 to 55; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:6: remark: CodeGen Prepare: IR instruction count changed from 2825 to 2850; Delta: 25 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:6: remark: CodeGen Prepare: Function: _Z14test_gvn_fixedPiS_i: IR instruction count changed from 54 to 80; Delta: 26 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 0 to 51; Delta: 51 [-Rpass-analysis=size-info]
void test_gvn_fixed(int* a, int* b, int n) {
^
compiler-optimizations.cpp:156:1: remark: Eliminate PHI nodes for register allocation: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 51 to 55; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:1: remark: Two-Address instruction pass: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 55 to 59; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:1: remark: Simple Register Coalescing: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 59 to 45; Delta: -14 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:157:5: remark: 1 virtual registers copies 1.022500e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:156:1: remark: 2 virtual registers copies 1.052500e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_gvn_fixed(int* a, int* b, int n) {
^
compiler-optimizations.cpp:156:1: remark: Virtual Register Rewriter: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 45 to 42; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:156:1: remark: Control Flow Optimizer: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 42 to 35; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:156:1: remark: Branch Probability Basic Block Placement: Function: _Z14test_gvn_fixedPiS_i: MI Instruction count changed from 35 to 36; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:157:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:157:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:156:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_gvn_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:159:13: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (a_val > 0) {
            ^
compiler-optimizations.cpp:158:22: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        auto a_val = a[i + 1];
                     ^
compiler-optimizations.cpp:160:17: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
            b[i]++;
                ^
compiler-optimizations.cpp:164:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:157:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:156:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_gvn_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:158:22: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        auto a_val = a[i + 1];
                     ^
compiler-optimizations.cpp:160:17: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
            b[i]++;
                ^
compiler-optimizations.cpp:158:26: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
        auto a_val = a[i + 1];
                         ^
compiler-optimizations.cpp:160:17: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
            b[i]++;
                ^
compiler-optimizations.cpp:156:1: remark: 36 instructions in function [-Rpass-analysis=asm-printer]
void test_gvn_fixed(int* a, int* b, int n) {
^
compiler-optimizations.cpp:166:6: remark: Canonicalize natural loops: IR instruction count changed from 2850 to 2852; Delta: 2 [-Rpass-analysis=size-info]
void test_gvn1(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:166:6: remark: Canonicalize natural loops: Function: _Z9test_gvn1PiS_i: IR instruction count changed from 88 to 90; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:6: remark: Loop Strength Reduction: IR instruction count changed from 2852 to 2862; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:6: remark: Loop Strength Reduction: Function: _Z9test_gvn1PiS_i: IR instruction count changed from 90 to 100; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:6: remark: CodeGen Prepare: IR instruction count changed from 2862 to 2875; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:6: remark: CodeGen Prepare: Function: _Z9test_gvn1PiS_i: IR instruction count changed from 90 to 113; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 0 to 90; Delta: 90 [-Rpass-analysis=size-info]
void test_gvn1(int* a, int* b, int n) {
^
compiler-optimizations.cpp:166:1: remark: X86 Fixup SetCC: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 90 to 91; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: Process Implicit Definitions: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 91 to 89; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: Eliminate PHI nodes for register allocation: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 89 to 99; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: Two-Address instruction pass: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 99 to 125; Delta: 26 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: Simple Register Coalescing: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 125 to 83; Delta: -42 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:167:5: remark: 4 virtual registers copies 2.505882e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:166:1: remark: 9 virtual registers copies 2.616177e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_gvn1(int* a, int* b, int n) {
^
compiler-optimizations.cpp:166:1: remark: Virtual Register Rewriter: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 83 to 81; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:166:1: remark: Control Flow Optimizer: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 81 to 75; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: Branch Probability Basic Block Placement: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 75 to 77; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:166:1: remark: X86 LEA Fixup: Function: _Z9test_gvn1PiS_i: MI Instruction count changed from 77 to 78; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:167:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:167:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:166:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_gvn1(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:167:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:167:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:168:13: remark: BasicBlock: : 27 [-Rpass-analysis=asm-printer]
        if (a[i] > 0) {
            ^
compiler-optimizations.cpp:167:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:168:13: remark: BasicBlock: : 13 [-Rpass-analysis=asm-printer]
        if (a[i] > 0) {
            ^
compiler-optimizations.cpp:167:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:168:13: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
        if (a[i] > 0) {
            ^
compiler-optimizations.cpp:174:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:166:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_gvn1(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:166:1: remark: 78 instructions in function [-Rpass-analysis=asm-printer]
void test_gvn1(int* a, int* b, int n) {
^
compiler-optimizations.cpp:176:6: remark: Canonicalize natural loops: IR instruction count changed from 2875 to 2877; Delta: 2 [-Rpass-analysis=size-info]
void test_gvn2(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:176:6: remark: Canonicalize natural loops: Function: _Z9test_gvn2PiS_i: IR instruction count changed from 74 to 76; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:6: remark: Loop Strength Reduction: IR instruction count changed from 2877 to 2887; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:6: remark: Loop Strength Reduction: Function: _Z9test_gvn2PiS_i: IR instruction count changed from 76 to 86; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:6: remark: CodeGen Prepare: IR instruction count changed from 2887 to 2900; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:6: remark: CodeGen Prepare: Function: _Z9test_gvn2PiS_i: IR instruction count changed from 76 to 99; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 0 to 69; Delta: 69 [-Rpass-analysis=size-info]
void test_gvn2(int* a, int* b, int n) {
^
compiler-optimizations.cpp:176:1: remark: Eliminate PHI nodes for register allocation: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 69 to 79; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:1: remark: Two-Address instruction pass: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 79 to 92; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:1: remark: Simple Register Coalescing: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 92 to 60; Delta: -32 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:1: remark: 3 virtual registers copies 8.088235e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:176:1: remark: Virtual Register Rewriter: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 60 to 58; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:176:1: remark: Control Flow Optimizer: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 58 to 52; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:176:1: remark: Branch Probability Basic Block Placement: Function: _Z9test_gvn2PiS_i: MI Instruction count changed from 52 to 54; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:177:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:177:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:176:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_gvn2(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:177:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:177:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:178:16: remark: BasicBlock: : 15 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + 1;
               ^
compiler-optimizations.cpp:177:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:178:16: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + 1;
               ^
compiler-optimizations.cpp:177:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:178:14: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
        a[i] = a[i] + 1;
             ^
compiler-optimizations.cpp:180:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:176:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_gvn2(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:176:1: remark: 54 instructions in function [-Rpass-analysis=asm-printer]
void test_gvn2(int* a, int* b, int n) {
^
compiler-optimizations.cpp:182:6: remark: Canonicalize natural loops: IR instruction count changed from 2900 to 2901; Delta: 1 [-Rpass-analysis=size-info]
void test_licm(int * val, int n, int* pivot) {
     ^
compiler-optimizations.cpp:182:6: remark: Canonicalize natural loops: Function: _Z9test_licmPiiS_: IR instruction count changed from 47 to 48; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:6: remark: Loop Strength Reduction: IR instruction count changed from 2901 to 2900; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:6: remark: Loop Strength Reduction: Function: _Z9test_licmPiiS_: IR instruction count changed from 48 to 47; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:6: remark: CodeGen Prepare: IR instruction count changed from 2900 to 2917; Delta: 17 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:6: remark: CodeGen Prepare: Function: _Z9test_licmPiiS_: IR instruction count changed from 48 to 64; Delta: 16 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z9test_licmPiiS_: MI Instruction count changed from 0 to 55; Delta: 55 [-Rpass-analysis=size-info]
void test_licm(int * val, int n, int* pivot) {
^
compiler-optimizations.cpp:182:1: remark: Eliminate PHI nodes for register allocation: Function: _Z9test_licmPiiS_: MI Instruction count changed from 55 to 67; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:1: remark: Two-Address instruction pass: Function: _Z9test_licmPiiS_: MI Instruction count changed from 67 to 72; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:1: remark: Simple Register Coalescing: Function: _Z9test_licmPiiS_: MI Instruction count changed from 72 to 44; Delta: -28 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:1: remark: 1 virtual registers copies 3.137255e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:182:1: remark: Virtual Register Rewriter: Function: _Z9test_licmPiiS_: MI Instruction count changed from 44 to 41; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:182:1: remark: Control Flow Optimizer: Function: _Z9test_licmPiiS_: MI Instruction count changed from 41 to 34; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:182:1: remark: Branch Probability Basic Block Placement: Function: _Z9test_licmPiiS_: MI Instruction count changed from 34 to 39; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:183:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:183:23: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:182:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_licm(int * val, int n, int* pivot) {
     ^
compiler-optimizations.cpp:184:13: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (val[i] > *pivot) {
            ^
compiler-optimizations.cpp:184:13: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:185:19: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
            val[i]++;
                  ^
compiler-optimizations.cpp:188:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:183:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:183:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:184:13: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (val[i] > *pivot) {
            ^
compiler-optimizations.cpp:184:13: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:185:19: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
            val[i]++;
                  ^
compiler-optimizations.cpp:185:19: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:182:1: remark: 39 instructions in function [-Rpass-analysis=asm-printer]
void test_licm(int * val, int n, int* pivot) {
^
compiler-optimizations.cpp:192:6: remark: Canonicalize natural loops: IR instruction count changed from 2917 to 2918; Delta: 1 [-Rpass-analysis=size-info]
void test_licm2(int * val, int n, int pivot) {
     ^
compiler-optimizations.cpp:192:6: remark: Canonicalize natural loops: Function: _Z10test_licm2Piii: IR instruction count changed from 106 to 107; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:6: remark: Loop Strength Reduction: IR instruction count changed from 2918 to 2928; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:6: remark: Loop Strength Reduction: Function: _Z10test_licm2Piii: IR instruction count changed from 107 to 117; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:6: remark: CodeGen Prepare: IR instruction count changed from 2928 to 2945; Delta: 17 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:6: remark: CodeGen Prepare: Function: _Z10test_licm2Piii: IR instruction count changed from 107 to 134; Delta: 27 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z10test_licm2Piii: MI Instruction count changed from 0 to 132; Delta: 132 [-Rpass-analysis=size-info]
void test_licm2(int * val, int n, int pivot) {
^
compiler-optimizations.cpp:192:1: remark: Machine Common Subexpression Elimination: Function: _Z10test_licm2Piii: MI Instruction count changed from 132 to 125; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: Eliminate PHI nodes for register allocation: Function: _Z10test_licm2Piii: MI Instruction count changed from 125 to 131; Delta: 6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: Two-Address instruction pass: Function: _Z10test_licm2Piii: MI Instruction count changed from 131 to 146; Delta: 15 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: Simple Register Coalescing: Function: _Z10test_licm2Piii: MI Instruction count changed from 146 to 112; Delta: -34 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:194:5: remark: 2 virtual registers copies 2.040000e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:192:1: remark: 3 virtual registers copies 2.072000e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_licm2(int * val, int n, int pivot) {
^
compiler-optimizations.cpp:192:1: remark: Virtual Register Rewriter: Function: _Z10test_licm2Piii: MI Instruction count changed from 112 to 110; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: 24 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:192:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z10test_licm2Piii: MI Instruction count changed from 110 to 122; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: Control Flow Optimizer: Function: _Z10test_licm2Piii: MI Instruction count changed from 122 to 108; Delta: -14 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: Branch Probability Basic Block Placement: Function: _Z10test_licm2Piii: MI Instruction count changed from 108 to 131; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:1: remark: Check CFA info and insert CFI instructions if needed: Function: _Z10test_licm2Piii: MI Instruction count changed from 131 to 132; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:192:6: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
void test_licm2(int * val, int n, int pivot) {
     ^
compiler-optimizations.cpp:192:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:192:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:194:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:194:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:195:13: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        if (val[i] > pivot) {
            ^
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (val[i] > pivot) {
                   ^
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:192:6: note: could not determine the original source location for compiler-optimizations.cpp:0:0
void test_licm2(int * val, int n, int pivot) {
     ^
compiler-optimizations.cpp:192:6: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
void test_licm2(int * val, int n, int pivot) {
     ^
compiler-optimizations.cpp:192:6: note: could not determine the original source location for compiler-optimizations.cpp:0:0
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (val[i] > pivot) {
                   ^
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:195:20: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:194:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:199:1: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:194:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:195:13: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (val[i] > pivot) {
            ^
compiler-optimizations.cpp:196:19: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
            val[i]++;
                  ^
compiler-optimizations.cpp:192:1: remark: 123 instructions in function [-Rpass-analysis=asm-printer]
void test_licm2(int * val, int n, int pivot) {
^
compiler-optimizations.cpp:206:6: remark: Canonicalize natural loops: IR instruction count changed from 2945 to 2946; Delta: 1 [-Rpass-analysis=size-info]
void test_pointeraliasing(string* str) {
     ^
compiler-optimizations.cpp:206:6: remark: Canonicalize natural loops: Function: _Z20test_pointeraliasingP6string: IR instruction count changed from 16 to 17; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:6: remark: CodeGen Prepare: IR instruction count changed from 2946 to 2948; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:6: remark: CodeGen Prepare: Function: _Z20test_pointeraliasingP6string: IR instruction count changed from 17 to 19; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z20test_pointeraliasingP6string: MI Instruction count changed from 0 to 16; Delta: 16 [-Rpass-analysis=size-info]
void test_pointeraliasing(string* str) {
^
compiler-optimizations.cpp:206:1: remark: Eliminate PHI nodes for register allocation: Function: _Z20test_pointeraliasingP6string: MI Instruction count changed from 16 to 18; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:1: remark: Two-Address instruction pass: Function: _Z20test_pointeraliasingP6string: MI Instruction count changed from 18 to 19; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:1: remark: Simple Register Coalescing: Function: _Z20test_pointeraliasingP6string: MI Instruction count changed from 19 to 14; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:1: remark: Virtual Register Rewriter: Function: _Z20test_pointeraliasingP6string: MI Instruction count changed from 14 to 13; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:206:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:206:1: remark: Control Flow Optimizer: Function: _Z20test_pointeraliasingP6string: MI Instruction count changed from 13 to 10; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:207:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < str->n; i++) {
                      ^
compiler-optimizations.cpp:206:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_pointeraliasing(string* str) {
     ^
compiler-optimizations.cpp:208:14: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        str->p[i] = '\0';
             ^
compiler-optimizations.cpp:210:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:206:1: remark: 10 instructions in function [-Rpass-analysis=asm-printer]
void test_pointeraliasing(string* str) {
^
compiler-optimizations.cpp:212:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z26test_pointeraliasing_fixedP6string: MI Instruction count changed from 0 to 17; Delta: 17 [-Rpass-analysis=size-info]
void test_pointeraliasing_fixed(string* str) {
^
compiler-optimizations.cpp:212:1: remark: Remove dead machine instructions: Function: _Z26test_pointeraliasing_fixedP6string: MI Instruction count changed from 17 to 16; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:212:1: remark: Simple Register Coalescing: Function: _Z26test_pointeraliasing_fixedP6string: MI Instruction count changed from 16 to 13; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:212:1: remark: Virtual Register Rewriter: Function: _Z26test_pointeraliasing_fixedP6string: MI Instruction count changed from 13 to 10; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:212:1: remark: 8 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:212:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z26test_pointeraliasing_fixedP6string: MI Instruction count changed from 10 to 12; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:212:1: remark: Control Flow Optimizer: Function: _Z26test_pointeraliasing_fixedP6string: MI Instruction count changed from 12 to 11; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:212:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_pointeraliasing_fixed(string* str) {
     ^
compiler-optimizations.cpp:214:20: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    char* p = str->p;
                   ^
compiler-optimizations.cpp:218:1: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:212:1: remark: 9 instructions in function [-Rpass-analysis=asm-printer]
void test_pointeraliasing_fixed(string* str) {
^
compiler-optimizations.cpp:220:6: remark: Canonicalize natural loops: IR instruction count changed from 2948 to 2953; Delta: 5 [-Rpass-analysis=size-info]
void test_pointeraliasing2(int * v1, int* v2, int n) {
     ^
compiler-optimizations.cpp:220:6: remark: Canonicalize natural loops: Function: _Z21test_pointeraliasing2PiS_i: IR instruction count changed from 88 to 93; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:6: remark: Loop Strength Reduction: IR instruction count changed from 2953 to 2958; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:6: remark: Loop Strength Reduction: Function: _Z21test_pointeraliasing2PiS_i: IR instruction count changed from 93 to 98; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:6: remark: Loop Strength Reduction: IR instruction count changed from 2958 to 2960; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:6: remark: Loop Strength Reduction: Function: _Z21test_pointeraliasing2PiS_i: IR instruction count changed from 98 to 100; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:6: remark: CodeGen Prepare: IR instruction count changed from 2960 to 2985; Delta: 25 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:6: remark: CodeGen Prepare: Function: _Z21test_pointeraliasing2PiS_i: IR instruction count changed from 93 to 125; Delta: 32 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 0 to 83; Delta: 83 [-Rpass-analysis=size-info]
void test_pointeraliasing2(int * v1, int* v2, int n) {
^
compiler-optimizations.cpp:220:1: remark: Early Tail Duplication: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 83 to 82; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: Machine code sinking: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 82 to 81; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: Process Implicit Definitions: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 81 to 80; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: Eliminate PHI nodes for register allocation: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 80 to 93; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: Two-Address instruction pass: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 93 to 106; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: Simple Register Coalescing: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 106 to 69; Delta: -37 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: 4 virtual registers copies 1.568627e+00 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:220:1: remark: Virtual Register Rewriter: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 69 to 66; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:220:1: remark: Control Flow Optimizer: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 66 to 59; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: Branch Probability Basic Block Placement: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 59 to 58; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:220:1: remark: X86 LEA Fixup: Function: _Z21test_pointeraliasing2PiS_i: MI Instruction count changed from 58 to 59; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:221:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:221:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:221:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:220:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_pointeraliasing2(int * v1, int* v2, int n) {
     ^
compiler-optimizations.cpp:220:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:221:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:222:17: remark: BasicBlock: : 11 [-Rpass-analysis=asm-printer]
        v1[i] = v2[2*i];
                ^
compiler-optimizations.cpp:221:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:222:17: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
        v1[i] = v2[2*i];
                ^
compiler-optimizations.cpp:221:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:222:17: remark: BasicBlock: : 11 [-Rpass-analysis=asm-printer]
        v1[i] = v2[2*i];
                ^
compiler-optimizations.cpp:224:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:220:1: remark: 59 instructions in function [-Rpass-analysis=asm-printer]
void test_pointeraliasing2(int * v1, int* v2, int n) {
^
compiler-optimizations.cpp:226:6: remark: Canonicalize natural loops: IR instruction count changed from 2985 to 2987; Delta: 2 [-Rpass-analysis=size-info]
void test_induction_variables(int* a, int n) {
     ^
compiler-optimizations.cpp:226:6: remark: Canonicalize natural loops: Function: _Z24test_induction_variablesPii: IR instruction count changed from 69 to 71; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:6: remark: Loop Strength Reduction: IR instruction count changed from 2987 to 2989; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:6: remark: Loop Strength Reduction: Function: _Z24test_induction_variablesPii: IR instruction count changed from 71 to 73; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:6: remark: Loop Strength Reduction: IR instruction count changed from 2989 to 2992; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:6: remark: Loop Strength Reduction: Function: _Z24test_induction_variablesPii: IR instruction count changed from 73 to 76; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:6: remark: CodeGen Prepare: IR instruction count changed from 2992 to 2997; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:6: remark: CodeGen Prepare: Function: _Z24test_induction_variablesPii: IR instruction count changed from 71 to 81; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 0 to 77; Delta: 77 [-Rpass-analysis=size-info]
void test_induction_variables(int* a, int n) {
^
compiler-optimizations.cpp:226:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 77 to 79; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: Process Implicit Definitions: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 79 to 78; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: Eliminate PHI nodes for register allocation: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 78 to 94; Delta: 16 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: Two-Address instruction pass: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 94 to 114; Delta: 20 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: Simple Register Coalescing: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 114 to 69; Delta: -45 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:227:5: remark: 3 virtual registers copies 1.879412e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:226:1: remark: 7 virtual registers copies 1.975000e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_induction_variables(int* a, int n) {
^
compiler-optimizations.cpp:226:1: remark: Virtual Register Rewriter: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 69 to 67; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:226:1: remark: Control Flow Optimizer: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 67 to 61; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:226:1: remark: Branch Probability Basic Block Placement: Function: _Z24test_induction_variablesPii: MI Instruction count changed from 61 to 63; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:227:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:227:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:226:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_induction_variables(int* a, int n) {
     ^
compiler-optimizations.cpp:227:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:227:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:228:18: remark: BasicBlock: : 18 [-Rpass-analysis=asm-printer]
        a[i] = i * 3;
                 ^
compiler-optimizations.cpp:227:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:228:18: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
        a[i] = i * 3;
                 ^
compiler-optimizations.cpp:227:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:227:5: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:228:14: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
        a[i] = i * 3;
             ^
compiler-optimizations.cpp:230:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:226:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
void test_induction_variables(int* a, int n) {
     ^
compiler-optimizations.cpp:226:1: remark: 63 instructions in function [-Rpass-analysis=asm-printer]
void test_induction_variables(int* a, int n) {
^
compiler-optimizations.cpp:232:6: remark: Canonicalize natural loops: IR instruction count changed from 2997 to 3000; Delta: 3 [-Rpass-analysis=size-info]
void test_loop_unrolling(int* a, int * b, int n) {
     ^
compiler-optimizations.cpp:232:6: remark: Canonicalize natural loops: Function: _Z19test_loop_unrollingPiS_i: IR instruction count changed from 58 to 61; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:6: remark: Loop Strength Reduction: IR instruction count changed from 3000 to 3002; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:6: remark: Loop Strength Reduction: Function: _Z19test_loop_unrollingPiS_i: IR instruction count changed from 61 to 63; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:6: remark: CodeGen Prepare: IR instruction count changed from 3002 to 3000; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 0 to 64; Delta: 64 [-Rpass-analysis=size-info]
void test_loop_unrolling(int* a, int * b, int n) {
^
compiler-optimizations.cpp:232:1: remark: Process Implicit Definitions: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 64 to 63; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:1: remark: Eliminate PHI nodes for register allocation: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 63 to 73; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:1: remark: Two-Address instruction pass: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 73 to 83; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:1: remark: Simple Register Coalescing: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 83 to 47; Delta: -36 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:233:5: remark: 1 virtual registers copies 1.276000e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:233:5: remark: 1 virtual registers copies 1.020000e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
compiler-optimizations.cpp:232:1: remark: 3 virtual registers copies 2.360000e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_loop_unrolling(int* a, int * b, int n) {
^
compiler-optimizations.cpp:232:1: remark: Virtual Register Rewriter: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 47 to 44; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:232:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:232:1: remark: Control Flow Optimizer: Function: _Z19test_loop_unrollingPiS_i: MI Instruction count changed from 44 to 39; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:233:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:233:23: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:232:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_loop_unrolling(int* a, int * b, int n) {
     ^
compiler-optimizations.cpp:233:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:234:16: remark: BasicBlock: : 16 [-Rpass-analysis=asm-printer]
        a[i] = b[i/2];
               ^
compiler-optimizations.cpp:233:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:234:16: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
        a[i] = b[i/2];
               ^
compiler-optimizations.cpp:236:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:232:1: remark: 39 instructions in function [-Rpass-analysis=asm-printer]
void test_loop_unrolling(int* a, int * b, int n) {
^
compiler-optimizations.cpp:238:6: remark: Canonicalize natural loops: IR instruction count changed from 3000 to 3002; Delta: 2 [-Rpass-analysis=size-info]
void test_loop_unrolling_fixed(int* a, int * b, int n) {
     ^
compiler-optimizations.cpp:238:6: remark: Canonicalize natural loops: Function: _Z25test_loop_unrolling_fixedPiS_i: IR instruction count changed from 87 to 89; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: Loop Strength Reduction: IR instruction count changed from 3002 to 3007; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: Loop Strength Reduction: Function: _Z25test_loop_unrolling_fixedPiS_i: IR instruction count changed from 89 to 94; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: Loop Strength Reduction: IR instruction count changed from 3007 to 3010; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: Loop Strength Reduction: Function: _Z25test_loop_unrolling_fixedPiS_i: IR instruction count changed from 94 to 97; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: CodeGen Prepare: IR instruction count changed from 3010 to 3025; Delta: 15 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: CodeGen Prepare: Function: _Z25test_loop_unrolling_fixedPiS_i: IR instruction count changed from 89 to 112; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 0 to 78; Delta: 78 [-Rpass-analysis=size-info]
void test_loop_unrolling_fixed(int* a, int * b, int n) {
^
compiler-optimizations.cpp:238:1: remark: Early Tail Duplication: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 78 to 77; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: Process Implicit Definitions: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 77 to 76; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: Eliminate PHI nodes for register allocation: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 76 to 85; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: Two-Address instruction pass: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 85 to 94; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: Simple Register Coalescing: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 94 to 65; Delta: -29 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: 3 virtual registers copies 1.062500e+00 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:238:1: remark: Virtual Register Rewriter: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 65 to 63; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:238:1: remark: Control Flow Optimizer: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 63 to 56; Delta: -7 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:1: remark: Branch Probability Basic Block Placement: Function: _Z25test_loop_unrolling_fixedPiS_i: MI Instruction count changed from 56 to 54; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:238:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_loop_unrolling_fixed(int* a, int * b, int n) {
     ^
compiler-optimizations.cpp:238:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:239:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n/2; i++) {
    ^
compiler-optimizations.cpp:238:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_loop_unrolling_fixed(int* a, int * b, int n) {
     ^
compiler-optimizations.cpp:238:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:239:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n/2; i++) {
    ^
compiler-optimizations.cpp:240:20: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
        a[2 * i] = b[i];
                   ^
compiler-optimizations.cpp:239:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n/2; i++) {
    ^
compiler-optimizations.cpp:240:20: remark: BasicBlock: : 12 [-Rpass-analysis=asm-printer]
        a[2 * i] = b[i];
                   ^
compiler-optimizations.cpp:239:5: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n/2; i++) {
    ^
compiler-optimizations.cpp:240:20: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
        a[2 * i] = b[i];
                   ^
compiler-optimizations.cpp:239:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n/2; i++) {
    ^
compiler-optimizations.cpp:243:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:238:1: remark: 53 instructions in function [-Rpass-analysis=asm-printer]
void test_loop_unrolling_fixed(int* a, int * b, int n) {
^
compiler-optimizations.cpp:245:6: remark: Canonicalize natural loops: IR instruction count changed from 3025 to 3030; Delta: 5 [-Rpass-analysis=size-info]
void test_vectorization(int* a, int* b, int* c, int n) {
     ^
compiler-optimizations.cpp:245:6: remark: Canonicalize natural loops: Function: _Z18test_vectorizationPiS_S_i: IR instruction count changed from 156 to 161; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:6: remark: Loop Strength Reduction: IR instruction count changed from 3030 to 3039; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:6: remark: Loop Strength Reduction: Function: _Z18test_vectorizationPiS_S_i: IR instruction count changed from 161 to 170; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:6: remark: Loop Strength Reduction: IR instruction count changed from 3039 to 3050; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:6: remark: Loop Strength Reduction: Function: _Z18test_vectorizationPiS_S_i: IR instruction count changed from 170 to 181; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:6: remark: CodeGen Prepare: IR instruction count changed from 3050 to 3101; Delta: 51 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:6: remark: CodeGen Prepare: Function: _Z18test_vectorizationPiS_S_i: IR instruction count changed from 161 to 232; Delta: 71 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 0 to 124; Delta: 124 [-Rpass-analysis=size-info]
void test_vectorization(int* a, int* b, int* c, int n) {
^
compiler-optimizations.cpp:245:1: remark: Early Tail Duplication: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 124 to 123; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: Peephole Optimizations: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 123 to 122; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: Eliminate PHI nodes for register allocation: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 122 to 140; Delta: 18 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: Two-Address instruction pass: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 140 to 164; Delta: 24 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: Simple Register Coalescing: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 164 to 111; Delta: -53 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: 5 virtual registers copies 1.492647e+00 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:245:1: remark: Virtual Register Rewriter: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 111 to 107; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:245:1: remark: Control Flow Optimizer: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 107 to 97; Delta: -10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:245:1: remark: Branch Probability Basic Block Placement: Function: _Z18test_vectorizationPiS_S_i: MI Instruction count changed from 97 to 99; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:246:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:246:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:245:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_vectorization(int* a, int* b, int* c, int n) {
     ^
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:247:23: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        a[i] = b[i] + c[i];
                      ^
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:247:23: remark: BasicBlock: : 16 [-Rpass-analysis=asm-printer]
        a[i] = b[i] + c[i];
                      ^
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 14 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:247:16: remark: BasicBlock: : 19 [-Rpass-analysis=asm-printer]
        a[i] = b[i] + c[i];
               ^
compiler-optimizations.cpp:246:29: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                            ^
compiler-optimizations.cpp:247:16: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
        a[i] = b[i] + c[i];
               ^
compiler-optimizations.cpp:246:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:249:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:245:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_vectorization(int* a, int* b, int* c, int n) {
     ^
compiler-optimizations.cpp:245:1: remark: 99 instructions in function [-Rpass-analysis=asm-printer]
void test_vectorization(int* a, int* b, int* c, int n) {
^
compiler-optimizations.cpp:251:8: remark: Canonicalize natural loops: IR instruction count changed from 3101 to 3104; Delta: 3 [-Rpass-analysis=size-info]
double test_vectorization_reduction(double* a, int n) {
       ^
compiler-optimizations.cpp:251:8: remark: Canonicalize natural loops: Function: _Z28test_vectorization_reductionPdi: IR instruction count changed from 64 to 67; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:8: remark: Loop Strength Reduction: IR instruction count changed from 3104 to 3103; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:8: remark: Loop Strength Reduction: Function: _Z28test_vectorization_reductionPdi: IR instruction count changed from 67 to 66; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:8: remark: Loop Strength Reduction: IR instruction count changed from 3103 to 3102; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:8: remark: Loop Strength Reduction: Function: _Z28test_vectorization_reductionPdi: IR instruction count changed from 66 to 65; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:8: remark: CodeGen Prepare: IR instruction count changed from 3102 to 3123; Delta: 21 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:8: remark: CodeGen Prepare: Function: _Z28test_vectorization_reductionPdi: IR instruction count changed from 67 to 86; Delta: 19 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 0 to 59; Delta: 59 [-Rpass-analysis=size-info]
double test_vectorization_reduction(double* a, int n) {
^
compiler-optimizations.cpp:251:1: remark: Process Implicit Definitions: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 59 to 58; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:1: remark: Eliminate PHI nodes for register allocation: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 58 to 75; Delta: 17 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:1: remark: Two-Address instruction pass: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 75 to 88; Delta: 13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:1: remark: Simple Register Coalescing: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 88 to 43; Delta: -45 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:1: remark: 1 virtual registers copies 6.000000e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:251:1: remark: Virtual Register Rewriter: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 43 to 40; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:251:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:251:1: remark: Control Flow Optimizer: Function: _Z28test_vectorization_reductionPdi: MI Instruction count changed from 40 to 36; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:253:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:253:23: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:251:8: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
double test_vectorization_reduction(double* a, int n) {
       ^
compiler-optimizations.cpp:251:8: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:253:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:254:13: remark: BasicBlock: : 11 [-Rpass-analysis=asm-printer]
        sum += a[i];
            ^
compiler-optimizations.cpp:253:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:253:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:254:13: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
        sum += a[i];
            ^
compiler-optimizations.cpp:257:5: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
    return sum;
    ^
compiler-optimizations.cpp:251:1: remark: 36 instructions in function [-Rpass-analysis=asm-printer]
double test_vectorization_reduction(double* a, int n) {
^
compiler-optimizations.cpp:262:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z6square7complex: MI Instruction count changed from 0 to 10; Delta: 10 [-Rpass-analysis=size-info]
complex square(complex in) {
^
compiler-optimizations.cpp:262:1: remark: Two-Address instruction pass: Function: _Z6square7complex: MI Instruction count changed from 10 to 15; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:262:1: remark: Simple Register Coalescing: Function: _Z6square7complex: MI Instruction count changed from 15 to 12; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:262:1: remark: 2 virtual registers copies 2.000000e+00 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:262:1: remark: Virtual Register Rewriter: Function: _Z6square7complex: MI Instruction count changed from 12 to 9; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:262:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:264:31: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
    result.re = in.re * in.re - in.im * in.im;
                              ^
compiler-optimizations.cpp:262:1: remark: 9 instructions in function [-Rpass-analysis=asm-printer]
complex square(complex in) {
^
compiler-optimizations.cpp:269:6: remark: Canonicalize natural loops: IR instruction count changed from 3123 to 3124; Delta: 1 [-Rpass-analysis=size-info]
void test_interleaved_data(complex* a, int n) {
     ^
compiler-optimizations.cpp:269:6: remark: Canonicalize natural loops: Function: _Z21test_interleaved_dataP7complexi: IR instruction count changed from 46 to 47; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:6: remark: Loop Strength Reduction: IR instruction count changed from 3124 to 3129; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:6: remark: Loop Strength Reduction: Function: _Z21test_interleaved_dataP7complexi: IR instruction count changed from 47 to 52; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:6: remark: Loop Strength Reduction: IR instruction count changed from 3129 to 3127; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:6: remark: Loop Strength Reduction: Function: _Z21test_interleaved_dataP7complexi: IR instruction count changed from 52 to 50; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:6: remark: CodeGen Prepare: IR instruction count changed from 3127 to 3126; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:6: remark: CodeGen Prepare: Function: _Z21test_interleaved_dataP7complexi: IR instruction count changed from 47 to 49; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 0 to 58; Delta: 58 [-Rpass-analysis=size-info]
void test_interleaved_data(complex* a, int n) {
^
compiler-optimizations.cpp:269:1: remark: Eliminate PHI nodes for register allocation: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 58 to 68; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:1: remark: Two-Address instruction pass: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 68 to 89; Delta: 21 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:1: remark: Simple Register Coalescing: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 89 to 58; Delta: -31 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:270:5: remark: 2 virtual registers copies 3.064000e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:270:5: remark: 4 virtual registers copies 4.080000e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
compiler-optimizations.cpp:269:1: remark: 9 virtual registers copies 7.240000e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_interleaved_data(complex* a, int n) {
^
compiler-optimizations.cpp:269:1: remark: Virtual Register Rewriter: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 58 to 54; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:269:1: remark: Control Flow Optimizer: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 54 to 49; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:269:1: remark: X86 LEA Fixup: Function: _Z21test_interleaved_dataP7complexi: MI Instruction count changed from 49 to 50; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:270:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:270:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:269:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_interleaved_data(complex* a, int n) {
     ^
compiler-optimizations.cpp:270:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:271:23: remark: BasicBlock: : 19 [-Rpass-analysis=asm-printer]
        a[i] = square(a[i]);
                      ^
compiler-optimizations.cpp:270:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:270:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:271:23: remark: BasicBlock: : 13 [-Rpass-analysis=asm-printer]
        a[i] = square(a[i]);
                      ^
compiler-optimizations.cpp:273:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:269:1: remark: 50 instructions in function [-Rpass-analysis=asm-printer]
void test_interleaved_data(complex* a, int n) {
^
compiler-optimizations.cpp:275:6: remark: Canonicalize natural loops: IR instruction count changed from 3126 to 3129; Delta: 3 [-Rpass-analysis=size-info]
void test_interchange(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:275:6: remark: Canonicalize natural loops: Function: _Z16test_interchangePiS_i: IR instruction count changed from 60 to 63; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:6: remark: Loop Strength Reduction: IR instruction count changed from 3129 to 3140; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:6: remark: Loop Strength Reduction: Function: _Z16test_interchangePiS_i: IR instruction count changed from 63 to 74; Delta: 11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 0 to 61; Delta: 61 [-Rpass-analysis=size-info]
void test_interchange(int* a, int* b, int n) {
^
compiler-optimizations.cpp:275:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 61 to 59; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: Eliminate PHI nodes for register allocation: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 59 to 69; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: Two-Address instruction pass: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 69 to 83; Delta: 14 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: Simple Register Coalescing: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 83 to 52; Delta: -31 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:276:5: remark: 2 virtual registers copies 1.587500e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:275:1: remark: 3 virtual registers copies 1.637500e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_interchange(int* a, int* b, int n) {
^
compiler-optimizations.cpp:275:1: remark: Virtual Register Rewriter: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 52 to 49; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: 40 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:275:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 49 to 74; Delta: 25 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: Control Flow Optimizer: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 74 to 70; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: Branch Probability Basic Block Placement: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 70 to 72; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:275:1: remark: X86 LEA Fixup: Function: _Z16test_interchangePiS_i: MI Instruction count changed from 72 to 74; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:276:23: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
                      ^
compiler-optimizations.cpp:276:5: remark: BasicBlock: : 14 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:276:29: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
                            ^
compiler-optimizations.cpp:275:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_interchange(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:275:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:275:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:278:28: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                           ^
compiler-optimizations.cpp:275:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_interchange(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:278:32: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                               ^
compiler-optimizations.cpp:281:1: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:275:1: remark: 59 instructions in function [-Rpass-analysis=asm-printer]
void test_interchange(int* a, int* b, int n) {
^
compiler-optimizations.cpp:283:6: remark: Canonicalize natural loops: IR instruction count changed from 3140 to 3145; Delta: 5 [-Rpass-analysis=size-info]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:283:6: remark: Canonicalize natural loops: Function: _Z22test_interchange_fixedPiS_i: IR instruction count changed from 168 to 173; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: Loop Strength Reduction: IR instruction count changed from 3145 to 3165; Delta: 20 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: Loop Strength Reduction: Function: _Z22test_interchange_fixedPiS_i: IR instruction count changed from 173 to 193; Delta: 20 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: Loop Strength Reduction: IR instruction count changed from 3165 to 3177; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: Loop Strength Reduction: Function: _Z22test_interchange_fixedPiS_i: IR instruction count changed from 193 to 205; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: CodeGen Prepare: IR instruction count changed from 3177 to 3174; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: CodeGen Prepare: Function: _Z22test_interchange_fixedPiS_i: IR instruction count changed from 173 to 202; Delta: 29 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 0 to 154; Delta: 154 [-Rpass-analysis=size-info]
void test_interchange_fixed(int* a, int* b, int n) {
^
compiler-optimizations.cpp:283:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 154 to 152; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Machine Common Subexpression Elimination: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 152 to 149; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Peephole Optimizations: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 149 to 148; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Eliminate PHI nodes for register allocation: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 148 to 176; Delta: 28 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Two-Address instruction pass: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 176 to 210; Delta: 34 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Simple Register Coalescing: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 210 to 143; Delta: -67 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:284:5: remark: 3 spills 3.181250e+01 total spills cost 10 reloads 6.550000e+01 total reloads cost 8 folded reloads 5.956250e+01 total folded reloads cost 2 virtual registers copies 2.993750e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int j = 0; j < n; j++) {
    ^
compiler-optimizations.cpp:283:1: remark: 14 spills 3.781250e+01 total spills cost 11 reloads 6.600000e+01 total reloads cost 8 folded reloads 5.956250e+01 total folded reloads cost 9 virtual registers copies 3.343750e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_interchange_fixed(int* a, int* b, int n) {
^
compiler-optimizations.cpp:283:1: remark: Greedy Register Allocator: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 143 to 166; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Virtual Register Rewriter: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 166 to 161; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: 48 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:283:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 161 to 191; Delta: 30 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Control Flow Optimizer: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 191 to 180; Delta: -11 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Branch Probability Basic Block Placement: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 180 to 183; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: X86 LEA Fixup: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 183 to 184; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:1: remark: Check CFA info and insert CFI instructions if needed: Function: _Z22test_interchange_fixedPiS_i: MI Instruction count changed from 184 to 185; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 9 [-Rpass-analysis=asm-printer]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:289:1: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 35 [-Rpass-analysis=asm-printer]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:284:29: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
    for (int j = 0; j < n; j++) {
                            ^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:286:36: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                                   ^
compiler-optimizations.cpp:285:9: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        for (int i = 1; i < n; i++) {
        ^
compiler-optimizations.cpp:286:28: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                           ^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 26 [-Rpass-analysis=asm-printer]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:286:28: remark: BasicBlock: : 19 [-Rpass-analysis=asm-printer]
            b[j * n + i] = a[j * n + i] - a[(j - 1)* n + i];
                           ^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_interchange_fixed(int* a, int* b, int n) {
     ^
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 12 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:283:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:283:1: remark: 166 instructions in function [-Rpass-analysis=asm-printer]
void test_interchange_fixed(int* a, int* b, int n) {
^
compiler-optimizations.cpp:291:6: remark: Canonicalize natural loops: IR instruction count changed from 3174 to 3176; Delta: 2 [-Rpass-analysis=size-info]
void test_distribution(int *a, int *b, int* c, int* e, int n) {
     ^
compiler-optimizations.cpp:291:6: remark: Canonicalize natural loops: Function: _Z17test_distributionPiS_S_S_i: IR instruction count changed from 115 to 117; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:6: remark: Loop Strength Reduction: IR instruction count changed from 3176 to 3180; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:6: remark: Loop Strength Reduction: Function: _Z17test_distributionPiS_S_S_i: IR instruction count changed from 117 to 121; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:6: remark: Loop Strength Reduction: IR instruction count changed from 3180 to 3185; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:6: remark: Loop Strength Reduction: Function: _Z17test_distributionPiS_S_S_i: IR instruction count changed from 121 to 126; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:6: remark: CodeGen Prepare: IR instruction count changed from 3185 to 3218; Delta: 33 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:6: remark: CodeGen Prepare: Function: _Z17test_distributionPiS_S_S_i: IR instruction count changed from 117 to 159; Delta: 42 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z17test_distributionPiS_S_S_i: MI Instruction count changed from 0 to 92; Delta: 92 [-Rpass-analysis=size-info]
void test_distribution(int *a, int *b, int* c, int* e, int n) {
^
compiler-optimizations.cpp:291:1: remark: Eliminate PHI nodes for register allocation: Function: _Z17test_distributionPiS_S_S_i: MI Instruction count changed from 92 to 104; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:1: remark: Two-Address instruction pass: Function: _Z17test_distributionPiS_S_S_i: MI Instruction count changed from 104 to 122; Delta: 18 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:1: remark: Simple Register Coalescing: Function: _Z17test_distributionPiS_S_S_i: MI Instruction count changed from 122 to 79; Delta: -43 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:1: remark: 2 virtual registers copies 3.137255e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:291:1: remark: Virtual Register Rewriter: Function: _Z17test_distributionPiS_S_S_i: MI Instruction count changed from 79 to 74; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:291:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:291:1: remark: Control Flow Optimizer: Function: _Z17test_distributionPiS_S_S_i: MI Instruction count changed from 74 to 66; Delta: -8 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:292:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:292:23: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:292:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:292:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:291:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_distribution(int *a, int *b, int* c, int* e, int n) {
     ^
compiler-optimizations.cpp:291:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:291:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:292:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:293:27: remark: BasicBlock: : 13 [-Rpass-analysis=asm-printer]
        a[i] = a[i - 1] * b[i];
                          ^
compiler-optimizations.cpp:292:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:293:27: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        a[i] = a[i - 1] * b[i];
                          ^
compiler-optimizations.cpp:292:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:293:25: remark: BasicBlock: : 13 [-Rpass-analysis=asm-printer]
        a[i] = a[i - 1] * b[i];
                        ^
compiler-optimizations.cpp:292:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:293:25: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
        a[i] = a[i - 1] * b[i];
                        ^
compiler-optimizations.cpp:296:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:291:1: remark: 66 instructions in function [-Rpass-analysis=asm-printer]
void test_distribution(int *a, int *b, int* c, int* e, int n) {
^
compiler-optimizations.cpp:298:6: remark: Canonicalize natural loops: IR instruction count changed from 3218 to 3219; Delta: 1 [-Rpass-analysis=size-info]
void test_distribution_fixed(int * __restrict a, int * __restrict b, int* __restrict c, int* __restrict e, int n) {
     ^
compiler-optimizations.cpp:298:6: remark: Canonicalize natural loops: Function: _Z23test_distribution_fixedPiS_S_S_i: IR instruction count changed from 54 to 55; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:6: remark: Loop Strength Reduction: IR instruction count changed from 3219 to 3224; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:6: remark: Loop Strength Reduction: Function: _Z23test_distribution_fixedPiS_S_S_i: IR instruction count changed from 55 to 60; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:6: remark: CodeGen Prepare: IR instruction count changed from 3224 to 3243; Delta: 19 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:6: remark: CodeGen Prepare: Function: _Z23test_distribution_fixedPiS_S_S_i: IR instruction count changed from 55 to 79; Delta: 24 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z23test_distribution_fixedPiS_S_S_i: MI Instruction count changed from 0 to 47; Delta: 47 [-Rpass-analysis=size-info]
void test_distribution_fixed(int * __restrict a, int * __restrict b, int* __restrict c, int* __restrict e, int n) {
^
compiler-optimizations.cpp:298:1: remark: Eliminate PHI nodes for register allocation: Function: _Z23test_distribution_fixedPiS_S_S_i: MI Instruction count changed from 47 to 55; Delta: 8 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:1: remark: Two-Address instruction pass: Function: _Z23test_distribution_fixedPiS_S_S_i: MI Instruction count changed from 55 to 65; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:1: remark: Simple Register Coalescing: Function: _Z23test_distribution_fixedPiS_S_S_i: MI Instruction count changed from 65 to 40; Delta: -25 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:1: remark: 1 virtual registers copies 3.200000e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:298:1: remark: Virtual Register Rewriter: Function: _Z23test_distribution_fixedPiS_S_S_i: MI Instruction count changed from 40 to 35; Delta: -5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:298:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:298:1: remark: Control Flow Optimizer: Function: _Z23test_distribution_fixedPiS_S_S_i: MI Instruction count changed from 35 to 31; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:299:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
                      ^
compiler-optimizations.cpp:299:23: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:298:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_distribution_fixed(int * __restrict a, int * __restrict b, int* __restrict c, int* __restrict e, int n) {
     ^
compiler-optimizations.cpp:299:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:300:25: remark: BasicBlock: : 13 [-Rpass-analysis=asm-printer]
        a[i] = a[i - 1] * b[i];
                        ^
compiler-optimizations.cpp:299:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; i++) {
    ^
compiler-optimizations.cpp:300:25: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
        a[i] = a[i - 1] * b[i];
                        ^
compiler-optimizations.cpp:303:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:298:1: remark: 31 instructions in function [-Rpass-analysis=asm-printer]
void test_distribution_fixed(int * __restrict a, int * __restrict b, int* __restrict c, int* __restrict e, int n) {
^
compiler-optimizations.cpp:306:6: remark: Canonicalize natural loops: IR instruction count changed from 3243 to 3244; Delta: 1 [-Rpass-analysis=size-info]
void test_partitioning(int* v, int pivot, int n) {
     ^
compiler-optimizations.cpp:306:6: remark: Canonicalize natural loops: Function: _Z17test_partitioningPiii: IR instruction count changed from 68 to 69; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:6: remark: Loop Strength Reduction: IR instruction count changed from 3244 to 3243; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:6: remark: Loop Strength Reduction: Function: _Z17test_partitioningPiii: IR instruction count changed from 69 to 68; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:6: remark: CodeGen Prepare: IR instruction count changed from 3243 to 3260; Delta: 17 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:6: remark: CodeGen Prepare: Function: _Z17test_partitioningPiii: IR instruction count changed from 69 to 85; Delta: 16 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z17test_partitioningPiii: MI Instruction count changed from 0 to 73; Delta: 73 [-Rpass-analysis=size-info]
void test_partitioning(int* v, int pivot, int n) {
^
compiler-optimizations.cpp:306:1: remark: Process Implicit Definitions: Function: _Z17test_partitioningPiii: MI Instruction count changed from 73 to 72; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: Eliminate PHI nodes for register allocation: Function: _Z17test_partitioningPiii: MI Instruction count changed from 72 to 90; Delta: 18 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: Two-Address instruction pass: Function: _Z17test_partitioningPiii: MI Instruction count changed from 90 to 95; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: Simple Register Coalescing: Function: _Z17test_partitioningPiii: MI Instruction count changed from 95 to 59; Delta: -36 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: 1 virtual registers copies 2.941177e-01 total copies cost generated in function [-Rpass-missed=regalloc]
compiler-optimizations.cpp:306:1: remark: Virtual Register Rewriter: Function: _Z17test_partitioningPiii: MI Instruction count changed from 59 to 56; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: 8 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:306:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z17test_partitioningPiii: MI Instruction count changed from 56 to 61; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: Control Flow Optimizer: Function: _Z17test_partitioningPiii: MI Instruction count changed from 61 to 55; Delta: -6 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: Branch Probability Basic Block Placement: Function: _Z17test_partitioningPiii: MI Instruction count changed from 55 to 60; Delta: 5 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:306:1: remark: Check CFA info and insert CFI instructions if needed: Function: _Z17test_partitioningPiii: MI Instruction count changed from 60 to 61; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:309:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int j = 0; j < n; j++) {
                      ^
compiler-optimizations.cpp:309:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:306:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_partitioning(int* v, int pivot, int n) {
     ^
compiler-optimizations.cpp:310:13: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
        if (v[j] <= pivot) {
            ^
compiler-optimizations.cpp:310:13: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:312:23: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
            std::swap(v[i], v[j]);
                      ^
compiler-optimizations.cpp:306:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_partitioning(int* v, int pivot, int n) {
     ^
compiler-optimizations.cpp:316:15: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
    std::swap(v[i], v[n-1]);
              ^
compiler-optimizations.cpp:309:5: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
    for (int j = 0; j < n; j++) {
    ^
compiler-optimizations.cpp:309:29: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int j = 0; j < n; j++) {
                            ^
compiler-optimizations.cpp:310:13: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (v[j] <= pivot) {
            ^
compiler-optimizations.cpp:310:13: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:312:23: remark: BasicBlock: : 8 [-Rpass-analysis=asm-printer]
            std::swap(v[i], v[j]);
                      ^
compiler-optimizations.cpp:312:23: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:306:1: remark: 57 instructions in function [-Rpass-analysis=asm-printer]
void test_partitioning(int* v, int pivot, int n) {
^
compiler-optimizations.cpp:319:6: remark: Canonicalize natural loops: IR instruction count changed from 3260 to 3262; Delta: 2 [-Rpass-analysis=size-info]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:319:6: remark: Canonicalize natural loops: Function: _Z11test_fusionPiiS_S_: IR instruction count changed from 180 to 182; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: Loop Strength Reduction: IR instruction count changed from 3262 to 3261; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: Loop Strength Reduction: Function: _Z11test_fusionPiiS_S_: IR instruction count changed from 182 to 181; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: Constant Hoisting: IR instruction count changed from 3261 to 3263; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: Constant Hoisting: Function: _Z11test_fusionPiiS_S_: IR instruction count changed from 182 to 183; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: Expand reduction intrinsics: IR instruction count changed from 3263 to 3275; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: Expand reduction intrinsics: Function: _Z11test_fusionPiiS_S_: IR instruction count changed from 183 to 195; Delta: 12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: CodeGen Prepare: IR instruction count changed from 3275 to 3272; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:6: remark: CodeGen Prepare: Function: _Z11test_fusionPiiS_S_: IR instruction count changed from 195 to 192; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 0 to 215; Delta: 215 [-Rpass-analysis=size-info]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
^
compiler-optimizations.cpp:319:1: remark: Machine Common Subexpression Elimination: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 215 to 214; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Machine code sinking: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 214 to 212; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Process Implicit Definitions: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 212 to 210; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Eliminate PHI nodes for register allocation: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 210 to 282; Delta: 72 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Two-Address instruction pass: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 282 to 372; Delta: 90 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Simple Register Coalescing: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 372 to 210; Delta: -162 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:327:5: remark: 4 virtual registers copies 1.002353e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:322:5: remark: 4 virtual registers copies 2.007059e+01 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:319:1: remark: 34 virtual registers copies 3.426471e+01 total copies cost generated in function [-Rpass-missed=regalloc]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
^
compiler-optimizations.cpp:319:1: remark: Virtual Register Rewriter: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 210 to 206; Delta: -4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: 16 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:319:1: remark: Prologue/Epilogue Insertion & Frame Finalization: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 206 to 216; Delta: 10 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Control Flow Optimizer: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 216 to 203; Delta: -13 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Branch Probability Basic Block Placement: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 203 to 207; Delta: 4 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:319:1: remark: Check CFA info and insert CFI instructions if needed: Function: _Z11test_fusionPiiS_S_: MI Instruction count changed from 207 to 208; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:321:16: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
    auto min = a[0];
               ^
compiler-optimizations.cpp:322:23: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
                      ^
compiler-optimizations.cpp:322:5: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:322:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:323:13: remark: BasicBlock: : 27 [-Rpass-analysis=asm-printer]
        if (a[i] < min) min = a[i];
            ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:323:13: remark: BasicBlock: : 14 [-Rpass-analysis=asm-printer]
        if (a[i] < min) min = a[i];
            ^
compiler-optimizations.cpp:322:5: remark: BasicBlock: : 20 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:323:13: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        if (a[i] < min) min = a[i];
            ^
compiler-optimizations.cpp:322:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
                      ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:327:5: remark: BasicBlock: : 10 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:327:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:328:13: remark: BasicBlock: : 27 [-Rpass-analysis=asm-printer]
        if (a[i] > max) max = a[i];
            ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:328:13: remark: BasicBlock: : 14 [-Rpass-analysis=asm-printer]
        if (a[i] > max) max = a[i];
            ^
compiler-optimizations.cpp:327:5: remark: BasicBlock: : 20 [-Rpass-analysis=asm-printer]
    for (int i = 1; i < n; i++) {
    ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:328:13: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
        if (a[i] > max) max = a[i];
            ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:331:14: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
    *out_max = max;
             ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
     ^
compiler-optimizations.cpp:319:6: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:319:1: remark: 201 instructions in function [-Rpass-analysis=asm-printer]
void test_fusion(int* a, int n, int* out_max, int* out_min) {
^
compiler-optimizations.cpp:335:6: remark: Canonicalize natural loops: IR instruction count changed from 3272 to 3274; Delta: 2 [-Rpass-analysis=size-info]
void test_gvn3(double* a, double *b, int n) {
     ^
compiler-optimizations.cpp:335:6: remark: Canonicalize natural loops: Function: _Z9test_gvn3PdS_i: IR instruction count changed from 92 to 94; Delta: 2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:6: remark: Loop Strength Reduction: IR instruction count changed from 3274 to 3277; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:6: remark: Loop Strength Reduction: Function: _Z9test_gvn3PdS_i: IR instruction count changed from 94 to 97; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:6: remark: CodeGen Prepare: IR instruction count changed from 3277 to 3300; Delta: 23 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:6: remark: CodeGen Prepare: Function: _Z9test_gvn3PdS_i: IR instruction count changed from 94 to 120; Delta: 26 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: X86 DAG->DAG Instruction Selection: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 0 to 106; Delta: 106 [-Rpass-analysis=size-info]
void test_gvn3(double* a, double *b, int n) {
^
compiler-optimizations.cpp:335:1: remark: Early Tail Duplication: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 106 to 105; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Early Machine Loop Invariant Code Motion: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 105 to 108; Delta: 3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Machine Common Subexpression Elimination: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 108 to 107; Delta: -1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Peephole Optimizations: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 107 to 105; Delta: -2 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Eliminate PHI nodes for register allocation: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 105 to 114; Delta: 9 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Two-Address instruction pass: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 114 to 133; Delta: 19 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Simple Register Coalescing: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 133 to 97; Delta: -36 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:336:5: remark: 2 virtual registers copies 7.551724e+00 total copies cost generated in loop [-Rpass-missed=regalloc]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:335:1: remark: 4 virtual registers copies 8.258621e+00 total copies cost generated in function [-Rpass-missed=regalloc]
void test_gvn3(double* a, double *b, int n) {
^
compiler-optimizations.cpp:335:1: remark: Virtual Register Rewriter: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 97 to 94; Delta: -3 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: 0 stack bytes in function [-Rpass-analysis=prologepilog]
compiler-optimizations.cpp:335:1: remark: Control Flow Optimizer: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 94 to 82; Delta: -12 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:335:1: remark: Branch Probability Basic Block Placement: Function: _Z9test_gvn3PdS_i: MI Instruction count changed from 82 to 83; Delta: 1 [-Rpass-analysis=size-info]
compiler-optimizations.cpp:336:23: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
                      ^
compiler-optimizations.cpp:336:23: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:336:5: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:335:6: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
void test_gvn3(double* a, double *b, int n) {
     ^
compiler-optimizations.cpp:335:6: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:336:5: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:337:16: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
        b[i] = a[i] + 1;
               ^
compiler-optimizations.cpp:339:18: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
            a[i] += 2;
                 ^
compiler-optimizations.cpp:336:28: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
                           ^
compiler-optimizations.cpp:336:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:335:6: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
void test_gvn3(double* a, double *b, int n) {
     ^
compiler-optimizations.cpp:336:28: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
                           ^
compiler-optimizations.cpp:335:6: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
void test_gvn3(double* a, double *b, int n) {
     ^
compiler-optimizations.cpp:339:18: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
            a[i] += 2;
                 ^
compiler-optimizations.cpp:335:6: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
void test_gvn3(double* a, double *b, int n) {
     ^
compiler-optimizations.cpp:339:18: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
            a[i] += 2;
                 ^
compiler-optimizations.cpp:336:5: remark: BasicBlock: : 7 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:336:28: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
                           ^
compiler-optimizations.cpp:337:16: remark: BasicBlock: : 6 [-Rpass-analysis=asm-printer]
        b[i] = a[i] + 1;
               ^
compiler-optimizations.cpp:338:18: remark: BasicBlock: : 3 [-Rpass-analysis=asm-printer]
        if (a[i] > 0) {
                 ^
compiler-optimizations.cpp:338:18: remark: BasicBlock: : 5 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:338:18: remark: BasicBlock: : 4 [-Rpass-analysis=asm-printer]
compiler-optimizations.cpp:336:5: remark: BasicBlock: : 2 [-Rpass-analysis=asm-printer]
    for (int i = 0; i < n; ++i) {
    ^
compiler-optimizations.cpp:342:1: remark: BasicBlock: : 1 [-Rpass-analysis=asm-printer]
}
^
compiler-optimizations.cpp:335:1: remark: 83 instructions in function [-Rpass-analysis=asm-printer]
void test_gvn3(double* a, double *b, int n) {
^
